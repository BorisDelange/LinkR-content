id,category,link_id,code,creator_id,datetime,deleted
4,dataset,1,"create_ids <- function(col_name = character(), data = tibble::tibble(), new_cols = list(), col_left_join = character()){
  
  new_cols[[col_name]] <<-
    data %>%
    dplyr::distinct(get(col_name)) %>%
    dplyr::rename_at(1, ~col_name)
  
  if (length(col_left_join) > 0) new_cols[[col_name]] <<- 
      new_cols[[col_name]] %>%
      dplyr::left_join(
        new_cols[[col_left_join]] %>%
          dplyr::rename_at(1, ~col_name) %>%
          dplyr::rename_at(2, ~paste0(""new_"", col_name)),
        by = col_name
      )
  
  else new_cols[[col_name]] <<- 
      new_cols[[col_name]] %>% 
      dplyr::mutate(!!paste0(""new_"", col_name) := 1:dplyr::n())
}

join_new_ids <- function(col_name = character(), data = tibble::tibble()){
  
  data <<-
    data %>%
    dplyr::left_join(new_cols[[col_name]], by = col_name) %>%
    dplyr::relocate(!!paste0(""new_"", col_name), .before = !!col_name) %>%
    dplyr::select(-!!col_name) %>%
    dplyr::rename_at(paste0(""new_"", col_name), ~col_name)
}

cols_left_join <- c(
  ""preceding_visit_occurrence_id"" = ""visit_occurrence_id"",
  ""preceding_visit_detail_id"" = ""visit_detail_id""
)

new_cols <- list()
data <- tibble::tibble()

prefix <- ""https://www.physionet.org/files/mimic-iv-demo-omop/0.9/1_omop_data_csv/""

tables <- tibble::tribble(
  ~table_name, ~col_types, ~ids_to_join, ~ids_to_create, 
  ""person"", ""niiiiTiiiiiccicici"", ""person_id"", ""person_id"",
  ""observation_period"", ""nnDDi"", 
  c(""observation_period_id"", ""person_id""),
  c(""observation_period_id""),
  ""care_site"", ""nciicc"", 
  c(""care_site_id""), 
  c(""care_site_id""),
  ""visit_occurrence"", ""nniDTDTiiiciicicn"", 
  c(""visit_occurrence_id"", ""person_id"", ""preceding_visit_occurrence_id""), 
  c(""visit_occurrence_id"", ""preceding_visit_occurrence_id""),
  ""visit_detail"", ""nniDTDTiiniinciccin"",
  c(""visit_detail_id"", ""person_id"", ""care_site_id"", ""preceding_visit_detail_id"", ""visit_occurrence_id""),
  c(""visit_detail_id"", ""preceding_visit_detail_id""),
  ""condition_occurrence"", ""nniDTDTicinncici"",
  c(""condition_occurrence_id"", ""person_id"", ""visit_occurrence_id"", ""visit_detail_id""),
  c(""condition_occurrence_id""),
  ""drug_exposure"", ""nniDTDTDicinicicinicicc"",
  c(""drug_exposure_id"", ""person_id"", ""visit_occurrence_id""),
  c(""drug_exposure_id""),
  ""procedure_occurrence"", ""nniDTiiiinicic"",
  c(""procedure_occurrence_id"", ""person_id"", ""visit_occurrence_id""),
  c(""procedure_occurrence_id""),
  ""measurement"", ""nniDTciiniinninncicc"",
  c(""measurement_id"", ""person_id"", ""visit_occurrence_id"", ""visit_detail_id""),
  c(""measurement_id""),
  ""observation"", ""nniDTinciiiinicicc"",
  c(""observation_id"", ""person_id"", ""visit_occurrence_id""),
  c(""observation_id""),
  ""death"", ""nDTiici"",
  c(""person_id""),
  character(),
  ""specimen"", ""nniiDTniiiccccc"",
  c(""specimen_id"", ""person_id""),
  c(""specimen_id""),
  ""location"", ""iccccccc"",
  character(),
  character(),
  ""drug_era"", ""nniDDii"",
  c(""drug_era_id"", ""person_id""),
  c(""drug_era_id""),
  ""dose_era"", ""nniinDD"",
  c(""dose_era_id"", ""person_id""),
  c(""dose_era_id""),
  ""condition_era"", ""nniDDi"",
  c(""condition_era_id"", ""person_id""),
  c(""condition_era_id"")
)

# Have all tables already been saved as csv ?
all_tables_saved_as_csv <- all(paste0(tables$table_name, "".csv"") %in% list.files(paste0(r$app_folder, ""/datasets/"", %dataset_id%)))

for (i in 1:nrow(tables)){
  table <- tables[i, ]
  if (i != 1) cat(""\n\n"")
  cat(paste0(toupper(table$table_name), ""\n\n""))
  
  get_data <- function(){
    data <<- vroom::vroom(paste0(prefix, table$table_name, "".csv""), col_types = table$col_types, progress = FALSE)
    
    if (table$table_name == ""visit_detail"") data <<- data %>%
        dplyr::relocate(visit_detail_source_value, visit_detail_source_concept_id, admitting_source_value, admitting_source_concept_id,
          discharge_to_source_value, discharge_to_concept_id, preceding_visit_detail_id, visit_detail_parent_id, visit_occurrence_id, .after = ""care_site_id"")
    if (table$table_name == ""condition_occurrence"") data <<- data %>%
        dplyr::relocate(condition_status_concept_id, .after = ""condition_type_concept_id"")
    
    ids_to_join <- table$ids_to_join %>% unlist()
    ids_to_create <- table$ids_to_create %>% unlist()
    
    if (length(ids_to_join) > 0){
      for (j in 1:length(ids_to_join)){
        id_to_join <- ids_to_join[j]
        
        if (id_to_join %in% ids_to_create){
          col_left_join <- character()
          if (id_to_join %in% names(cols_left_join)) col_left_join <- cols_left_join[id_to_join]
          
          create_ids(col_name = id_to_join, data = data, new_cols = new_cols, col_left_join = col_left_join)
        }
        
        join_new_ids(col_name = id_to_join, data = data)
      }
    }
    
    data
  }
  
  if (table$table_name %in% c(""person"", ""care_site"", ""visit_occurrence"", ""visit_detail"") & !all_tables_saved_as_csv) get_data()
  
  import_dataset(output = output, ns = ns, i18n = i18n, r = r, d = d, dataset_id = %dataset_id%, data = get_data(), 
    type = table$table_name, omop_version = ""5.3"", save_as_csv = TRUE, rewrite = FALSE)
}",1,2023-06-01 18:32:28,1
5,subset,1,"add_persons_to_subset(output = output, m = m, persons = d$person %>% dplyr::select(person_id), subset_id = %subset_id%, i18n = i18n, ns = ns)",1,2023-06-01 18:33:47,1
7,dataset,2,"create_ids <- function(col_name = character(), data = tibble::tibble(), new_cols = list(), col_left_join = character()){
  
  new_cols[[col_name]] <<-
    data %>%
    dplyr::distinct(get(col_name)) %>%
    dplyr::rename_at(1, ~col_name)
  
  if (length(col_left_join) > 0) new_cols[[col_name]] <<- 
      new_cols[[col_name]] %>%
      dplyr::left_join(
        new_cols[[col_left_join]] %>%
          dplyr::rename_at(1, ~col_name) %>%
          dplyr::rename_at(2, ~paste0(""new_"", col_name)),
        by = col_name
      )
  
  else new_cols[[col_name]] <<- 
      new_cols[[col_name]] %>% 
      dplyr::mutate(!!paste0(""new_"", col_name) := 1:dplyr::n())
}

join_new_ids <- function(col_name = character(), data = tibble::tibble()){
  
  data <<-
    data %>%
    dplyr::left_join(new_cols[[col_name]], by = col_name) %>%
    dplyr::relocate(!!paste0(""new_"", col_name), .before = !!col_name) %>%
    dplyr::select(-!!col_name) %>%
    dplyr::rename_at(paste0(""new_"", col_name), ~col_name)
}

cols_left_join <- c(
  ""preceding_visit_occurrence_id"" = ""visit_occurrence_id"",
  ""preceding_visit_detail_id"" = ""visit_detail_id""
)

new_cols <- list()
data <- tibble::tibble()

prefix <- ""https://www.physionet.org/files/mimic-iv-demo-omop/0.9/1_omop_data_csv/""

tables <- tibble::tribble(
  ~table_name, ~col_types, ~ids_to_join, ~ids_to_create, 
  ""person"", ""niiiiTiiiiiccicici"", ""person_id"", ""person_id"",
  ""observation_period"", ""nnDDi"", 
  c(""observation_period_id"", ""person_id""),
  c(""observation_period_id""),
  ""care_site"", ""nciicc"", 
  c(""care_site_id""), 
  c(""care_site_id""),
  ""visit_occurrence"", ""nniDTDTiiiciicicn"", 
  c(""visit_occurrence_id"", ""person_id"", ""preceding_visit_occurrence_id""), 
  c(""visit_occurrence_id"", ""preceding_visit_occurrence_id""),
  ""visit_detail"", ""nniDTDTiiniinciccin"",
  c(""visit_detail_id"", ""person_id"", ""care_site_id"", ""preceding_visit_detail_id"", ""visit_occurrence_id""),
  c(""visit_detail_id"", ""preceding_visit_detail_id""),
  ""condition_occurrence"", ""nniDTDTicinncici"",
  c(""condition_occurrence_id"", ""person_id"", ""visit_occurrence_id"", ""visit_detail_id""),
  c(""condition_occurrence_id""),
  ""drug_exposure"", ""nniDTDTDicinicicinicicc"",
  c(""drug_exposure_id"", ""person_id"", ""visit_occurrence_id""),
  c(""drug_exposure_id""),
  ""procedure_occurrence"", ""nniDTiiiinicic"",
  c(""procedure_occurrence_id"", ""person_id"", ""visit_occurrence_id""),
  c(""procedure_occurrence_id""),
  ""measurement"", ""nniDTciiniinninncicc"",
  c(""measurement_id"", ""person_id"", ""visit_occurrence_id"", ""visit_detail_id""),
  c(""measurement_id""),
  ""observation"", ""nniDTinciiiinicicc"",
  c(""observation_id"", ""person_id"", ""visit_occurrence_id""),
  c(""observation_id""),
  ""death"", ""nDTiici"",
  c(""person_id""),
  character(),
  ""specimen"", ""nniiDTniiiccccc"",
  c(""specimen_id"", ""person_id""),
  c(""specimen_id""),
  ""location"", ""iccccccc"",
  character(),
  character(),
  ""drug_era"", ""nniDDii"",
  c(""drug_era_id"", ""person_id""),
  c(""drug_era_id""),
  ""dose_era"", ""nniinDD"",
  c(""dose_era_id"", ""person_id""),
  c(""dose_era_id""),
  ""condition_era"", ""nniDDi"",
  c(""condition_era_id"", ""person_id""),
  c(""condition_era_id"")
)

# Have all tables already been saved as csv ?
all_tables_saved_as_csv <- all(paste0(tables$table_name, "".csv"") %in% list.files(paste0(r$app_folder, ""/datasets/"", %dataset_id%)))

for (i in 1:nrow(tables)){
  table <- tables[i, ]
  if (i != 1) cat(""\n\n"")
  cat(paste0(toupper(table$table_name), ""\n\n""))
  
  get_data <- function(){
    data <<- vroom::vroom(paste0(prefix, table$table_name, "".csv""), col_types = table$col_types, progress = FALSE)
    
    if (table$table_name == ""visit_detail"") data <<- data %>%
        dplyr::relocate(visit_detail_source_value, visit_detail_source_concept_id, admitting_source_value, admitting_source_concept_id,
          discharge_to_source_value, discharge_to_concept_id, preceding_visit_detail_id, visit_detail_parent_id, visit_occurrence_id, .after = ""care_site_id"")
    if (table$table_name == ""condition_occurrence"") data <<- data %>%
        dplyr::relocate(condition_status_concept_id, .after = ""condition_type_concept_id"")
    
    ids_to_join <- table$ids_to_join %>% unlist()
    ids_to_create <- table$ids_to_create %>% unlist()
    
    if (length(ids_to_join) > 0){
      for (j in 1:length(ids_to_join)){
        id_to_join <- ids_to_join[j]
        
        if (id_to_join %in% ids_to_create){
          col_left_join <- character()
          if (id_to_join %in% names(cols_left_join)) col_left_join <- cols_left_join[id_to_join]
          
          create_ids(col_name = id_to_join, data = data, new_cols = new_cols, col_left_join = col_left_join)
        }
        
        join_new_ids(col_name = id_to_join, data = data)
      }
    }
    
    data
  }
  
  if (table$table_name %in% c(""person"", ""care_site"", ""visit_occurrence"", ""visit_detail"") & !all_tables_saved_as_csv) get_data()
  
  import_dataset(output = output, ns = ns, i18n = i18n, r = r, d = d, dataset_id = %dataset_id%, data = get_data(), 
    type = table$table_name, omop_version = ""5.3"", read_with = ""vroom"", save_as = ""csv"", rewrite = FALSE)
}",1,2023-06-23 17:17:31,0
11,vocabulary,1,"folder <- ""https://www.physionet.org/files/mimic-iv-demo-omop/0.9/1_omop_data_csv/""

col_types <- list()
col_types$concept <- ""iccccccDDc""
col_types$concept_relationship <- ""iicDDc""

for (table_name in c(""concept"", ""concept_relationship"")){
  
  cat(paste0(toupper(table_name), ""\n\n""))
  
  data <-
    vroom::vroom(paste0(folder, ""2b_"", table_name, "".csv""), col_types = col_types[[table_name]], progress = FALSE) %>% 
    dplyr::rename(valid_start_date = valid_start_DATE, valid_end_date = valid_end_DATE)
  
  import_vocabulary_table(output = output, ns = ns, i18n = i18n, r = r, m = m, table_name = table_name, data = data, vocabulary_id = ""%vocabulary_id%"")
  cat(""\n"") 
}",1,2023-09-18 11:20:02,0
12,vocabulary,2,NA,1,2023-09-18 11:20:06,0
13,vocabulary,3,NA,1,2023-09-18 11:20:10,0
18,plugin_ui,2,"# Get widget options
sql <- glue::glue_sql(""SELECT * FROM aggregated_widgets_options WHERE widget_id = %widget_id%"", .con = r$db)
widget_options <- DBI::dbGetQuery(m$db, sql)
plots <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
selected_script <- NULL
selected_script_result <- widget_options %>% dplyr::filter(name == ""selected_script"")
if (nrow(selected_script_result) > 0) if ((selected_script_result %>% dplyr::pull(value_num)) %in% plots$id) selected_script <- selected_script_result %>% dplyr::pull(value_num)

# Get concepts associated with this widget
concepts <- tibble::tibble(concept_id = 0L, concept_name = i18np$t(""none"")) %>% dplyr::bind_rows(selected_concepts %>% dplyr::select(concept_id, concept_name))
x_variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")
y_variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")

# Get palettes from RColorBrewer
palettes <- convert_tibble_to_list(data = tibble::tibble(pal = c(""Set1"", ""Set2"", ""Set3"", ""Reds"", ""Purples"", ""Oranges"", ""Greens"", ""Blues"", ""Greys"")), key_col = ""pal"", text_col = ""pal"")

# List of inputs (to save & get saved params)

dropdowns <- c(""plot_function"", ""plot_theme"", ""bins_type"", ""x_variable"", ""y_variable"", ""colour_pal"", ""group_by"", ""group_by_type"", ""summarize_fct"")
textfields <- c(""x_label"", ""y_label"")
spin_buttons <- c(""num_of_bins"", ""bin_width"", ""group_by_num"")
toggle_inputs <- c(""group_data"", ""run_code_at_script_launch"", ""run_plot_at_script_launch"")
colour_inputs <- ""colour""
ace_inputs <- ""code""
inputs <- c(dropdowns, textfields, spin_buttons, toggle_inputs, colour_inputs, ace_inputs)

default_values <- list()
default_values$plot_function <- ""geom_histogram""
default_values$plot_theme <- ""theme_minimal""
default_values$bins_type <- ""num_of_bins""
default_values$x_variable <- 0L
default_values$y_variable <- 0L
default_values$colour_pal <- ""Set1""
default_values$group_by <- ""datetime""
default_values$group_by_type <- ""hours""
default_values$summarize_fct <- ""mean""
default_values$x_label <- """"
default_values$y_label <- """"
default_values$num_of_bins <- 50L
default_values$bin_width <- 10L
default_values$group_by_num <- 4L
default_values$group_data <- FALSE
default_values$colour <- ""#E41A1C""
default_values$run_code_at_script_launch <- FALSE
default_values$run_plot_at_script_launch <- FALSE
default_values$code <- """"

inputs_values <- list()

# Get saved params for this widget
sql <- glue::glue_sql(""SELECT * FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND link_id = {selected_script}"", .con = r$db)
widget_options <- DBI::dbGetQuery(m$db, sql)

for (input_name in inputs){
    widget_option <- widget_options %>% dplyr::filter(name == input_name)
    
    if (nrow(widget_option) > 0){
        if (input_name %in% spin_buttons || input_name %in% c(""x_variable"", ""y_variable"")) inputs_values[[input_name]] <- widget_option$value_num
        else inputs_values[[input_name]] <- widget_option$value
    }
    else inputs_values[[input_name]] <- default_values[[input_name]]
}

# aceEditor div : show editor if user has access to the console
ace_editor_div <- div(br(), shiny.fluent::MessageBar(i18np$t(""unauthorized_access_to_console""), messageBarType = 5), br())
if (length(m$user_accesses) > 0) if (""data_console"" %in% m$user_accesses) ace_editor_div <- div(
    div(
        shinyAce::aceEditor(
            ns(""code_%widget_id%""), """", mode = ""r"", value = inputs_values$code,
                code_hotkeys = list(
                    ""r"", list(
                      run_selection = list(win = ""CTRL-ENTER"", mac = ""CTRL-ENTER|CMD-ENTER""),
                      run_all = list(win = ""CTRL-SHIFT-ENTER"", mac = ""CTRL-SHIFT-ENTER|CMD-SHIFT-ENTER""),
                      save = list(win = ""CTRL-S"", mac = ""CTRL-S|CMD-S"")
                    )
                ),
                autoScrollEditorIntoView = TRUE, minLines = 30, maxLines = 1000
        ), 
    style = ""width: 100%;""),
    shiny.fluent::PrimaryButton.shinyInput(ns(""run_code_%widget_id%""), i18n$t(""run_code"")), br()
)

tagList(
    shiny.fluent::reactOutput(ns(""delete_confirm_%widget_id%"")),
    shiny.fluent::Pivot(
        id = ns(""pivot_%widget_id%""),
        onLinkClick = htmlwidgets::JS(paste0(""item => Shiny.setInputValue(''"", id, ""-current_tab_%widget_id%'', item.props.id)"")),
        shiny.fluent::PivotItem(id = ""plot_%widget_id%"", itemKey = ""plot"", headerText = i18np$t(""plot"")),
        shiny.fluent::PivotItem(id = ""code_%widget_id%"", itemKey = ""code"", headerText = i18np$t(""code"")),
        shiny.fluent::PivotItem(id = ""scripts_management_%widget_id%"", itemKey = ""scripts_management"", headerText = i18np$t(""scripts_management""))
    ),
    conditionalPanel(
        condition = ""input.current_tab_%widget_id% == ''plot_%widget_id%'' || input.current_tab_%widget_id% == ''code_%widget_id%'' || input.current_tab_%widget_id% == null"", ns = ns, br(),
        shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
            div(shiny.fluent::Dropdown.shinyInput(ns(""script_choice_%widget_id%""),
                options = convert_tibble_to_list(plots, key_col = ""id"", text_col = ""name""), value = selected_script), style = ""width:300px""),
            shiny.fluent::DefaultButton.shinyInput(ns(""save_%widget_id%""), i18np$t(""save"")),
            conditionalPanel(
                condition = ""input.current_tab_%widget_id% == ''plot_%widget_id%'' || input.current_tab_%widget_id% == null"", ns = ns,
                shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                    shiny.fluent::Toggle.shinyInput(ns(""run_plot_at_script_launch_%widget_id%""), value = FALSE, style = ""margin-top:5px;""),
                    div(class = ""toggle_title"", i18np$t(""run_plot_at_script_launch""), style = ""padding-top:5px;"")
                )
            ),
            conditionalPanel(
                condition = ""input.current_tab_%widget_id% == ''code_%widget_id%''"", ns = ns,
                shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                    shiny.fluent::Toggle.shinyInput(ns(""run_code_at_script_launch_%widget_id%""), value = FALSE, style = ""margin-top:5px;""),
                    div(class = ""toggle_title"", i18np$t(""run_code_at_script_launch""), style = ""padding-top:5px;"")
                )
            )
        )
    ),
    conditionalPanel(
        condition = ""input.current_tab_%widget_id% == ''plot_%widget_id%'' || input.current_tab_%widget_id% == null"", ns = ns,
        div(
            id = ns(""plot_tab_%widget_id%""),
            div(
                style = ""display:flex;"",
                div(id = ns(""split_layout_left_%widget_id%""),
                    style = ""padding-right:10px; width:50%;"",
                    div(
                        id = ns(""plot_div_%widget_id%""), br(),
                        plotOutput(ns(""plot_output_%widget_id%""))
                    ), br(),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        shiny.fluent::Toggle.shinyInput(ns(""hide_params_%widget_id%""), value = FALSE, style = ""margin-top:5px;""),
                        div(class = ""toggle_title"", i18np$t(""hide_params""), style = ""padding-top:5px;""),
                        div(strong(i18np$t(""plot_width"")), style = ""margin-top:6px;""),
                        div(shiny.fluent::Slider.shinyInput(ns(""plot_width_%widget_id%""), value = 100, min = 1, max = 100), style = ""width:300px; margin-left:0px; padding-top:4px;"")
                    )
                ),
                div(id = ns(""split_layout_right_%widget_id%""),
                    style = ""padding-left:10px; width:50%;"",
                    shiny.fluent::Pivot(
                        id = ns(""plot_pivot_%widget_id%""),
                        onLinkClick = htmlwidgets::JS(paste0(""item => Shiny.setInputValue(''"", id, ""-plot_current_tab_%widget_id%'', item.props.id)"")),
                        shiny.fluent::PivotItem(id = ""plot_parameters_%widget_id%"", itemKey = ""plot_parameters"", headerText = i18np$t(""plot_parameters"")),
                        shiny.fluent::PivotItem(id = ""variables_%widget_id%"", itemKey = ""variables"", headerText = i18np$t(""variables""))
                    ),
                    conditionalPanel(
                        condition = ""input.plot_current_tab_%widget_id% == ''plot_parameters_%widget_id%'' || input.plot_current_tab_%widget_id% == null"", ns = ns, br(),
                        shiny.fluent::Dropdown.shinyInput(ns(""plot_function_%widget_id%""), label = i18np$t(""plot_choice""),
                            options = list(
                                list(key = ""geom_histogram"", text = paste0(i18np$t(""histogram""), "" (geom_histogram)"")),
                                list(key = ""geom_point"", text = paste0(i18np$t(""scatter_plot""), "" (geom_point)""))
                            ),
                            value = inputs_values$plot_function),
                        shiny.fluent::Dropdown.shinyInput(ns(""plot_theme_%widget_id%""), label = i18np$t(""theme""),
                            options = list(
                                list(key = ""theme_grey"", text = ""Grey""),
                                list(key = ""theme_gray"", text = ""Gray""),
                                list(key = ""theme_bw"", text = ""Black & white""),
                                list(key = ""theme_linedraw"", text = ""Linedraw""),
                                list(key = ""theme_light"", text = ""Light""),
                                list(key = ""theme_dark"", text = ""Dark""),
                                list(key = ""theme_minimal"", text = ""Minimal""),
                                list(key = ""theme_classic"", text = ""Classic""),
                                list(key = ""theme_void"", text = ""Void""),
                                list(key = ""theme_test"", text = ""Test"")
                            ),
                            value = inputs_values$plot_theme),
                        shiny.fluent::TextField.shinyInput(ns(""x_label_%widget_id%""), label = i18np$t(""x_label""), value = inputs_values$x_label),
                        shiny.fluent::TextField.shinyInput(ns(""y_label_%widget_id%""), label = i18np$t(""y_label""), value = inputs_values$y_label),
                        conditionalPanel(
                            condition = ""input.plot_function_%widget_id% == ''geom_histogram''"", ns = ns,
                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                div(
                                    shiny.fluent::Dropdown.shinyInput(ns(""bins_type_%widget_id%""), label = i18np$t(""bins""),
                                        options = list(
                                            list(key = ""num_of_bins"", text = i18np$t(""num_of_bins"")),
                                            list(key = ""bin_width"", text = i18np$t(""bin_width""))
                                        ),
                                        value = inputs_values$bins_type),
                                    style = ""width:50%""
                                ),
                                div(
                                    conditionalPanel(
                                        condition = ""input.bins_type_%widget_id% == ''num_of_bins''"", ns = ns,
                                        shiny.fluent::SpinButton.shinyInput(ns(""num_of_bins_%widget_id%""), label = i18np$t(""value""), 
                                            value = inputs_values$num_of_bins, step = 5, min = 0, max = 2000)
                                    ),
                                    conditionalPanel(
                                        condition = ""input.bins_type_%widget_id% == ''bin_width''"", ns = ns,
                                        shiny.fluent::SpinButton.shinyInput(ns(""bin_width_%widget_id%""), label = i18np$t(""value""), 
                                        value = inputs_values$bin_width, step = 1, min = 0)
                                    ),
                                    style = ""width:50%; margin-top:28px;""
                                )
                            )
                        )
                    ),
                    shinyjs::hidden(
                        div(
                            id = ns(""variables_div_%widget_id%""), br(),
                            shiny.fluent::Dropdown.shinyInput(ns(""x_variable_%widget_id%""), label = i18np$t(""x_variable""),
                                options = x_variables, value = inputs_values$x_variable),
                            conditionalPanel(
                                condition = ""[''geom_point''].includes(input.plot_function_%widget_id%)"", ns = ns,
                                shiny.fluent::Dropdown.shinyInput(ns(""y_variable_%widget_id%""), label = i18np$t(""y_variable""),
                                 options = y_variables, value = inputs_values$y_variable)
                            ),
                            shiny.fluent::Dropdown.shinyInput(ns(""colour_pal_%widget_id%""), options = palettes, 
                                value = inputs_values$colour_pal, label = i18np$t(""palette"")),
                            uiOutput(ns(""colour_ui_%widget_id%"")),
                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                shiny.fluent::Toggle.shinyInput(ns(""group_data_%widget_id%""), 
                                    value = inputs_values$group_data, style = ""margin-top:5px;""),
                                div(class = ""toggle_title"", i18np$t(""group_data""), style = ""padding-top:5px;"")
                            ),
                            conditionalPanel(
                                condition = ""input.group_data_%widget_id% == true"", ns = ns,
                                shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                    div(
                                        shiny.fluent::Dropdown.shinyInput(ns(""group_by_%widget_id%""), 
                                            options = list(
                                                list(key = ""person_id"", text = i18np$t(""person"")),
                                                list(key = ""datetime"", text = i18np$t(""duration""))
                                            ), 
                                            value = inputs_values$group_by, label = i18np$t(""group_by"")),
                                        style = ""width:33%""
                                    ),
                                    div(
                                        conditionalPanel(
                                            condition = ""input.group_by_%widget_id% == ''datetime''"", ns = ns,
                                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                                div(
                                                    shiny.fluent::SpinButton.shinyInput(ns(""group_by_num_%widget_id%""), label = """", 
                                                        value = inputs_values$group_by_num, step = 1, min = 0, max = 2000), 
                                                    style = ""width:50%; margin-top:29px;""
                                                ),
                                                div(
                                                    shiny.fluent::Dropdown.shinyInput(ns(""group_by_type_%widget_id%""), 
                                                        options = list(
                                                            list(key = ""minutes"", text = i18np$t(""minutes"")),
                                                            list(key = ""hours"", text = i18np$t(""hours"")),
                                                            list(key = ""days"", text = i18np$t(""days""))
                                                        ), 
                                                        value = inputs_values$group_by_type, label = i18np$t(""duration"")),
                                                    style = ""width:50%""
                                                )
                                            )
                                        ),
                                        style = ""width:67%""
                                    )
                                ),
                                div(
                                    shiny.fluent::Dropdown.shinyInput(ns(""summarize_fct_%widget_id%""), 
                                        options = list(
                                            list(key = ""min"", text = i18np$t(""min"")),
                                            list(key = ""max"", text = i18np$t(""max"")),
                                            list(key = ""mean"", text = i18np$t(""mean""))
                                        ), 
                                        value = inputs_values$summarize_fct, label = i18np$t(""summarize_fct"")
                                    ),
                                    style = ""width:33%""
                                )
                            )
                        )
                    ), br(), br(),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        shiny.fluent::PrimaryButton.shinyInput(ns(""show_%widget_id%""), i18np$t(""show"")),
                        shiny.fluent::DefaultButton.shinyInput(ns(""generate_code_%widget_id%""), i18np$t(""generate_code""))
                    )
                )
            )
        )
    ),
    conditionalPanel(
        condition = ""input.current_tab_%widget_id% == ''code_%widget_id%''"", ns = ns,
        div(
            id = ns(""code_tab_%widget_id%""),
            ace_editor_div
        )
    ),
    conditionalPanel(
        condition = ""input.current_tab_%widget_id% == ''scripts_management_%widget_id%''"", ns = ns,
        div(
            id = ns(""scripts_management_tab_%widget_id%""),
            shiny.fluent::Stack(
                horizontal = TRUE, tokens = list(childrenGap = 10),
                make_textfield(i18n = i18n, ns = ns, label = ""name"", id = ""script_name_%widget_id%"", width = ""300px""),
                div(shiny.fluent::PrimaryButton.shinyInput(ns(""add_script_%widget_id%""), i18n$t(""add"")), style = ""margin-top:38px;"")
            ),
            DT::DTOutput(ns(""scripts_management_datatable_%widget_id%"")),
            shiny.fluent::Stack(
                horizontal = TRUE, tokens = list(childrenGap = 10),
                shiny.fluent::PrimaryButton.shinyInput(ns(""save_scripts_%widget_id%""), i18n$t(""save"")),
                shiny.fluent::DefaultButton.shinyInput(ns(""delete_scripts_%widget_id%""), i18n$t(""delete_selection""))
            )
        )
    )
)",1,2023-09-18 11:26:35,0
19,plugin_server,2,"# Get saved params for this widget
sql <- glue::glue_sql(""SELECT * FROM aggregated_widgets_options WHERE widget_id = %widget_id%"", .con = r$db)
widget_options <- DBI::dbGetQuery(m$db, sql)

m$widget_options_%widget_id% <- widget_options
m$scripts_%widget_id% <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = FALSE)
m$reload_dt_%widget_id% <- Sys.time()

# List of inputs (to save & get saved params)

dropdowns <- c(""plot_function"", ""plot_theme"", ""bins_type"", ""x_variable"", ""y_variable"", ""colour_pal"", ""group_by"", ""group_by_type"", ""summarize_fct"")
textfields <- c(""x_label"", ""y_label"")
spin_buttons <- c(""num_of_bins"", ""bin_width"", ""group_by_num"")
toggle_inputs <- c(""group_data"", ""run_code_at_script_launch"", ""run_plot_at_script_launch"")
colour_inputs <- ""colour""
ace_inputs <- ""code""
inputs <- c(dropdowns, textfields, spin_buttons, toggle_inputs, colour_inputs, ace_inputs)

default_values <- list()
default_values$plot_function <- ""geom_histogram""
default_values$plot_theme <- ""theme_minimal""
default_values$bins_type <- ""num_of_bins""
default_values$x_variable <- 0L
default_values$y_variable <- 0L
default_values$colour_pal <- ""Set1""
default_values$group_by <- ""datetime""
default_values$group_by_type <- ""hours""
default_values$summarize_fct <- ""mean""
default_values$x_label <- """"
default_values$y_label <- """"
default_values$num_of_bins <- 50L
default_values$bin_width <- 10L
default_values$group_by_num <- 4L
default_values$group_data <- FALSE
default_values$colour <- ""#E41A1C""
default_values$run_code_at_script_launch <- FALSE
default_values$run_plot_at_script_launch <- FALSE
default_values$code <- """"

# -------------
# --- Plot ----
# -------------

# Update x & y variables dropdowns
concepts <- tibble::tibble(concept_id = 0L, concept_name = i18np$t(""none"")) %>% dplyr::bind_rows(selected_concepts %>% dplyr::select(concept_id, concept_name))
x_variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")
shiny.fluent::updateDropdown.shinyInput(session, ""x_variable_%widget_id%"", options = x_variables)
y_variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")
shiny.fluent::updateDropdown.shinyInput(session, ""y_variable_%widget_id%"", options = y_variables)

# Render plot the first time the widget is launched
observeEvent(input$plot_function_%widget_id%, {
    %req%
    
    # Initiate variables div
    shinyjs::show(""variables_div_%widget_id%"")
    shinyjs::delay(500, shinyjs::hide(""variables_div_%widget_id%""))
    
    # Get run_code_at_script_launch & run_plot_at_script_launch option values
    plots <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
    selected_script <- NULL
    selected_script_result <- widget_options %>% dplyr::filter(name == ""selected_script"")
    if (nrow(selected_script_result) > 0) if ((selected_script_result %>% dplyr::pull(value_num)) %in% plots$id) selected_script <- selected_script_result %>% dplyr::pull(value_num)
    
    run_code_at_script_launch <- FALSE
    run_plot_at_script_launch <- FALSE
    
    if (length(selected_script) > 0){
        run_code_at_script_launch <- widget_options %>% dplyr::filter(link_id == selected_script, name == ""run_code_at_script_launch"") %>% dplyr::pull(value) %>% as.logical()
        run_plot_at_script_launch <- widget_options %>% dplyr::filter(link_id == selected_script, name == ""run_plot_at_script_launch"") %>% dplyr::pull(value) %>% as.logical()
    }
    
    # We put an extra delay (2000 ms), cause the 500 ms delay in observeEvent(input$script_choice_%widget_id%, __) is not enough to load all UI elements
    # This is not a problem when we run script code
    if (!run_code_at_script_launch & run_plot_at_script_launch) shinyjs::delay(2000, shinyjs::click(""show_%widget_id%""))
}, once = TRUE)

# Render plot from ""plot"" tab
observeEvent(input$show_%widget_id%, {
    %req%
    
    # Blank plot
    output$plot_output_%widget_id% <- renderPlot(ggplot2::ggplot())
    
    # Then load plot
    m$create_plot_type_%widget_id% <- ""show_plot""
    m$create_plot_trigger_%widget_id% <- Sys.time()
})

# Show or hide ""Variables"" tab
observeEvent(input$plot_current_tab_%widget_id%, {
    %req%
    if (input$plot_current_tab_%widget_id% == ""variables_%widget_id%"") shinyjs::show(""variables_div_%widget_id%"")
    else shinyjs::hide(""variables_div_%widget_id%"")
})

# Generate code and update aceEditor or render plot
observeEvent(m$create_plot_trigger_%widget_id%, {
    %req%
    
    create_plot_type <- isolate(m$create_plot_type_%widget_id%)
    
    # At each step of the code, we put the code in the code variable, for the shinyAce code editor (tab ""Code"")
    
    # If pivot item has not been clicked, input variables are not initiated
    #if (length(isolate(input$colour_%widget_id%)) == 0){
    #    shinyjs::show(""variables_div_%widget_id%"")
    #    shinyjs::delay(500, shinyjs::hide(""variables_div_%widget_id%""))
    #}
    
    req(length(isolate(input$colour_%widget_id%)) > 0)
    
    data <- list()
    code <- ""# A list containing the data for the plot\ndata <- list()\n""
    variable <- list()
    
    data$x <- tibble::tibble()
    variable$x <- tibble::tibble()
    data$y <- tibble::tibble()
    variable$y <- tibble::tibble()
    
    # Get x & y variables in data
    if (length(input$x_variable_%widget_id%) > 0) variable$x <- d$dataset_all_concepts %>% dplyr::filter(concept_id_1 == input$x_variable_%widget_id%)
    if (length(input$y_variable_%widget_id%) > 0) variable$y <- d$dataset_all_concepts %>% dplyr::filter(concept_id_1 == input$y_variable_%widget_id%)
 
    code <- paste0(code, ""\n# Filter data"")
    sapply(c(""x"", ""y""), function(var_name){
        if (nrow(variable[[var_name]]) > 0){
            variable[[var_name]]$domain_id <<- tolower(variable[[var_name]]$domain_id)
            if (variable[[var_name]]$domain_id %in% c(""observation"", ""measurement"")){
                data[[var_name]] <<- d[[tolower(variable[[var_name]]$domain_id)]] %>% 
                    dplyr::filter(get(paste0(tolower(variable[[var_name]]$domain_id), ""_concept_id"")) == variable[[var_name]]$concept_id_1)
                
                code <<- glue::glue(
                    ""{code}\n"",
                    ""data${var_name} <- d${tolower(variable[[var_name]]$domain_id)} %>% "",
                    ""dplyr::filter({paste0(tolower(variable[[var_name]]$domain_id), ''_concept_id'')} == {variable[[var_name]]$concept_id_1})"")
            }
        }
    })
        
    # If we choose to group data
    if (isolate(input$group_data_%widget_id%)){
        for(var in c(""x"", ""y"")){
            if (nrow(data[[var]]) > 0){
            
                code <- glue::glue(code, ""\n\n# Group {var} data"")
            
                # Group by person_id
                if (isolate(input$group_by_%widget_id% == ""person_id"")){
                    data[[var]] <- data[[var]] %>% dplyr::group_by(person_id)
                    
                    code <- glue::glue(""{code}\ndata${var} <- data${var} %>% dplyr::group_by(person_id)"")
                }
                
                # Group by datetime
                if (isolate(input$group_by_%widget_id%) == ""datetime""){
                    data[[var]] <- data[[var]] %>%
                        dplyr::filter(!is.na(value_as_number)) %>%
                        dplyr::mutate(datetime_rounded = lubridate::floor_date(
                            !!rlang::sym(paste0(tolower(variable$x$domain_id), ""_datetime"")), 
                            unit = paste0(isolate(input$group_by_num_%widget_id%), "" "", isolate(input$group_by_type_%widget_id%)))) %>%
                        dplyr::group_by(datetime_rounded)
                        
                    code <- glue::glue(
                        ""{code}\n"",
                        ""data${var} <-\n"",
                        ""    data${var} %>%\n"",
                        ""    dplyr::filter(!is.na(value_as_number)) %>%\n"",
                        ""    dplyr::mutate(datetime_rounded = lubridate::floor_date("",
                        ""{paste0(tolower(variable$x$domain_id), ''_datetime'')}, "",
                        ""unit = \""{paste0(isolate(input$group_by_num_%widget_id%), '' '', isolate(input$group_by_type_%widget_id%))}\"")) %>%\n"",
                        ""    dplyr::group_by(datetime_rounded)""
                    )

                }
                
                # Summarize with selected summarize function
                data[[var]] <-
                    data[[var]] %>% 
                    dplyr::summarize(value_as_number = match.fun(isolate(input$summarize_fct_%widget_id%))(value_as_number, na.rm = TRUE)) %>%
                    dplyr::ungroup()
                    
                code <- paste0(
                    code, "" %>%\n"",
                    ""    "", glue::glue(""dplyr::summarize(value_as_number = match.fun(\""{isolate(input$summarize_fct_%widget_id%)}\"")(value_as_number, na.rm = TRUE)) %>%\n""),
                    ""    "", glue::glue(""dplyr::ungroup()"")
                )
                
                # Rename datetime col with original name
                if (isolate(input$group_by_%widget_id%) == ""datetime""){
                    data[[var]] <- 
                        data[[var]] %>% 
                        dplyr::rename(!!paste0(tolower(variable$x$domain_id), ""_datetime"") := datetime_rounded)
                    
                    code <- paste0(
                        code, "" %>%\n"",
                        ""    "", glue::glue(""dplyr::rename({paste0(tolower(variable$x$domain_id), ''_datetime'')} := datetime_rounded)"")
                    )
                }
            }
        }
    }

    # HISTOGRAM
    
    if (isolate(input$plot_function_%widget_id%) == ""geom_histogram""){
        req(nrow(data$x) > 0)
        
        # Create ggplot2 figure
        code <- glue::glue(""{code}\n\n# Create ggplot2 plot\n"", ""data$x %>%\n    ggplot2::ggplot(ggplot2::aes(x = value_as_number))"")
        
        # Add params
        if (isolate(input$bins_type_%widget_id%) == ""num_of_bins"") code <- paste0(
            code, "" +\n    "",
            glue::glue(""ggplot2::geom_histogram(bins = {isolate(input$num_of_bins_%widget_id%)}, fill = \""{isolate(input$colour_%widget_id%)}\"", color = \""#FFFFFF\"")"")
        )
            
        else if (isolate(input$bins_type_%widget_id%) == ""bin_width"") code <- paste0(
            code, "" +\n    "",
            glue::glue(""ggplot2::geom_histogram(binwidth = {isolate(input$bin_width_%widget_id%)}, fill = \""{isolate(input$colour_%widget_id%)}\"", color = \""#FFFFFF\"")"")
        )
    }
    
    # SCATTER PLOT
    
    if (isolate(input$plot_function_%widget_id%) == ""geom_point""){
        req(nrow(data$x) > 0, nrow(data$y) > 0)
        
        code <- paste0(code, ""\n\n# Prepare data for ggplot2 plot"")
        
        # If data is grouped by person_id
        if (isolate(input$group_data_%widget_id%) & isolate(input$group_by_%widget_id% == ""person_id"")) code <- paste0(
            code, ""\n"",
            ""fig_data <-\n"",
            ""    data$x %>%\n"",
            ""    dplyr::transmute(person_id, variable = \""x\"", value_as_number) %>%\n"",
            ""    dplyr::bind_rows(\n"",
            ""        data$y %>%\n"",
            ""        dplyr::transmute(person_id, variable = \""y\"", value_as_number)\n"",
            ""    ) %>%\n"",
            ""    dplyr::mutate(n = 1:dplyr::n()) %>%\n"",
            ""    tidyr::pivot_wider(names_from = \""variable\"", values_from = \""value_as_number\"") %>%\n"",
            ""    dplyr::select(-n) %>%\n"",
            ""    dplyr::group_by(person_id) %>%\n"",
            ""    dplyr::summarize(x = dplyr::first(na.omit(x)), y = dplyr::first(na.omit(y))) %>%\n"",
            ""    dplyr::ungroup()""
        )
        
        # If data is not grouped or grouped by datetime
        else code <- glue::glue(
            ""{code}\n"",
            ""fig_data <-\n"",
            ""    data$x %>%\n"",
            ""    dplyr::rename(datetime = {paste0(tolower(variable$x$domain_id), ''_datetime'')}) %>%\n"",
            ""    dplyr::transmute(datetime, variable = \""x\"", value_as_number) %>%\n"",
            ""    dplyr::bind_rows(\n"",
            ""        data$y %>%\n"",
            ""        dplyr::rename(datetime = {paste0(tolower(variable$y$domain_id), ''_datetime'')}) %>%\n"",
            ""        dplyr::transmute(datetime, variable = \""y\"", value_as_number)\n"",
            ""    ) %>%\n"",
            ""    dplyr::mutate(n = 1:dplyr::n()) %>%\n"",
            ""    tidyr::pivot_wider(names_from = \""variable\"", values_from = \""value_as_number\"") %>%\n"",
            ""    dplyr::select(-n) %>%\n"",
            ""    dplyr::group_by(datetime) %>%\n"",
            ""    dplyr::summarize(x = dplyr::first(na.omit(x)), y = dplyr::first(na.omit(y))) %>%\n"",
            ""    dplyr::ungroup()""
        )
        
        # Create ggplot2 figure
        code <- paste0(
            code, ""\n\n# Create ggplot2 plot\n"",
            ""fig_data %>%\n"",
            ""    ggplot2::ggplot(ggplot2::aes(x = x, y = y)) +\n"",
            glue::glue(""    ggplot2::geom_point(colour = \""{isolate(input$colour_%widget_id%)}\"")"")
        )
    }
    
    # Add theme & labs
    code <- paste0(
        code, "" +\n    "",
        glue::glue(""ggplot2::{isolate(input$plot_theme_%widget_id%)}() +""), ""\n    "",
        glue::glue(""ggplot2::labs(x = \""{isolate(input$x_label_%widget_id%)}\"", y = \""{isolate(input$y_label_%widget_id%)}\"")"")
    )
    
    # Update shinyAce code editor
    if (create_plot_type == ""generate_code""){
        shinyAce::updateAceEditor(session, ""code_%widget_id%"", value = code)
        
        # Go to ""Code"" tab
        shinyjs::runjs(glue::glue(""$(''#{id}-pivot_%widget_id% button[name=\""{i18np$t(''code'')}\""]'').click();""))
    }
    
    # Final object of ggplot2 figure
    if (create_plot_type == ""show_plot"") output$plot_output_%widget_id% <- renderPlot({
        %req%
        eval(parse(text = code))
    })
})

# Change SwatchColorPicker
observeEvent(input$colour_pal_%widget_id%, {
    %req%

    pal <- RColorBrewer::brewer.pal(n = 8, name = input$colour_pal_%widget_id%)
    pal_tibble <- tibble::tibble(name = pal)
    colorCells <- list()
    for (i in 1:nrow(pal_tibble)) colorCells <- rlist::list.append(colorCells, list(id = pal_tibble[[i, ""name""]], color = pal_tibble[[i, ""name""]]))
    
    # Get saved colour
    value <- pal[1]
    if (length(input$script_choice_%widget_id%) > 0){
        sql <- glue::glue_sql(""SELECT * FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND link_id = {input$script_choice_%widget_id%} AND name = ''colour''"", .con = r$db)
        colour <- DBI::dbGetQuery(m$db, sql)
        if (nrow(colour) > 0) if (colour %>% dplyr::pull(value) %in% pal) value <- colour %>% dplyr::pull(value)   
    }
    
    output$colour_ui_%widget_id% <- renderUI({
        %req%
        shiny.fluent::SwatchColorPicker.shinyInput(ns(""colour_%widget_id%""), colorCells = colorCells, columnCount = length(colorCells), value = value)
    })
})

# Save widget parameters
observeEvent(input$save_%widget_id%, {
    %req%
    
    req(length(input$script_choice_%widget_id%) > 0)

    # Delete old options
    sql <- glue::glue_sql(""DELETE FROM aggregated_widgets_options WHERE widget_id = {%widget_id%} AND link_id = {input$script_choice_%widget_id%}"", .con = m$db)
    DBI::dbSendStatement(m$db, sql) -> query
    DBI::dbClearResult(query)
    
    last_row <- get_last_row(m$db, ""aggregated_widgets_options"")
    
    # Add new options
    new_options <- tibble::tibble(
        id = seq(last_row + 1, last_row + length(inputs)),
        widget_id = %widget_id%, patient_id = NA_integer_, link_id = input$script_choice_%widget_id%,
        category = NA_character_, name = NA_character_, value = NA_character_, value_num = NA_real_,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
    
    new_options_values <- tibble::tibble(name = character(), value = character(), value_num = numeric())
    
    for (input_name in inputs){
        if (input_name %in% spin_buttons || input_name %in% c(""x_variable"", ""y_variable"")){
            value_num <- NA_real_
            if (length(input[[paste0(input_name, ""_%widget_id%"")]]) > 0) value_num <- input[[paste0(input_name, ""_%widget_id%"")]]
            new_options_values <- new_options_values %>% dplyr::bind_rows(tibble::tibble(name = input_name, value = NA_character_, value_num = value_num))
        } 
        else {
            value <- NA_character_
            if (length(input[[paste0(input_name, ""_%widget_id%"")]]) > 0) value <- as.character(input[[paste0(input_name, ""_%widget_id%"")]])
            new_options_values <- new_options_values %>% dplyr::bind_rows(tibble::tibble(name = input_name, value = value, value_num = NA_real_))
        } 
    }
    
    for (col in c(""name"", ""value"", ""value_num"")) new_options[[col]] <- new_options_values[[col]]
    
    DBI::dbAppendTable(m$db, ""aggregated_widgets_options"", new_options)
    
    m$widget_options_%widget_id% <- m$widget_options_%widget_id% %>% dplyr::filter(link_id != input$script_choice_%widget_id%) %>% dplyr::bind_rows(new_options)
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

# Hide parameters div
observeEvent(input$hide_params_%widget_id%, {
    %req%

    if (input$hide_params_%widget_id%){
        shinyjs::hide(""split_layout_right_%widget_id%"")
        shinyjs::delay(100, shinyjs::runjs(glue::glue(""$(''#{id}-split_layout_left_%widget_id%'').css(''width'', ''100%'');"")))
    }
    else {
        shinyjs::runjs(glue::glue(""$(''#{id}-split_layout_left_%widget_id%'').css(''width'', ''50%'');""))
        shinyjs::delay(100, shinyjs::show(""split_layout_right_%widget_id%""))
    }
})

# Plot width
observeEvent(input$plot_width_%widget_id%, {
    %req%
    
    shinyjs::runjs(glue::glue(""$(''#{id}-plot_div_%widget_id%'').css(''width'', ''{isolate(input$plot_width_%widget_id%)}%'');"")) %>% throttle(1000)
})

# Run plot / code at script launch
observeEvent(input$run_plot_at_script_launch_%widget_id%, {
    %req%
    if (input$run_plot_at_script_launch_%widget_id%) shiny.fluent::updateToggle.shinyInput(session, ""run_code_at_script_launch_%widget_id%"", value = FALSE)
})
observeEvent(input$run_code_at_script_launch_%widget_id%, {
    %req%
    if (input$run_code_at_script_launch_%widget_id%) shiny.fluent::updateToggle.shinyInput(session, ""run_plot_at_script_launch_%widget_id%"", value = FALSE)
})

# ------------
# --- Code ---
# ------------

# Generate code
observeEvent(input$generate_code_%widget_id%, {
    %req%
    m$create_plot_type_%widget_id% <- ""generate_code""
    m$create_plot_trigger_%widget_id% <- Sys.time()
})

# Render plot from ""code"" tab

observeEvent(input$run_code_%widget_id%, {
    %req%
    m$run_code_%widget_id% <- input$code_%widget_id%
    m$run_code_trigger_%widget_id% <- Sys.time()
})

observeEvent(m$run_code_trigger_%widget_id%, {
    %req%
    
    # Go to plot tab
    shinyjs::runjs(glue::glue(""$(''#{id}-pivot_%widget_id% button[name=\""{i18np$t(''plot'')}\""]'').click();""))
    
    # Render plot
    output$plot_output_%widget_id% <- renderPlot({
        %req%
        eval(parse(text = m$run_code_%widget_id%))
    })
})

# ---------------
# --- Scripts ---
# ---------------

# Add a new script
observeEvent(input$add_script_%widget_id%, {
    %req%
    
    # Check if name is not empty
    empty_name <- TRUE
    if (length(input$script_name_%widget_id%) > 0) if (input$script_name_%widget_id% != """") empty_name <- FALSE
    if (empty_name) shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = i18n$t(""provide_valid_name""))
    req(!empty_name)
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = NULL)
    
    # Check if name is not already used
    sql <- glue::glue_sql(""SELECT * FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND name = ''script'' AND value = {input$script_name_%widget_id%}"", .con = m$db)
    already_used_name <- DBI::dbGetQuery(m$db, sql) %>% nrow() >= 1
    if (already_used_name) shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = i18n$t(""name_already_used""))
    req(!already_used_name)
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = NULL)
    
    # Add script to database
    
    last_row <- get_last_row(m$db, ""aggregated_widgets_options"")
    sql <- glue::glue_sql(""SELECT COALESCE(MAX(value_num), 0) FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND name = ''script''"", .con = m$db)
    last_id <- DBI::dbGetQuery(m$db, sql) %>% dplyr::pull()
    
    new_options <- tibble::tibble(
        id = last_row + 1, widget_id = %widget_id%, patient_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""script"", value = input$script_name_%widget_id%, value_num = last_id + 1,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""aggregated_widgets_options"", new_options)
    
    # Reset TextField
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", value = """")
    
    # Notify user
    show_message_bar(output, ""script_added"", ""success"", i18n = i18np, ns = ns)
    
    # Add new script to scripts vector
    m$scripts_%widget_id% <- m$scripts_%widget_id% %>% 
        dplyr::bind_rows(tibble::tibble(id = last_id + 1, name = input$script_name_%widget_id%))
    m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = TRUE)
    
    # Update DT & dropdown
    m$reload_dt_%widget_id% <- Sys.time()
})

# Load a script
observeEvent(input$script_choice_%widget_id%, {
    %req%
    
    widget_options <- m$widget_options_%widget_id% %>% dplyr::filter(link_id == input$script_choice_%widget_id%)
    
    run_code_at_script_launch <- FALSE
    run_plot_at_script_launch <- FALSE
    code <- """"
    
    for (input_name in inputs){
        widget_option <- widget_options %>% dplyr::filter(name == input_name)
        
        # Update inputs with saved values
        if (nrow(widget_option) > 0){
            if (input_name %in% dropdowns){
                if (input_name %in% c(""x_variable"", ""y_variable"")) value <- widget_option$value_num else value <- widget_option$value
                shiny.fluent::updateDropdown.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = value)
            }
            if (input_name %in% textfields) shiny.fluent::updateTextField.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value)
            if (input_name %in% spin_buttons) shiny.fluent::updateSpinButton.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value_num)
            if (input_name %in% toggle_inputs) shiny.fluent::updateToggle.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = as.logical(widget_option$value))
            if (input_name %in% colour_inputs) shiny.fluent::updateSwatchColorPicker.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value)
            if (input_name %in% ace_inputs) shinyAce::updateAceEditor(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value)
            
            if (input_name == ""run_code_at_script_launch"") run_code_at_script_launch <- as.logical(widget_option$value)
            if (input_name == ""run_plot_at_script_launch"") run_plot_at_script_launch <- as.logical(widget_option$value)
            if (input_name == ""code"") code <- widget_option$value
        }
        if (nrow(widget_option) == 0){
            if (input_name %in% dropdowns) shiny.fluent::updateDropdown.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% textfields) shiny.fluent::updateTextField.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% spin_buttons) shiny.fluent::updateSpinButton.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% toggle_inputs) shiny.fluent::updateToggle.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% colour_inputs) shiny.fluent::updateSwatchColorPicker.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% ace_inputs) shinyAce::updateAceEditor(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
        }
    }
    
    # Render this plot
    if (run_code_at_script_launch){
        m$run_code_%widget_id% <- code
        m$run_code_trigger_%widget_id% <- Sys.time()
    }
    else if (run_plot_at_script_launch) shinyjs::delay(500, shinyjs::click(""show_%widget_id%""))
    
    # Save that this script is selected
    sql <- glue::glue_sql(""DELETE FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND name = ''selected_script''"", .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    last_row <- get_last_row(m$db, ""aggregated_widgets_options"")
    
    new_options <- tibble::tibble(
        id = last_row + 1, widget_id = %widget_id%, patient_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""selected_script"", value = NA_character_, value_num = input$script_choice_%widget_id%,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""aggregated_widgets_options"", new_options)
})

# Var for delete confirm react
m$delete_open_dialog_%widget_id% <- FALSE

# Update scripts DT & dropdown
observeEvent(m$reload_dt_%widget_id%, {
    %req%
    
    # Reload DT
    
    # Prepare data for the datatable
    m$scripts_datatable_temp_%widget_id% <- 
        m$scripts_%widget_id% %>%
        dplyr::rename(id_temp = id) %>%
        dplyr::mutate(action = as.character(actionButton(""delete_%id%"", """", icon = icon(""trash-alt""), 
            onclick = paste0(""Shiny.setInputValue(''"", id, ""-deleted_pressed_%widget_id%'', this.id, {priority: ''event''})"")))) %>%
        dplyr::mutate(action = stringr::str_replace_all(action, ""%id%"", as.character(id_temp))) %>%
        dplyr::rename(id = id_temp)
    
    # If there is not already a proxy, create datatable
    if (length(m$datatable_proxy_%widget_id%) == 0){
        render_datatable(output = output, ns = ns, i18n = i18n, data = m$scripts_datatable_temp_%widget_id%,
            output_name = ""scripts_management_datatable_%widget_id%"", col_names = c(i18n$t(""id""), i18n$t(""name""), i18n$t(""action"")),
            editable_cols = ""name"", sortable_cols = c(""id"", ""name""), centered_cols = c(""id"", ""action""), column_widths = c(""id"" = ""80px"", ""action"" = ""80px""),
            searchable_cols = ""name"", filter = TRUE, selection = ""multiple"")
        
        # Create a proxy for this datatable
        m$datatable_proxy_%widget_id% <- DT::dataTableProxy(""scripts_management_datatable_%widget_id%"", deferUntilFlush = FALSE)
    }
    if (length(m$datatable_proxy_%widget_id%) > 0) DT::replaceData(m$datatable_proxy_%widget_id%, m$scripts_datatable_temp_%widget_id%, resetPaging = FALSE, rownames = FALSE)
    
    # Update dropdown
    value <- NULL
    if (length(input$script_choice_%widget_id%) > 0) value <- input$script_choice_%widget_id%
    if (length(input$script_choice_%widget_id%) == 0 & nrow(m$scripts_%widget_id%) > 0){
        # Load last selected script
        selected_script <- m$widget_options_%widget_id%  %>% dplyr::filter(name == ""selected_script"")
        if (nrow(selected_script) > 0) value <- selected_script %>% dplyr::pull(value_num)
    }
    
    shiny.fluent::updateDropdown.shinyInput(session, ""script_choice_%widget_id%"", 
        options = convert_tibble_to_list(m$scripts_%widget_id%, key_col = ""id"", text_col = ""name""), value = value)
})

# Updates on scripts DT
observeEvent(input$scripts_management_datatable_%widget_id%_cell_edit, {
    %req%
    
    edit_info <- input$scripts_management_datatable_%widget_id%_cell_edit
    m$scripts_temp_%widget_id% <- DT::editData(m$scripts_temp_%widget_id%, edit_info, rownames = FALSE)
      
    # Store that this row has been modified
    m$scripts_temp_%widget_id%[[edit_info$row, ""modified""]] <- TRUE
})

# Save updates on scripts
observeEvent(input$save_scripts_%widget_id%, {
    %req%
    
    # Check if there are no duplicates in names
    duplicates <- m$scripts_temp_%widget_id% %>% dplyr::mutate_at(""name"", tolower) %>% dplyr::group_by(name) %>% dplyr::summarize(n = dplyr::n()) %>% dplyr::filter(n > 1) %>% nrow() >= 1
    
    if (duplicates) show_message_bar(output, ""scripts_names_duplicates"", ""severeWarning"", i18n = i18np, ns = ns)
    
    req(!duplicates)
    
    req(nrow(m$scripts_temp_%widget_id%) > 0)
    
    # Delete old options
    sql <- glue::glue_sql(""DELETE FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND name = ''script''"", .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    # Add new options
    last_row <- get_last_row(m$db, ""aggregated_widgets_options"")
    
    new_options <- tibble::tibble(
        id = seq(last_row + 1, last_row + nrow(m$scripts_temp_%widget_id%)),
        widget_id = %widget_id%, patient_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""script"", value = m$scripts_temp_%widget_id%$name, value_num = m$scripts_temp_%widget_id%$id,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""aggregated_widgets_options"", new_options)
    
    # Update scripts dropdown
    value <- NULL
    if (length(input$script_choice_%widget_id%) > 0) value <- input$script_choice_%widget_id%
    shiny.fluent::updateDropdown.shinyInput(session, ""script_choice_%widget_id%"", 
        options = convert_tibble_to_list(m$scripts_temp_%widget_id%, key_col = ""id"", text_col = ""name""), value = value)
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

# Delete scripts

### Delete with trash icon
observeEvent(input$deleted_pressed_%widget_id%, {
    %req%
    
    # Reload datatable (to unselect rows)
    DT::replaceData(m$datatable_proxy_%widget_id%, m$scripts_datatable_temp_%widget_id%, resetPaging = FALSE, rownames = FALSE)
    
    m$delete_scripts_%widget_id% <- as.integer(substr(input$deleted_pressed_%widget_id%, nchar(""delete_"") + 1, 100))
    m$delete_open_dialog_%widget_id% <- TRUE
})

### Delete with ""delete selection"" button
observeEvent(input$delete_scripts_%widget_id%, {
    %req%
    
    req(length(input$scripts_management_datatable_%widget_id%_rows_selected) > 0)
    m$delete_scripts_%widget_id% <- m$scripts_%widget_id%[input$scripts_management_datatable_%widget_id%_rows_selected, ] %>% dplyr::pull(id)
    m$delete_open_dialog_%widget_id% <- TRUE
})

### reactOutput for deletion confirmation
output$delete_confirm_%widget_id% <- shiny.fluent::renderReact({
    %req%
    
    shiny.fluent::Dialog(
        hidden = !m$delete_open_dialog_%widget_id%,
        onDismiss = htmlwidgets::JS(paste0(""function() { Shiny.setInputValue(''scripts_hide_dialog_%widget_id%'', Math.random()); }"")),
        dialogContentProps = list(
            type = 0,
            title = i18np$t(""confirm_deletion_title""),
            closeButtonAriaLabel = ""Close"",
            subText = tagList(i18np$t(""confirm_deletion_subtext""), br(), br()
        )
    ),
    modalProps = list(),
    shiny.fluent::DialogFooter(
        shiny.fluent::PrimaryButton.shinyInput(ns(""scripts_delete_confirmed_%widget_id%""), text = i18n$t(""delete"")),
        shiny.fluent::DefaultButton.shinyInput(ns(""scripts_delete_canceled_%widget_id%""), text = i18n$t(""dont_delete""))
        )
    )
})

### Close reactOutput
observeEvent(input$scripts_hide_dialog_%widget_id%, {
    %req%
    m$delete_open_dialog_%widget_id% <- FALSE
})
observeEvent(input$scripts_delete_canceled_%widget_id%, {
    %req%
    m$delete_open_dialog_%widget_id% <- FALSE
})

### Deletion confirmed
observeEvent(input$scripts_delete_confirmed_%widget_id%, {
    %req%
    
    m$delete_open_dialog_%widget_id% <- FALSE
    
    # Get scripts ids
    ids_to_del <- m$delete_scripts_%widget_id%
    
    # Delete scripts in DB
    sql <- glue::glue_sql(paste0(""DELETE FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND ("",
        ""(name = ''script'' AND value_num IN ({ids_to_del*})) OR "",
        ""(link_id IN ({ids_to_del*})))""), .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    # Update m var
    m$scripts_%widget_id% <- m$scripts_%widget_id% %>% dplyr::filter(id %not_in% ids_to_del)
    m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = TRUE)
    
    # Reload DT
    m$reload_dt_%widget_id% <- Sys.time()
    
    # Notify user
    show_message_bar(output, ""script_deleted"", ""severeWarning"", i18n = i18np, ns = ns)
})",1,2023-09-18 11:26:35,0
20,plugin_translations,2,"base,en,fr
plot,Plot,Figure
code,Code,Code
scripts_management,Scripts management,Gérer les scripts
plot_parameters,Plot parameters,Paramètres de la figure
variables,Variables,Variables
plot_choice,Plot choice,Choix de la figure
x_variable,X variable,Axe des X
y_variable,Y variable,Axe des Y
show,Show plot,Afficher la figure
save,Save,Sauvegarder
hide_params,Hide parameters,Masquer les paramètres
x_label,X-axis label,Texte de l''axe des X
y_label,Y-axis label,Texte de l''axe des Y
theme,Theme,Thème
stat,Stat,Stat
bins,Bins,Barres
bin_width,Bin width,Largeur des barres
num_of_bins,Number of bins,Nombre de barres
value,Value,Valeur
palette,Palette,Palette
histogram,Histogram,Histogramme
scatter_plot,Scatter plot,Diagramme de dispersion
none,None,Aucune
group_data,Group data,Grouper les données
group_by,Group by,Grouper par
person,Patient,Patient
duration,Duration,Durée
minutes,Minutes,Minutes
hours,Hours,Heures
days,Days,Jours
summarize_fct,Summarize function,Fonction d''agrégat
min,Min,Minimum
max,Max,Maximum
mean,Mean,Moyenne
unauthorized_access_to_console,You are not authorized to access the console,Vous n''avez pas l''autorisation pour accéder à la console
generate_code,Generate code,Générer le code
script_added,Script added,Script ajouté
confirm_deletion_title,Delete scripts,Supprimer des scripts
confirm_deletion_subtext,Do you want to delete these scripts ?,Confirmer la suppression de ces scripts ?
script_deleted,Script(s) deleted,Script(s) supprimé(s)
plot_width,Plot width (%),Largeur de la figure (%)
run_plot_at_script_launch,Show plot at script launch,Afficher la figure au lancement du script
run_code_at_script_launch,Run code at script launch,Exécuter le code au lancement du script",1,2023-09-18 11:26:35,0
21,vocabulary,4,NA,1,2023-09-18 11:34:30,0
22,vocabulary,5,NA,1,2023-09-18 11:39:57,0
23,vocabulary,6,NA,1,2023-09-18 11:40:01,0
24,vocabulary,7,NA,1,2023-09-18 11:49:30,0
25,vocabulary,8,NA,1,2023-09-18 11:49:51,0
26,plugin_ui,1,"# Get widget options
sql <- glue::glue_sql(""SELECT * FROM aggregated_widgets_options WHERE widget_id = %widget_id%"", .con = r$db)
widget_options <- DBI::dbGetQuery(m$db, sql)
scripts <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
selected_script <- NULL
selected_script_type_choicegroup <- ""r""
selected_script_type <- ""r""
selected_script_code <- """"
selected_script_result <- widget_options %>% dplyr::filter(name == ""selected_script"")
if (nrow(selected_script_result) > 0) if ((selected_script_result %>% dplyr::pull(value_num)) %in% scripts$id){
    selected_script <- selected_script_result %>% dplyr::pull(value_num)
    script_options <- widget_options %>% dplyr::filter(name %in% c(""script_type"", ""script_code"") & link_id == selected_script)
    
    if (nrow(script_options) > 0){
        selected_script_type_choicegroup <- script_options %>% dplyr::filter(name == ""script_type"") %>% dplyr::pull(value)
        
        if (selected_script_type_choicegroup == ""rmarkdown"") selected_script_type <- ""markdown"" else ""r""
        selected_script_code <- script_options %>% dplyr::filter(name == ""script_code"") %>% dplyr::pull(value)
    }
}

# aceEditor div : show editor if user has access to the console
ace_editor_div <- div(br(), shiny.fluent::MessageBar(i18np$t(""unauthorized_access_to_console""), messageBarType = 5), br())
if (length(m$user_accesses) > 0) if (""data_console"" %in% m$user_accesses) ace_editor_div <- div(
    div(
        shinyAce::aceEditor(
            ns(""script_code_%widget_id%""), """", mode = selected_script_type, value = selected_script_code,
                code_hotkeys = list(
                    ""r"", list(
                      run_selection = list(win = ""CTRL-ENTER"", mac = ""CTRL-ENTER|CMD-ENTER""),
                      run_all = list(win = ""CTRL-SHIFT-ENTER"", mac = ""CTRL-SHIFT-ENTER|CMD-SHIFT-ENTER""),
                      save = list(win = ""CTRL-S"", mac = ""CTRL-S|CMD-S"")
                    )
                ),
                autoScrollEditorIntoView = TRUE, minLines = 30, maxLines = 1000
        ), 
    style = ""width: 100%;""),
    shiny.fluent::Stack(
        horizontal = TRUE, tokens = list(childrenGap = 10),
        shiny.fluent::PrimaryButton.shinyInput(ns(""run_code_%widget_id%""), i18n$t(""run_code"")),
        shiny.fluent::DefaultButton.shinyInput(ns(""save_code_%widget_id%""), i18n$t(""save""))
    ), br()
)

tagList(
    shiny.fluent::reactOutput(ns(""delete_confirm_%widget_id%"")),
    shiny.fluent::Pivot(
        id = ns(""pivot_%widget_id%""),
        onLinkClick = htmlwidgets::JS(paste0(""item => Shiny.setInputValue(''"", id, ""-current_tab_%widget_id%'', item.props.id)"")),
        shiny.fluent::PivotItem(id = ""script_%widget_id%"", itemKey = ""script"", headerText = i18np$t(""script"")),
        shiny.fluent::PivotItem(id = ""scripts_management_%widget_id%"", itemKey = ""scripts_management"", headerText = i18np$t(""scripts_management""))
    ),
    conditionalPanel(
        condition = ""input.current_tab_%widget_id% == ''script_%widget_id%'' || input.current_tab_%widget_id% == null"", ns = ns, br(),
        shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
            div(shiny.fluent::Dropdown.shinyInput(ns(""script_choice_%widget_id%""), 
                options = convert_tibble_to_list(scripts, key_col = ""id"", text_col = ""name""), value = selected_script), style = ""width:300px;""),
            div(style = ""width:10px""),
            shiny.fluent::ChoiceGroup.shinyInput(
                ns(""script_type_%widget_id%""), className = ""inline_choicegroup"",
                options = list(
                    list(key = ""r"", text = i18np$t(""r"")),
                    list(key = ""rmarkdown"", text = i18np$t(""rmarkdown"")),
                    list(key = ""plot"", text = i18np$t(""plot""))
                ),
                value = selected_script_type_choicegroup
            )
        ),
        ace_editor_div,
        div(
            id = ns(""r_script_result_div_%widget_id%""),
            verbatimTextOutput(ns(""r_script_result_%widget_id%"")), 
            style = ""width: 99%; border-style: dashed; border-width: 1px; padding: 0px 8px 0px 8px; margin-right: 5px;""
        ),
        shinyjs::hidden(
            div(
                id = ns(""rmarkdown_script_result_div_%widget_id%""),
                uiOutput(ns(""rmarkdown_script_result_%widget_id%""))
            )
        ),
        shinyjs::hidden(
            div(
                id = ns(""plot_script_result_div_%widget_id%""),
                div(id = ns(""plot_div_%widget_id%""), plotOutput(ns(""plot_script_result_%widget_id%"")), style = ""width:50%;""), br(),
                shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 0),
                    div(strong(i18np$t(""plot_width""))),
                    div(shiny.fluent::Slider.shinyInput(ns(""plot_width_%widget_id%""), value = 50, min = 1, max = 100), style = ""width:300px"")
                )
                
            )
        )
    ),
    conditionalPanel(
        condition = ""input.current_tab_%widget_id% == ''scripts_management_%widget_id%''"", ns = ns, br(),
        shiny.fluent::Stack(
            horizontal = TRUE, tokens = list(childrenGap = 10),
            make_textfield(i18n = i18n, ns = ns, label = ""name"", id = ""script_name_%widget_id%"", width = ""300px""),
            div(shiny.fluent::PrimaryButton.shinyInput(ns(""add_script_%widget_id%""), i18n$t(""add"")), style = ""margin-top:38px;"")
        ),
        DT::DTOutput(ns(""scripts_management_datatable_%widget_id%"")),
        shiny.fluent::Stack(
            horizontal = TRUE, tokens = list(childrenGap = 10),
            shiny.fluent::PrimaryButton.shinyInput(ns(""save_scripts_%widget_id%""), i18n$t(""save"")),
            shiny.fluent::DefaultButton.shinyInput(ns(""delete_scripts_%widget_id%""), i18n$t(""delete_selection""))
        )
    )
)",1,2023-09-30 21:42:16,0
27,plugin_server,1,"# Get saved params for this widget
sql <- glue::glue_sql(""SELECT * FROM aggregated_widgets_options WHERE widget_id = %widget_id%"", .con = r$db)
widget_options <- DBI::dbGetQuery(m$db, sql)

m$widget_options_%widget_id% <- widget_options
m$scripts_%widget_id% <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = FALSE)
m$reload_dt_%widget_id% <- Sys.time()

# -------------------
# --- Script code ---
# -------------------

# When script code is executed
observeEvent(input$script_code_%widget_id%_run_selection, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$script_code_%widget_id%_run_selection""))
    if(!shinyAce::is.empty(input$script_code_%widget_id%_run_selection$selection)) m$script_final_code_%widget_id% <- input$script_code_%widget_id%_run_selection$selection
    else m$script_final_code_%widget_id% <- input$script_code_%widget_id%_run_selection$line
    
    m$script_code_trigger_%widget_id% <- Sys.time()
})

observeEvent(input$script_code_%widget_id%_run_all, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$script_code_%widget_id%_run_all""))
    m$script_final_code_%widget_id% <- input$script_code_%widget_id%
    m$script_code_trigger_%widget_id% <- Sys.time()
})

observeEvent(input$run_code_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_code_%widget_id%""))
    m$script_final_code_%widget_id% <- input$script_code_%widget_id%
    m$script_code_trigger_%widget_id% <- Sys.time()
})

observeEvent(m$script_code_trigger_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$script_code_trigger_%widget_id%""))
    
    divs <- c(""r_script_result_div_%widget_id%"", ""rmarkdown_script_result_div_%widget_id%"", ""plot_script_result_div_%widget_id%"")
    
    code <- m$script_final_code_%widget_id%
    
    # R code
    if (input$script_type_%widget_id% == ""r""){
        captured_output <- capture.output(tryCatch(eval(parse(text = code)), error = function(e) print(e), warning = function(w) print(w)))
        
        shinyjs::show(""r_script_result_div_%widget_id%"")
        sapply(c(""rmarkdown_script_result_div_%widget_id%"", ""plot_script_result_div_%widget_id%""), shinyjs::hide)
        
        output$r_script_result_%widget_id% <- renderText({
            %req%
            if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$r_script_result_%widget_id%""))
            paste(captured_output, collapse = ""\n"")
        })
    }
    
    # RMarkdown code
    if (input$script_type_%widget_id% == ""rmarkdown""){
    
        shinyjs::show(""rmarkdown_script_result_div_%widget_id%"")
        sapply(c(""r_script_result_div_%widget_id%"", ""plot_script_result_div_%widget_id%""), shinyjs::hide)
        
        tryCatch({
        
            markdown_settings <- paste0(""```{r setup, include=FALSE}\nknitr::opts_knit$set(root.dir = ''"", 
                m$app_folder, ""/temp_files'')\n"",
                ""knitr::opts_chunk$set(root.dir = ''"", m$app_folder, ""/temp_files'', fig.path = ''"", m$app_folder, ""/temp_files'')\n```\n"")
            
            markdown_file <- paste0(markdown_settings, code)
            
            # Create temp dir
            dir <- paste0(m$app_folder, ""/temp_files"")
            file <- paste0(dir, ""/"", as.character(Sys.time()) %>% stringr::str_replace_all("":"", ""_""), "".Md"")
            
            # Create the markdown file
            knitr::knit(text = markdown_file, output = file, quiet = TRUE)
            
            output$rmarkdown_script_result_%widget_id% <- renderUI({
                if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$rmarkdown_script_result_%widget_id%""))
                div(class = ""markdown"", withMathJax(includeMarkdown(file)))
            })
        }, error = function(e) """")
    }
    
    # Plot code
    if (input$script_type_%widget_id% == ""plot""){
        
        shinyjs::show(""plot_script_result_div_%widget_id%"")
        sapply(c(""r_script_result_div_%widget_id%"", ""rmarkdown_script_result_div_%widget_id%""), shinyjs::hide)
        
        output$plot_script_result_%widget_id% <- renderPlot({
            %req%
            if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$plot_script_result_%widget_id%""))
            eval(parse(text = paste(code, collapse = ""\n"")))
        })
    }
})

# Save updates on current script
observeEvent(input$script_code_%widget_id%_save, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$script_code_%widget_id%_save""))
    m$save_code_trigger_%widget_id% <- Sys.time()
})

observeEvent(input$save_code_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_code_%widget_id%""))
    m$save_code_trigger_%widget_id% <- Sys.time()
})

observeEvent(m$save_code_trigger_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$save_code_trigger_%widget_id%""))
    
    req(input$script_choice_%widget_id%)
    
    # Delete old options
    sql <- glue::glue_sql(""DELETE FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND name IN (''script_code'', ''script_type'') AND link_id = {input$script_choice_%widget_id%}"", .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    # Add new options
    last_row <- get_last_row(m$db, ""aggregated_widgets_options"")
    
    new_options <- tibble::tibble(
        id = seq(last_row + 1, last_row + 2),
        widget_id = %widget_id%, patient_id = NA_integer_, link_id = input$script_choice_%widget_id%,
        category = NA_character_, name = NA_character_, value = NA_character_, value_num = NA_integer_,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    new_options$name <- c(""script_code"", ""script_type"")
    new_options$value <- c(input$script_code_%widget_id%, input$script_type_%widget_id%)
    
    DBI::dbAppendTable(m$db, ""aggregated_widgets_options"", new_options)
    
    sql <- glue::glue_sql(""SELECT * FROM aggregated_widgets_options WHERE widget_id = %widget_id%"", .con = r$db)
    widget_options <- DBI::dbGetQuery(m$db, sql)
    
    m$widget_options_%widget_id% <- widget_options
    m$scripts_%widget_id% <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
    m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = TRUE)
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

# Load a script
observeEvent(input$script_choice_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$script_choice_%widget_id%""))
    
    script_code <- m$widget_options_%widget_id% %>% dplyr::filter(name == ""script_code"" & link_id == input$script_choice_%widget_id%)
    script_type <- m$widget_options_%widget_id% %>% dplyr::filter(name == ""script_type"" & link_id == input$script_choice_%widget_id%)
    
    if (nrow(script_code) == 0) script_code <- """" else script_code <- script_code %>% dplyr::pull(value)
    if (nrow(script_type) == 0) script_type <- ""r"" else script_type <- script_type %>% dplyr::pull(value)
    
    # Load script type
    shinyAce::updateAceEditor(session, ""script_code_%widget_id%"", value = script_code)
    
    # Load script content
    shiny.fluent::updateChoiceGroup.shinyInput(session, ""script_type_%widget_id%"", value = script_type)
    
    # Save that this script is selected
    sql <- glue::glue_sql(""DELETE FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND name = ''selected_script''"", .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    last_row <- get_last_row(m$db, ""aggregated_widgets_options"")
    
    new_options <- tibble::tibble(
        id = last_row + 1, widget_id = %widget_id%, patient_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""selected_script"", value = NA_character_, value_num = input$script_choice_%widget_id%,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""aggregated_widgets_options"", new_options)
})

# Plot width
observeEvent(input$plot_width_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$plot_width_%widget_id%""))
    
    shinyjs::runjs(glue::glue(""$(''#{id}-plot_div_%widget_id%'').css(''width'', ''{isolate(input$plot_width_%widget_id%)}%'');"")) %>% throttle(1000)
})

# ---------------
# --- Scripts ---
# ---------------

# Var for delete confirm react
m$delete_open_dialog_%widget_id% <- FALSE

# Update scripts DT & dropdown
observeEvent(m$reload_dt_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$reload_dt_%widget_id%""))
    
    # Reload DT
    
    # Prepare data for the datatable
    m$scripts_datatable_temp_%widget_id% <- 
        m$scripts_%widget_id% %>%
        dplyr::rename(id_temp = id) %>%
        dplyr::mutate(action = as.character(actionButton(""delete_%id%"", """", icon = icon(""trash-alt""), 
            onclick = paste0(""Shiny.setInputValue(''"", id, ""-deleted_pressed_%widget_id%'', this.id, {priority: ''event''})"")))) %>%
        dplyr::mutate(action = stringr::str_replace_all(action, ""%id%"", as.character(id_temp))) %>%
        dplyr::rename(id = id_temp)
    
    # If there is not already a proxy, create datatable
    if (length(m$datatable_proxy_%widget_id%) == 0){
        render_datatable(output = output, ns = ns, i18n = i18n, data = m$scripts_datatable_temp_%widget_id%,
            output_name = ""scripts_management_datatable_%widget_id%"", col_names = c(i18n$t(""id""), i18n$t(""name""), i18n$t(""action"")),
            editable_cols = ""name"", sortable_cols = c(""id"", ""name""), centered_cols = c(""id"", ""action""), column_widths = c(""id"" = ""80px"", ""action"" = ""80px""),
            searchable_cols = ""name"", filter = TRUE, selection = ""multiple"")
        
        # Create a proxy for this datatable
        m$datatable_proxy_%widget_id% <- DT::dataTableProxy(""scripts_management_datatable_%widget_id%"", deferUntilFlush = FALSE)
    }
    if (length(m$datatable_proxy_%widget_id%) > 0) DT::replaceData(m$datatable_proxy_%widget_id%, m$scripts_datatable_temp_%widget_id%, resetPaging = FALSE, rownames = FALSE)
    
    # Update dropdown
    value <- NULL
    if (length(input$script_choice_%widget_id%) > 0) value <- input$script_choice_%widget_id%
    if (length(input$script_choice_%widget_id%) == 0 & nrow(m$scripts_%widget_id%) > 0){
        # Load last selected script
        selected_script <- m$widget_options_%widget_id%  %>% dplyr::filter(name == ""selected_script"")
        if (nrow(selected_script) > 0) value <- selected_script %>% dplyr::pull(value_num)
    }
    
    shiny.fluent::updateDropdown.shinyInput(session, ""script_choice_%widget_id%"", 
        options = convert_tibble_to_list(m$scripts_%widget_id%, key_col = ""id"", text_col = ""name""), value = value)
})

# Add a new script
observeEvent(input$add_script_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$add_script_%widget_id%""))
    
    # Check if name is not empty
    empty_name <- TRUE
    if (length(input$script_name_%widget_id%) > 0) if (input$script_name_%widget_id% != """") empty_name <- FALSE
    if (empty_name) shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = i18n$t(""provide_valid_name""))
    req(!empty_name)
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = NULL)
    
    # Check if name is not already used
    sql <- glue::glue_sql(""SELECT * FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND name = ''script'' AND value = {input$script_name_%widget_id%}"", .con = m$db)
    already_used_name <- DBI::dbGetQuery(m$db, sql) %>% nrow() >= 1
    if (already_used_name) shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = i18n$t(""name_already_used""))
    req(!already_used_name)
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = NULL)
    
    # Add script to database
    
    last_row <- get_last_row(m$db, ""aggregated_widgets_options"")
    sql <- glue::glue_sql(""SELECT COALESCE(MAX(value_num), 0) FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND name = ''script''"", .con = m$db)
    last_id <- DBI::dbGetQuery(m$db, sql) %>% dplyr::pull()
    
    new_options <- tibble::tibble(
        id = last_row + 1, widget_id = %widget_id%, patient_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""script"", value = input$script_name_%widget_id%, value_num = last_id + 1,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""aggregated_widgets_options"", new_options)
    
    # Reset TextField
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", value = """")
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
    
    # Add new script to scripts vector
    m$scripts_%widget_id% <- m$scripts_%widget_id% %>% 
        dplyr::bind_rows(tibble::tibble(id = last_id + 1, name = input$script_name_%widget_id%))
    m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = TRUE)
    
    # Update DT & dropdown
    m$reload_dt_%widget_id% <- Sys.time()
})

# Updates on scripts DT
observeEvent(input$scripts_management_datatable_%widget_id%_cell_edit, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_management_datatable_%widget_id%_cell_edit""))
    
    edit_info <- input$scripts_management_datatable_%widget_id%_cell_edit
    m$scripts_temp_%widget_id% <- DT::editData(m$scripts_temp_%widget_id%, edit_info, rownames = FALSE)
      
    # Store that this row has been modified
    m$scripts_temp_%widget_id%[[edit_info$row, ""modified""]] <- TRUE
})

# Save updates on scripts
observeEvent(input$save_scripts_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_scripts_%widget_id%""))
    
    # Check if there are no duplicates in names
    duplicates <- m$scripts_temp_%widget_id% %>% dplyr::mutate_at(""name"", tolower) %>% dplyr::group_by(name) %>% dplyr::summarize(n = dplyr::n()) %>% dplyr::filter(n > 1) %>% nrow() >= 1
    
    if (duplicates) show_message_bar(output, ""scripts_names_duplicates"", ""severeWarning"", i18n = i18np, ns = ns)
    
    req(!duplicates)
    
    req(nrow(m$scripts_temp_%widget_id%) > 0)
    
    # Delete old options
    sql <- glue::glue_sql(""DELETE FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND name = ''script''"", .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    # Add new options
    last_row <- get_last_row(m$db, ""aggregated_widgets_options"")
    
    new_options <- tibble::tibble(
        id = seq(last_row + 1, last_row + nrow(m$scripts_temp_%widget_id%)),
        widget_id = %widget_id%, patient_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""script"", value = m$scripts_temp_%widget_id%$name, value_num = m$scripts_temp_%widget_id%$id,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""aggregated_widgets_options"", new_options)
    
    # Update scripts dropdown
    value <- NULL
    if (length(input$script_choice_%widget_id%) > 0) value <- input$script_choice_%widget_id%
    shiny.fluent::updateDropdown.shinyInput(session, ""script_choice_%widget_id%"", 
        options = convert_tibble_to_list(m$scripts_temp_%widget_id%, key_col = ""id"", text_col = ""name""), value = value)
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

# Delete scripts

### Delete with trash icon
observeEvent(input$deleted_pressed_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$deleted_pressed_%widget_id%""))
    
    # Reload datatable (to unselect rows)
    DT::replaceData(m$datatable_proxy_%widget_id%, m$scripts_datatable_temp_%widget_id%, resetPaging = FALSE, rownames = FALSE)
    
    m$delete_scripts_%widget_id% <- as.integer(substr(input$deleted_pressed_%widget_id%, nchar(""delete_"") + 1, 100))
    m$delete_open_dialog_%widget_id% <- TRUE
})

### Delete with ""delete selection"" button
observeEvent(input$delete_scripts_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$delete_scripts_%widget_id%""))
    
    req(length(input$scripts_management_datatable_%widget_id%_rows_selected) > 0)
    m$delete_scripts_%widget_id% <- m$scripts_%widget_id%[input$scripts_management_datatable_%widget_id%_rows_selected, ] %>% dplyr::pull(id)
    m$delete_open_dialog_%widget_id% <- TRUE
})

### reactOutput for deletion confirmation
output$delete_confirm_%widget_id% <- shiny.fluent::renderReact({
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$delete_confirm_%widget_id%""))
    
    shiny.fluent::Dialog(
        hidden = !m$delete_open_dialog_%widget_id%,
        onDismiss = htmlwidgets::JS(paste0(""function() { Shiny.setInputValue(''scripts_hide_dialog_%widget_id%'', Math.random()); }"")),
        dialogContentProps = list(
            type = 0,
            title = i18np$t(""confirm_deletion_title""),
            closeButtonAriaLabel = ""Close"",
            subText = tagList(i18np$t(""confirm_deletion_subtext""), br(), br()
        )
    ),
    modalProps = list(),
    shiny.fluent::DialogFooter(
        shiny.fluent::PrimaryButton.shinyInput(ns(""scripts_delete_confirmed_%widget_id%""), text = i18n$t(""delete"")),
        shiny.fluent::DefaultButton.shinyInput(ns(""scripts_delete_canceled_%widget_id%""), text = i18n$t(""dont_delete""))
        )
    )
})

### Close reactOutput
observeEvent(input$scripts_hide_dialog_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_hide_dialog_%widget_id%""))
    m$delete_open_dialog_%widget_id% <- FALSE
})
observeEvent(input$scripts_delete_canceled_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_delete_canceled_%widget_id%""))
    m$delete_open_dialog_%widget_id% <- FALSE
})

### Deletion confirmed
observeEvent(input$scripts_delete_confirmed_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_delete_confirmed_%widget_id%""))
    
    m$delete_open_dialog_%widget_id% <- FALSE
    
    # Get scripts ids
    ids_to_del <- m$delete_scripts_%widget_id%
    
    # Delete scripts in DB
    sql <- glue::glue_sql(paste0(""DELETE FROM aggregated_widgets_options WHERE widget_id = %widget_id% AND ("",
        ""(name = ''script'' AND value_num IN ({ids_to_del*})) OR "",
        ""(link_id IN ({ids_to_del*})))""), .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    # Update m var
    m$scripts_%widget_id% <- m$scripts_%widget_id% %>% dplyr::filter(id %not_in% ids_to_del)
    m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = TRUE)
    
    # Reload DT
    m$reload_dt_%widget_id% <- Sys.time()
    
    # Notify user
    show_message_bar(output, ""script_deleted"", ""severeWarning"", i18n = i18np, ns = ns)
})

# Change script type
observeEvent(input$script_type_%widget_id%, {
    %req%
    if (debug) print(paste0(Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$script_type_%widget_id%""))
    
    if (input$script_type_%widget_id% == ""rmarkdown"") shinyAce::updateAceEditor(session, ""script_code_%widget_id%"", mode = ""markdown"")
    else shinyAce::updateAceEditor(session, ""script_code_%widget_id%"", mode = ""r"")
})",1,2023-09-30 21:42:16,0
28,plugin_translations,1,"base,en,fr
script,Script,Script
scripts_management,Scripts management,Gestion des scripts
r,R,R
rmarkdown,RMarkdown,RMarkdown
plot,Plot,Figure
confirm_deletion_title,Delete scripts,Supprimer des scripts
confirm_deletion_subtext,Do you want to delete these scripts ?,Confirmer la suppression de ces scripts ?
script_deleted,Script(s) deleted,Script(s) supprimé(s)
scripts_names_duplicates,""There are duplicates in the names, please remove duplicates before saving"",""Certains noms sont utilisés plusieurs fois, retirez-les avant de sauvegarder""
unauthorized_access_to_console,You are not authorized to access the console,Vous n''avez pas l''autorisation pour accéder à la console
plot_width,Plot width (%),Largeur de la figure (%)",1,2023-09-30 21:42:16,0
29,subset,2,"add_persons_to_subset(output = output, m = m, persons = d$person %>% dplyr::select(person_id) %>% dplyr::collect(), subset_id = %subset_id%, i18n = i18n, ns = ns)",1,2023-09-30 21:50:32,0
30,subset,3,,1,2023-09-30 21:54:06,1
31,subset,4,,1,2023-09-30 21:58:29,1
