<?xml version="1.0"?>
<datasets>
  <dataset>
    <app_version>0.2.0</app_version>
    <unique_id>3d3aaab2f83b4acccb9b67bd107db82f66282ae972d7dfbd7baf05c690ed73c0</unique_id>
    <version>0.0.1.9002</version>
    <author>Boris Delange</author>
    <description_en></description_en>
    <name_en>MIMIC-IV demo</name_en>
    <category_en></category_en>
    <description_fr></description_fr>
    <name_fr>MIMIC-IV demo</name_fr>
    <category_fr></category_fr>
    <creation_datetime>2023-10-15 17:08:40</creation_datetime>
    <update_datetime>2023-10-25 13:44:46</update_datetime>
    <code>create_ids &lt;- function(col_name = character(), data = tibble::tibble(), new_cols = list(), col_left_join = character()){
  
  new_cols[[col_name]] &lt;&lt;-
    data %&gt;%
    dplyr::distinct(get(col_name)) %&gt;%
    dplyr::rename_at(1, ~col_name)
  
  if (length(col_left_join) &gt; 0) new_cols[[col_name]] &lt;&lt;- 
      new_cols[[col_name]] %&gt;%
      dplyr::left_join(
        new_cols[[col_left_join]] %&gt;%
          dplyr::rename_at(1, ~col_name) %&gt;%
          dplyr::rename_at(2, ~paste0("new_", col_name)),
        by = col_name
      )
  
  else new_cols[[col_name]] &lt;&lt;- 
      new_cols[[col_name]] %&gt;% 
      dplyr::mutate(!!paste0("new_", col_name) := 1:dplyr::n())
}

join_new_ids &lt;- function(col_name = character(), data = tibble::tibble()){
  
  data &lt;&lt;-
    data %&gt;%
    dplyr::left_join(new_cols[[col_name]], by = col_name) %&gt;%
    dplyr::relocate(!!paste0("new_", col_name), .before = !!col_name) %&gt;%
    dplyr::select(-!!col_name) %&gt;%
    dplyr::rename_at(paste0("new_", col_name), ~col_name)
}

cols_left_join &lt;- c(
  "preceding_visit_occurrence_id" = "visit_occurrence_id",
  "preceding_visit_detail_id" = "visit_detail_id"
)

new_cols &lt;- list()
data &lt;- tibble::tibble()

prefix &lt;- "https://www.physionet.org/files/mimic-iv-demo-omop/0.9/1_omop_data_csv/"

tables &lt;- tibble::tribble(
  ~table_name, ~col_types, ~ids_to_join, ~ids_to_create, 
  "person", "niiiiTiiiiiccicici", "person_id", "person_id",
  "observation_period", "nnDDi", 
  c("observation_period_id", "person_id"),
  c("observation_period_id"),
  "care_site", "nciicc", 
  c("care_site_id"), 
  c("care_site_id"),
  "visit_occurrence", "nniDTDTiiiciicicn", 
  c("visit_occurrence_id", "person_id", "preceding_visit_occurrence_id"), 
  c("visit_occurrence_id", "preceding_visit_occurrence_id"),
  "visit_detail", "nniDTDTiiniinciccin",
  c("visit_detail_id", "person_id", "care_site_id", "preceding_visit_detail_id", "visit_occurrence_id"),
  c("visit_detail_id", "preceding_visit_detail_id"),
  "condition_occurrence", "nniDTDTicinncici",
  c("condition_occurrence_id", "person_id", "visit_occurrence_id", "visit_detail_id"),
  c("condition_occurrence_id"),
  "drug_exposure", "nniDTDTDicinicicinicicc",
  c("drug_exposure_id", "person_id", "visit_occurrence_id"),
  c("drug_exposure_id"),
  "procedure_occurrence", "nniDTiiiinicic",
  c("procedure_occurrence_id", "person_id", "visit_occurrence_id"),
  c("procedure_occurrence_id"),
  "measurement", "nniDTciiniinninncicc",
  c("measurement_id", "person_id", "visit_occurrence_id", "visit_detail_id"),
  c("measurement_id"),
  "observation", "nniDTinciiiinicicc",
  c("observation_id", "person_id", "visit_occurrence_id"),
  c("observation_id"),
  "death", "nDTiici",
  c("person_id"),
  character(),
  "specimen", "nniiDTniiiccccc",
  c("specimen_id", "person_id"),
  c("specimen_id"),
  "location", "iccccccc",
  character(),
  character(),
  "drug_era", "nniDDii",
  c("drug_era_id", "person_id"),
  c("drug_era_id"),
  "dose_era", "nniinDD",
  c("dose_era_id", "person_id"),
  c("dose_era_id"),
  "condition_era", "nniDDi",
  c("condition_era_id", "person_id"),
  c("condition_era_id")
)

# Have all tables already been saved as csv ?
all_tables_saved_as_csv &lt;- all(paste0(tables$table_name, ".csv") %in% list.files(paste0(r$app_folder, "/datasets/", %dataset_id%)))

for (i in 1:nrow(tables)){
  table &lt;- tables[i, ]
  if (i != 1) cat("\n\n")
  cat(paste0(toupper(table$table_name), "\n\n"))
  
  get_data &lt;- function(){
    data &lt;&lt;- vroom::vroom(paste0(prefix, table$table_name, ".csv"), col_types = table$col_types, progress = FALSE)
    
    if (table$table_name == "visit_detail") data &lt;&lt;- data %&gt;%
        dplyr::relocate(visit_detail_source_value, visit_detail_source_concept_id, admitting_source_value, admitting_source_concept_id,
          discharge_to_source_value, discharge_to_concept_id, preceding_visit_detail_id, visit_detail_parent_id, visit_occurrence_id, .after = "care_site_id")
    if (table$table_name == "condition_occurrence") data &lt;&lt;- data %&gt;%
        dplyr::relocate(condition_status_concept_id, .after = "condition_type_concept_id")
    
    ids_to_join &lt;- table$ids_to_join %&gt;% unlist()
    ids_to_create &lt;- table$ids_to_create %&gt;% unlist()
    
    if (length(ids_to_join) &gt; 0){
      for (j in 1:length(ids_to_join)){
        id_to_join &lt;- ids_to_join[j]
        
        if (id_to_join %in% ids_to_create){
          col_left_join &lt;- character()
          if (id_to_join %in% names(cols_left_join)) col_left_join &lt;- cols_left_join[id_to_join]
          
          create_ids(col_name = id_to_join, data = data, new_cols = new_cols, col_left_join = col_left_join)
        }
        
        join_new_ids(col_name = id_to_join, data = data)
      }
    }
    
    data
  }
  
  if (table$table_name %in% c("person", "care_site", "visit_occurrence", "visit_detail") &amp; !all_tables_saved_as_csv) get_data()
  
  import_dataset(output = output, ns = ns, i18n = i18n, r = r, d = d, dataset_id = %dataset_id%, data = get_data(), 
    type = table$table_name, omop_version = %omop_version%, read_with = "vroom", save_as = "csv", rewrite = FALSE)
}</code>
    <omop_version>5.3</omop_version>
    <images></images>
  </dataset>
  <dataset>
    <app_version>0.2.0</app_version>
    <unique_id>54c13d66961036f9d681b0f4b2d06174049dd0a4dc44af260c34a10f4e71d2db</unique_id>
    <version>0.0.1.9002</version>
    <author>Boris Delange</author>
    <description_en></description_en>
    <name_en>MIMIC-III</name_en>
    <category_en></category_en>
    <description_fr></description_fr>
    <name_fr>MIMIC-III</name_fr>
    <category_fr></category_fr>
    <creation_datetime>2023-10-16 09:11:07</creation_datetime>
    <update_datetime>2023-10-16 20:31:30</update_datetime>
    <code># BigQuery authentification
# bigrquery::bq_auth()

# Get BigQuery project ID
bd_config &lt;- vroom::vroom("%dataset_folder%/bq_config.csv", col_types = "cc", progress = FALSE)

# VISIT_OCCURRENCE
cat("&lt;strong&gt;VISIT_OCCURRENCE&lt;/strong&gt;\n\n")

visit_occurrence &lt;- function(){
    sql &lt;- paste0(
    "SELECT ",
        "HADM_ID AS visit_occurrence_id,",
        "SUBJECT_ID AS person_id,",
        "0 AS visit_concept_id,",
        "CAST(ADMITTIME AS DATE) AS visit_start_date,",
        "ADMITTIME AS visit_start_datetime,",
        "CAST(DISCHTIME AS DATE) AS visit_end_date,",
        "DISCHTIME AS visit_end_datetime,",
        "0 AS visit_type_concept_id,",
        "NULL AS provider_id,",
        "NULL AS care_site_id,",
        "ADMISSION_TYPE AS visit_source_value,",
        "HADM_ID AS visit_source_concept_id,",
        "0 AS admitted_from_concept_id,",
        "ADMISSION_LOCATION AS admitted_from_source_value,",
        "0 AS discharge_to_concept_id,",
        "DISCHARGE_LOCATION AS discharge_to_source_value,",
        "NULL AS preceding_visit_occurrence_id ",
        "FROM physionet-data.mimiciii_clinical.admissions ",
        "ORDER BY ADMITTIME ",
        "LIMIT 5000"
    )

    query &lt;- bigrquery::bq_project_query(bd_config %&gt;% dplyr::filter(key == "bq_project_id") %&gt;% dplyr::pull(value), sql)
    bigrquery::bq_table_download(query, quiet = TRUE)
}

import_dataset(output = output, ns = ns, i18n = i18n, r = r, d = d, dataset_id = %dataset_id%, data = visit_occurrence(),
    type = "visit_occurrence", omop_version = %omop_version%, read_with = "vroom", save_as = "csv", rewrite = FALSE)


# PERSON
cat("\n\n&lt;strong&gt;PERSON&lt;/strong&gt;\n\n")

person &lt;- function(){
    sql &lt;- glue::glue(paste0(
        "SELECT ",
        "SUBJECT_ID AS person_id,",
        "CASE WHEN GENDER = 'F' THEN 8532 WHEN GENDER = 'M' THEN 8507 ELSE NULL END AS gender_concept_id,",
        "EXTRACT(YEAR FROM DOB) AS year_of_birth,",
        "EXTRACT(MONTH FROM DOB) AS month_of_birth,",
        "EXTRACT(DAY FROM DOB) AS day_of_birth,",
        "DOB AS birth_datetime,",
        "DOD AS death_datetime, ",
        "NULL AS race_concept_id,",
        "NULL AS ethnicity_concept_id,",
        "NULL AS location_id,",
        "NULL AS provider_id,",
        "NULL AS care_site_id,",
        "SUBJECT_ID AS person_source_value,",
        "GENDER AS gender_source_value,",
        "NULL AS gender_source_concept_id,",
        "NULL AS race_source_value,",
        "NULL AS race_source_concept_id,",
        "NULL AS ethnicity_source_value,",
        "NULL AS ethnicity_source_concept_id ",
        "FROM physionet-data.mimiciii_clinical.patients ",
        "WHERE SUBJECT_ID IN ({glue::glue_collapse(visit_occurrence() %&gt;% dplyr::pull(person_id), sep = ', ')})"
    ))

    query &lt;- bigrquery::bq_project_query(bd_config %&gt;% dplyr::filter(key == "bq_project_id") %&gt;% dplyr::pull(value), sql)
    bigrquery::bq_table_download(query, quiet = TRUE) %&gt;%
        dplyr::mutate_at(c("person_id", "gender_concept_id", "year_of_birth", "month_of_birth", "day_of_birth", "race_concept_id", "ethnicity_concept_id",
            "location_id", "provider_id", "care_site_id", "gender_source_concept_id", "race_source_concept_id", "ethnicity_source_concept_id"), as.integer) %&gt;%
        dplyr::mutate_at(c("person_source_value", "gender_source_value", "race_source_value", "ethnicity_source_value"), as.character)
}

import_dataset(output = output, ns = ns, i18n = i18n, r = r, d = d, dataset_id = %dataset_id%, data = person(),
    type = "person", omop_version = %omop_version%, read_with = "vroom", save_as = "csv", rewrite = FALSE)

# VISIT_DETAIL
cat("\n\n&lt;strong&gt;VISIT_DETAIL&lt;/strong&gt;\n\n")

visit_detail &lt;- function(){
    sql &lt;- glue::glue(paste0(
        "SELECT ",
        "ICUSTAY_ID AS visit_detail_id,",
        "SUBJECT_ID AS person_id,",
        "0 AS visit_detail_concept_id,",
        "CAST(INTIME AS DATE) AS visit_detail_start_date,",
        "INTIME AS visit_detail_start_datetime,",
        "CAST(OUTTIME AS DATE) AS visit_detail_end_date,",
        "OUTTIME AS visit_detail_end_datetime,",
        "0 AS visit_detail_type_concept_id,",
        "NULL AS provider_id,",
        "NULL AS care_site_id,",
        "NULL AS visit_detail_source_value,",
        "NULL AS visit_detail_source_concept_id,",
        "NULL AS admitted_from_concept_id,",
        "NULL AS admitted_from_source_value,",
        "NULL AS discharge_to_source_value,",
        "NULL AS discharge_to_concept_id,",
        "NULL AS preceding_visit_detail_id,",
        "NULL AS visit_detail_parent_id,",
        "HADM_ID AS visit_occurrence_id, ",
        "CASE ",
            "WHEN FIRST_CAREUNIT = 'CCU' THEN 'Coronary care unit' ",
            "WHEN FIRST_CAREUNIT = 'CSRU' THEN 'Cardiac surgery recovery unit' ",
            "WHEN FIRST_CAREUNIT = 'MICU' THEN 'Medical intensive care unit' ",
            "WHEN FIRST_CAREUNIT = 'NICU' THEN 'Neonatal intensive care unit' ",
            "WHEN FIRST_CAREUNIT = 'NWARD' THEN 'Neonatal ward' ",
            "WHEN FIRST_CAREUNIT = 'SICU' THEN 'Surgical intensive care unit' ",
            "WHEN FIRST_CAREUNIT = 'TSICU' THEN 'Trauma/surgical intensive care unit' ",
        "END AS first_careunit ",
        "FROM physionet-data.mimiciii_clinical.icustays ",
        "WHERE HADM_ID IN ({glue::glue_collapse(visit_occurrence() %&gt;% dplyr::pull(visit_occurrence_id), sep = ', ')})"
    ))

    query &lt;- bigrquery::bq_project_query(bd_config %&gt;% dplyr::filter(key == "bq_project_id") %&gt;% dplyr::pull(value), sql)
    data &lt;- bigrquery::bq_table_download(query, quiet = TRUE) %&gt;%
        dplyr::mutate_at(c("visit_detail_id", "person_id", "visit_detail_concept_id", "visit_detail_type_concept_id", "provider_id", "care_site_id",
            "visit_detail_source_concept_id", "admitted_from_concept_id", "discharge_to_concept_id", "visit_detail_parent_id", "visit_occurrence_id"), as.integer) %&gt;%
        dplyr::mutate_at(c("visit_detail_source_value", "admitted_from_source_value", "discharge_to_source_value"), as.character)

    # Get visit_detail concept_ids
    sql &lt;- glue::glue_sql(paste0(
        "SELECT concept_id AS visit_detail_concept_id, concept_name AS first_careunit FROM concept ",
        "WHERE vocabulary_id = 'MIMIC-III' AND domain_id = 'Visit'"), .con = m$db)
    concept &lt;- DBI::dbGetQuery(m$db, sql)

    data &lt;- data %&gt;%
        dplyr::select(-visit_detail_concept_id) %&gt;%
        dplyr::left_join(concept, by = "first_careunit") %&gt;%
        dplyr::select(-first_careunit) %&gt;%
        dplyr::relocate(visit_detail_concept_id, .after = "person_id")

    data
}

import_dataset(output = output, ns = ns, i18n = i18n, r = r, d = d, dataset_id = %dataset_id%, data = visit_detail(),
    type = "visit_detail", omop_version = %omop_version%, read_with = "vroom", save_as = "csv", rewrite = FALSE)

# NOTE
cat("\n\n&lt;strong&gt;NOTE&lt;/strong&gt;\n\n")

note &lt;- function(){
    sql &lt;- glue::glue(paste0(
        "SELECT ",
        "ROW_ID AS note_id,",
        "SUBJECT_ID AS person_id,",
        "NULL AS note_event_id,",
        "NULL AS note_event_field_concept_id,",
        "CAST(CHARTDATE AS DATE) AS note_date,",
        "CAST(CONCAT(CAST(CHARTDATE AS DATE), ' 00:00:00') AS DATETIME) AS note_datetime,",
        "NULL AS note_type_concept_id,",
        "NULL AS note_class_concept_id,",
        "CONCAT(CATEGORY, ' - ', DESCRIPTION) AS note_title,",
        "TEXT AS note_text,",
        "NULL AS encoding_concept_id,",
        "NULL AS language_concept_id,",
        "NULL AS provider_id,",
        "HADM_ID AS visit_occurrence_id,",
        "NULL AS visit_detail_id,",
        "NULL AS note_source_value ",
        "FROM physionet-data.mimiciii_notes.noteevents ",
        "WHERE HADM_ID IN ({glue::glue_collapse(visit_occurrence() %&gt;% dplyr::pull(visit_occurrence_id), sep = ', ')})"
    ))

    query &lt;- bigrquery::bq_project_query(bd_config %&gt;% dplyr::filter(key == "bq_project_id") %&gt;% dplyr::pull(value), sql)
    data &lt;- bigrquery::bq_table_download(query, quiet = TRUE) %&gt;%
        dplyr::mutate_at(c("note_id", "note_event_field_concept_id", "note_type_concept_id", "note_class_concept_id", 
            "encoding_concept_id", "language_concept_id", "provider_id", "visit_occurrence_id", "visit_detail_id"), as.integer) %&gt;%
        dplyr::mutate_at(c("note_title", "note_text", "note_source_value"), as.character)
}

import_dataset(output = output, ns = ns, i18n = i18n, r = r, d = d, dataset_id = %dataset_id%, data = note(),
    type = "note", omop_version = %omop_version%, read_with = "duckdb", save_as = "parquet", rewrite = FALSE)

# DEVICE_EXPOSURE
# cat("\n\n&lt;strong&gt;DEVICE_EXPOSURE&lt;/strong&gt;\n\n")
# 
# device_exposure &lt;- function(){
#     # Get concept for mechanical ventilator
#     concept_id &lt;- 0L
#     sql &lt;- glue::glue_sql(paste0(
#         "SELECT concept_id FROM concept WHERE vocabulary_id = 'MIMIC-III' AND concept_name = 'Mechanical ventilator'"), .con = m$db)
#     concept &lt;- DBI::dbGetQuery(m$db, sql)
#     if (nrow(concept) &gt; 0) concept_id &lt;- concept %&gt;% dplyr::pull(concept_id)
# 
#     sql &lt;- glue::glue(paste0(
#         "SELECT ",
#         "ROW_NUMBER() OVER() AS device_exposure_id,",
#         "icu.SUBJECT_ID AS person_id,",
#         "{concept_id} AS device_concept_id,",
#         "CAST(starttime AS DATE) AS device_exposure_start_date,",
#         "starttime AS device_exposure_start_datetime,",
#         "CAST(endtime AS DATE) AS device_exposure_end_date,",
#         "endtime AS device_exposure_end_datetime,",
#         "0 AS device_type_concept_id,",
#         "NULL AS unique_device_id,",
#         "NULL AS quantity,",
#         "NULL AS provider_id,",
#         "icu.HADM_ID AS visit_occurrence_id,",
#         "vd.icustay_id AS visit_detail_id,",
#         "NULL AS device_source_value,",
#         "NULL AS device_source_concept_id ",
#         "FROM physionet-data.mimiciii_derived.ventilation_durations vd ",
#         "LEFT JOIN physionet-data.mimiciii_clinical.icustays icu ON vd.icustay_id = icu.icustay_id ",
#         "WHERE vd.icustay_id IN ({glue::glue_collapse(visit_detail() %&gt;% dplyr::pull(visit_detail_id), sep = ', ')})"
#     ))
# 
#     query &lt;- bigrquery::bq_project_query(bd_config %&gt;% dplyr::filter(key == "bq_project_id") %&gt;% dplyr::pull(value), sql)
#     data &lt;- bigrquery::bq_table_download(query, quiet = TRUE) %&gt;%
#         dplyr::mutate_at(c("device_exposure_id", "person_id", "device_concept_id", "device_type_concept_id", "quantity", "provider_id",
#             "visit_occurrence_id", "visit_detail_id", "device_source_concept_id"), as.integer) %&gt;%
#         dplyr::mutate_at(c("unique_device_id", "device_source_value"), as.character)
# 
#     data
# }
# 
# import_dataset(output = output, ns = ns, i18n = i18n, r = r, d = d, dataset_id = %dataset_id%, data = device_exposure(),
#     type = "device_exposure", omop_version = %omop_version%, read_with = "duckdb", save_as = "parquet", rewrite = FALSE)</code>
    <omop_version>6.0</omop_version>
    <images></images>
  </dataset>
</datasets>
