id,category,link_id,code,creator_id,datetime,deleted
1,plugin,16,"# Server - Code

# Init code var
m$code_%widget_id% <- """"

# Prevent a bug with scroll into ace editor
shinyjs::delay(300, shinyjs::runjs(""var event = new Event('resize'); window.dispatchEvent(event);""))

# Comment code
observeEvent(input$code_%widget_id%_comment, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_comment""))

    tryCatch({
        lines <- strsplit(input$code_%widget_id%, ""\\n"")[[1]]
        req(length(lines) > 0)
        
        start_row <- input$code_%widget_id%_comment$range$start$row + 1
        end_row <- input$code_%widget_id%_comment$range$end$row + 1
        
        for (i in start_row:end_row) if (startsWith(lines[i], ""# "")) lines[i] <- substr(lines[i], 3, nchar(lines[i])) else lines[i] <- paste0(""# "", lines[i])
        
        shinyAce::updateAceEditor(session, ""code_%widget_id%"", value = paste0(lines, collapse = ""\\n""))
        
        shinyjs::runjs(sprintf(""
            var editor = ace.edit('%s-rode');
            editor.moveCursorTo(%d, %d);
            editor.focus();
        "", id, input$code_%widget_id%_comment$range$end$row, input$code_%widget_id%_comment$range$end$column))
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Run all code with shortcut
observeEvent(input$code_%widget_id%_run_all, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_run_all""))

    m$code_%widget_id% <- input$code_%widget_id%
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
})

# Run code when button is clicked
observeEvent(input$display_figure_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$display_figure""))
    
    m$code_%widget_id% <- input$code_%widget_id%
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
})

# Run code at patient update
observeEvent(m$selected_person, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$selected_person""))
    
    if (isTRUE(input$run_code_on_data_update_%widget_id%) && length(input$data_source_%widget_id%) > 0 && input$data_source_%widget_id% == ""person""){
        
        tryCatch({
        
            # Reset synchronized datetimes
            m$datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactive(m$datetimes_timeline_%tab_id%()) %>% debounce(500)
            
            # Run code
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
            
         }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    }
})

# Run code at visit_detail update
observeEvent(m$selected_visit_detail, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$selected_visit_detail""))
    
    if (isTRUE(input$run_code_on_data_update_%widget_id%) && length(input$data_source_%widget_id%) > 0 && input$data_source_%widget_id% == ""visit_detail""){
        
        tryCatch({
        
            # Reset synchronized datetimes
            m$datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactive(m$datetimes_timeline_%tab_id%()) %>% debounce(500)
            
            # Run code
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
            
         }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    }
})

# Run code
observeEvent(input$run_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_code""))
    
    tryCatch({
        
        data_source <- ""visit_detail""
        if (length(input$data_source_%widget_id%) > 0) data_source <- input$data_source_%widget_id%
        
        if ((data_source == ""person"" & is.na(m$selected_person)) | (data_source == ""visit_detail"" & is.na(m$selected_visit_detail))){
            
            if (data_source == ""person"" & is.na(m$selected_person)) output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""select_patient""), messageBarType = 5), style = ""display: inline-block;""))
            else if (data_source == ""visit_detail"" & is.na(m$selected_visit_detail)) output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""select_stay""), messageBarType = 5), style = ""display: inline-block;""))
            
            shinyjs::hide(""dygraph_%widget_id%"")
            shinyjs::show(""error_message_div_%widget_id%"")
            
        } else {
        
            data <- d[[paste0(""data_"", data_source)]]$measurement
            
            concept_ids <- input$concepts_%widget_id%
            
            if (data %>% dplyr::count() %>% dplyr::pull() > 0) data <- data %>% dplyr::filter(measurement_concept_id %in% concept_ids)
                
            features <- list()
            features_names <- c()
            
            if (data_source == ""person"") {
                data_datetimes_range <- 
                    d$data_person$visit_occurrence %>%
                    dplyr::summarize(
                        min_visit_start_datetime = min(visit_start_datetime, na.rm = TRUE),
                        max_visit_end_datetime = max(visit_end_datetime, na.rm = TRUE)
                    ) %>%
                    dplyr::collect()
            }
            else if (data_source == ""visit_detail"") {
                selected_visit_detail <- m$selected_visit_detail
                
                data_datetimes_range <- 
                    d$data_person$visit_detail %>%
                    dplyr::filter(visit_detail_id == selected_visit_detail) %>%
                    dplyr::summarize(
                        min_visit_start_datetime = min(visit_detail_start_datetime, na.rm = TRUE),
                        max_visit_end_datetime = max(visit_detail_end_datetime, na.rm = TRUE)
                    ) %>%
                    dplyr::collect()
            }
            
            data_datetimes_range <- c(data_datetimes_range$min_visit_start_datetime, data_datetimes_range$max_visit_end_datetime)
            m$data_datetimes_range_%widget_id% <- data_datetimes_range
            
            if (isTRUE(input$synchronize_timelines_%widget_id%) && length(m$debounced_datetimes_timeline_%tab_id%()) > 0) datetimes <- m$debounced_datetimes_timeline_%tab_id%()
            else datetimes <- data_datetimes_range
            
            m$datetimes_%widget_id% <- datetimes
            
            for (concept_id in concept_ids){
            
                concept <- selected_concepts %>% dplyr::filter(concept_id == !!concept_id)
            
                if (concept$domain_id == ""Measurement""){
                    
                    data <- d[[tolower(concept$domain_id)]]
                    
                    if (data %>% dplyr::count() %>% dplyr::pull() > 0){
                        data <-
                            data %>%
                            dplyr::filter(
                                person_id == m$selected_person,
                                !!rlang::sym(paste0(tolower(concept$domain_id), ""_concept_id"")) == concept_id
                            ) %>%
                            dplyr::rename(datetime = !!rlang::sym(paste0(tolower(concept$domain_id), ""_datetime""))) %>%
                            dplyr::select(datetime, value_as_number) %>%
                            dplyr::collect()
                        
                        if (nrow(data) > 0){
                            fake_data <- tibble::tibble(
                                datetime = c(data_datetimes_range[[1]] - lubridate::seconds(1), data_datetimes_range[[2]] + lubridate::seconds(1)),
                                value_as_number = c(NA, NA)
                            )
                                
                            data <- dplyr::bind_rows(fake_data, data)
                            data <- data %>% dplyr::arrange(datetime)
                        
                            features[[paste0(""concept_"", concept_id)]] <- xts::xts(data$value_as_number, data$datetime)
                            features_names <- c(features_names, concept$concept_name)
                        }
                    }
                }
            }
            
            if (length(features) == 0){
                shinyjs::show(""error_message_div_%widget_id%"")
                shinyjs::hide(""dygraph_%widget_id%"")
                output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""no_data_to_display""), messageBarType = 5), style = ""display: inline-block;""))
            }
            
            if (length(features) > 0){
                combined_features <- do.call(merge, features)
                colnames(combined_features) <- features_names
                
                output$dygraph_%widget_id% <- dygraphs::renderDygraph({
                
                    if (isTRUE(input$synchronize_timelines_%widget_id%)) fig <- dygraphs::dygraph(combined_features, group = ""tab_%tab_id%"")
                    else fig <- dygraphs::dygraph(combined_features)
                
                    fig <-
                        fig %>%
                        dygraphs::dyOptions(drawPoints = TRUE, pointSize = 2, useDataTimezone = TRUE) %>%
                        dygraphs::dyRangeSelector(dateWindow = c(
                            format(datetimes[[1]], ""%Y-%m-%d %H:%M:%S""),
                            format(datetimes[[2]], ""%Y-%m-%d %H:%M:%S"")
                        )) %>%
                        dygraphs::dyAxis(""y"", valueRange = c(0, NA))
                })
                
                shinyjs::hide(""error_message_div_%widget_id%"")
                shinyjs::show(""dygraph_%widget_id%"")
            }
        }
        
        # Go to figure tab
        if (length(input$figure_and_settings_side_by_side_%widget_id%) > 0) if (!input$figure_and_settings_side_by_side_%widget_id%) shinyjs::click(""figure_button_%widget_id%"")
        
    }, error = function(e){
        show_message_bar(output, ""error_displaying_figure"", ""severeWarning"", i18n = i18np, ns = ns)
        cat(paste0(""\\n"", now(), "" - widget %widget_id% - input$run_code - error = "", toString(e)))
    })
})

# Save code with shortcut
observeEvent(input$code_%widget_id%_save, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_save""))
    
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_params_and_code_%widget_id%', Math.random());""))
})",1,2024-10-20 22:37:19,0
2,plugin,17,"# Server - Figure settings

# Load figure settings

observeEvent(input$load_figure_settings_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$load_figure_settings""))
    
    # Update figure settings UI
    
    link_id <- input$settings_file_%widget_id%
    sql <- glue::glue_sql(""SELECT name, value, value_num FROM widgets_options WHERE widget_id = %widget_id% AND category = 'figure_settings' AND link_id = {link_id}"", .con = m$db)
    figure_settings <- DBI::dbGetQuery(m$db, sql)
    
    if (nrow(figure_settings) > 0){
        sapply(figure_settings$name, function(name){
        
            value <- figure_settings %>% dplyr::filter(name == !!name) %>% dplyr::pull(value)
            value_num <- figure_settings %>% dplyr::filter(name == !!name) %>% dplyr::pull(value_num)
            
            if (name == ""data_source"") shiny.fluent::updateDropdown.shinyInput(session, paste0(name, ""_%widget_id%""), value = value)
            else if (name == ""concepts""){
                value <- as.numeric(unlist(strsplit(value, "", "")))
                shiny.fluent::updateDropdown.shinyInput(session, paste0(name, ""_%widget_id%""), value = value)
            }
            else if (name == ""synchronize_timelines""){
                value <- as.logical(value_num)
                shiny.fluent::updateToggle.shinyInput(session, paste0(name, ""_%widget_id%""), value = value)
            }
        })
    }
    
    # Run code if toggle is activated
    if (length(input$run_code_at_settings_file_load_%widget_id%) > 0) if (input$run_code_at_settings_file_load_%widget_id%) shinyjs::delay(500, 
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-display_figure_%widget_id%', Math.random());"")))
})

# Save current settings

observeEvent(input$save_params_and_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_params_and_code""))
    
    tryCatch({
    
        # If no settings file is selected, go to settings files management page
        if (length(input$settings_file_%widget_id%) == 0) shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-show_settings_files_tab_%widget_id%', Math.random());""))
        
        if (length(input$settings_file_%widget_id%) > 0){
            
            link_id <- input$settings_file_%widget_id%
        
            # Delete old settings
            sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND category = 'figure_settings' AND link_id = {link_id}"", .con = m$db))
            
            # Add new settings in db
            new_data <- tibble::tribble(
                ~name, ~value, ~value_num,
                ""data_source"", input$data_source_%widget_id%, NA_real_,
                ""concepts"", input$concepts_%widget_id% %>% toString(), NA_real_,
                ""synchronize_timelines"", NA_character_, as.integer(input$synchronize_timelines_%widget_id%)
            )
            
            new_data <-
                new_data %>%
                dplyr::transmute(
                    id = get_last_row(m$db, ""widgets_options"") + 1:nrow(new_data), widget_id = %widget_id%, person_id = NA_integer_, link_id = link_id,
                    category = ""figure_settings"", name, value, value_num, creator_id = m$user_id, datetime = now(), deleted = FALSE
                )
            
            DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
            
            # Notify user
            show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Synchronize timelines

# Create a reactiveVal with timeline datetimes
if (length(m$datetimes_timeline_%tab_id%) == 0){
    m$datetimes_timeline_%tab_id% <- reactiveVal(c(as.Date(""1970-01-01""), Sys.Date()))
    m$debounced_datetimes_timeline_%tab_id% <- reactive(m$datetimes_timeline_%tab_id%()) %>% debounce(500)
}

observeEvent(input$synchronize_timelines_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$synchronize_timelines""))
    
    tryCatch({
        # Add a padding to align widget's timeline with other widgets
        if (input$synchronize_timelines_%widget_id%) {
            shinyjs::runjs(sprintf(
                ""document.getElementById('%s').style.paddingLeft = '80px'; var event = new Event('resize'); window.dispatchEvent(event);"",
                ns(""dygraph_div_%widget_id%"")
            ))
        } else {
            shinyjs::runjs(sprintf(
                ""document.getElementById('%s').style.paddingLeft = '0px'; var event = new Event('resize'); window.dispatchEvent(event);"",
                ns(""dygraph_div_%widget_id%"")
            ))
        }
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

observeEvent(input$dygraph_%widget_id%_date_window, {
    %req%
    req(input$synchronize_timelines_%widget_id%)
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$dygraph_%widget_id%_date_window""))
        
    tryCatch({
        datetime_values <- as.POSIXct(input$dygraph_%widget_id%_date_window, format = ""%Y-%m-%dT%H:%M:%OSZ"", tz = ""UTC"")
        m$datetimes_timeline_%tab_id%(datetime_values)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

observeEvent(m$debounced_datetimes_timeline_%tab_id%(), {
    %req%
    req(input$synchronize_timelines_%widget_id%)
    req(length(m$debounced_datetimes_timeline_%tab_id%()) > 0)
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$debounced_datetimes_timeline""))
    
    tryCatch({
    
        if (
            abs(as.numeric(m$debounced_datetimes_timeline_%tab_id%()[[1]]) - as.numeric(m$datetimes_%widget_id%[[1]])) > 5 |
            abs(as.numeric(m$debounced_datetimes_timeline_%tab_id%()[[2]]) - as.numeric (m$datetimes_%widget_id%[[2]])) > 5){
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
}, ignoreInit = TRUE)",1,2024-10-20 22:37:19,0
3,plugin,18,"# Server - General settings

# Settings / editor side-by-side with figure

observeEvent(input$figure_and_settings_side_by_side_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$figure_and_settings_side_by_side""))
    
    tryCatch({
        if (input$figure_and_settings_side_by_side_%widget_id%){
            shinyjs::runjs(paste0(""
                $('#"", id, ""-figure_div_%widget_id%').css('flex-basis', '50%');
                $('#"", id, ""-figure_settings_div_%widget_id%').css('flex-basis', '50%');
                $('#"", id, ""-code_div_%widget_id%').css('flex-basis', '50%');
                
                if (!window.resizingInitialized_%widget_id%) {
                    var container = document.getElementById('"", id, ""-figure_settings_code_div_%widget_id%');
                    
                    var isResizing = false;
                    var lastDownX = 0;
                    
                    var leftPanel = container.querySelector('.left-panel');
                    var figureSettingsPanel = document.getElementById('"", id, ""-figure_settings_div_%widget_id%');
                    var codePanel = document.getElementById('"", id, ""-code_div_%widget_id%');
                    var resizer = container.querySelector('.resizer');
                    
                    function triggerResizeEvent() {
                        var event = new Event('resize');
                        window.dispatchEvent(event);
                    }
                    
                    resizer.addEventListener('mousedown', function(e) {
                        isResizing = true;
                        lastDownX = e.clientX;
                
                        document.addEventListener('mousemove', resizePanels);
                        document.addEventListener('mouseup', stopResizing);
                    });
                    
                    function resizePanels(e) {
                        if (!isResizing) return;
                        
                        var offsetLeftPanel = leftPanel.offsetWidth;
                        var offsetFigureSettingsPanel = figureSettingsPanel.offsetWidth;
                        var offsetCodePanel = codePanel.offsetWidth;
                        var deltaX = e.clientX - lastDownX;
                        
                        leftPanel.style.flexBasis = (offsetLeftPanel + deltaX) + 'px';
                        
                        figureSettingsPanel.style.flexBasis = (offsetFigureSettingsPanel - deltaX) + 'px';
                        codePanel.style.flexBasis = (offsetCodePanel - deltaX) + 'px';
                
                        lastDownX = e.clientX;
                        triggerResizeEvent();
                    }
                    
                    function stopResizing(e) {
                        isResizing = false;
                        document.removeEventListener('mousemove', resizePanels);
                        document.removeEventListener('mouseup', stopResizing);
                        triggerResizeEvent();
                    }
                }
                
                window.resizingInitialized_%widget_id% = true;
            ""))
            shinyjs::hide(""figure_button_div_%widget_id%"")
            shinyjs::show(""resizer_%widget_id%"")
        }
        else {
            shinyjs::runjs(paste0(""
                $('#"", id, ""-figure_div_%widget_id%').css('flex-basis', '100%');
                $('#"", id, ""-figure_settings_div_%widget_id%').css('flex-basis', '100%');
                $('#"", id, ""-code_div_%widget_id%').css('flex-basis', '100%');
            ""))
            
            shinyjs::show(""figure_button_div_%widget_id%"");
            shinyjs::hide(""resizer_%widget_id%"");
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Save general settings in db

observeEvent(input$save_general_settings_button_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_general_settings_button""))
    
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_general_settings_%widget_id%', Math.random());""))
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

observeEvent(input$save_general_settings_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_general_settings""))
    
    tryCatch({
    
        # Delete old rows
        sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND category = 'general_settings'"", .con = m$db))
        
        file_id <- input$settings_file_%widget_id%
        new_data <- tibble::tibble(name = ""selected_file_id"", value = NA_character_, value_num = NA_integer_, link_id = file_id)
        
        general_settings <- c(""show_settings_file"", ""figure_and_settings_side_by_side"", ""run_code_on_data_update"", ""run_code_at_settings_file_load"")
        
        sapply(general_settings, function(name){
            toggle_value <- 0L
            input_name <- paste0(name, ""_%widget_id%"")
            if (length(input[[input_name]]) > 0) if (input[[input_name]]) toggle_value <- 1L
            new_data <<- new_data %>% dplyr::bind_rows(tibble::tibble(name = name, value = NA_character_, value_num = toggle_value, link_id = NA_integer_))
        })
        
        new_data <-
            new_data %>%
            dplyr::transmute(
                id = get_last_row(m$db, ""widgets_options"") + 1:(length(general_settings) + 1), widget_id = %widget_id%, person_id = NA_integer_, link_id,
                category = ""general_settings"", name, value, value_num, creator_id = m$user_id, datetime = now(), deleted = FALSE
            )
        
        DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-10-20 22:37:19,0
4,plugin,19,"# Server - Settings files management

settings_files_ui_style <- paste0(
    ""display: inline-block; color: white; max-width: 250px; border-radius: 8px; padding: 1px 5px; align-items: center;"",
    ""height: 18px; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; cursor: pointer; margin: 2px 5px;""
)

output$settings_files_ui_%widget_id% <- renderUI({
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer output$settings_files""))
    
    div(i18np$t(""no_settings_file_selected""), style = paste0(settings_files_ui_style, ""background-color: #606060ab;""))
})

## Show / hide settings file
observeEvent(input$show_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_settings_file""))
    
    if (input$show_settings_file_%widget_id%) shinyjs::show(""settings_files_ui_%widget_id%"")
    else shinyjs::hide(""settings_files_ui_%widget_id%"")
})

## Show / hide settings files div
observeEvent(input$show_settings_files_tab_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_settings_files_tab""))
    
    sapply(c(paste0(tabs, ""_div_%widget_id%""), ""figure_settings_code_div_%widget_id%""), shinyjs::hide)
    shinyjs::show(""settings_files_div_%widget_id%"")
})

## Show add settings file modal
observeEvent(input$create_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$create_settings_file""))
    
    shinyjs::show(""add_settings_file_modal_%widget_id%"")
})

## Close add settings file modal
observeEvent(input$close_add_settings_file_modal_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$close_add_settings_file_modal""))
    
    shinyjs::hide(""add_settings_file_modal_%widget_id%"")
})

## Confirm creation of settings file
observeEvent(input$add_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$add_settings_file""))
    
    tryCatch({
        file_name <- input$settings_file_name_%widget_id%
        
        # Check if name if empty
        empty_name <- TRUE
        if (length(file_name) > 0) if (!is.na(file_name) & file_name != """") empty_name <- FALSE
        if (empty_name) shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = i18np$t(""provide_valid_name""))
        else {
        
            shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = NULL)
            
            # Check if name is already used
            sql <- glue::glue_sql(""SELECT name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name' AND LOWER(value) = {tolower(file_name)}"", .con = m$db)
            name_already_used <- nrow(DBI::dbGetQuery(m$db, sql) > 0)
            
            if (name_already_used) shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = i18np$t(""name_already_used""))
            else {
                
                new_id <- get_last_row(m$db, ""widgets_options"") + 1
                
                # Add settings file in database
                new_data <- tibble::tibble(
                    id = new_id, widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
                    category = ""settings_files"", name = ""file_name"", value = file_name, value_num = NA_real_, creator_id = m$user_id, datetime = now(), deleted = FALSE
                )
                DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
                
                # Reset fields
                shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", value = """")
                
                # Update dropdown
                shiny.fluent::updateDropdown.shinyInput(session, ""settings_file_%widget_id%"", value = new_id)
                shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-reload_dropdown_%widget_id%', Math.random());""))
                
                # Close modal
                shinyjs::hide(""add_settings_file_modal_%widget_id%"")
                
                # Notify user
                show_message_bar(output, ""new_settings_file_added"", ""success"", i18n = i18np, ns = ns)
            }
        }
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## Update dropdown
observeEvent(input$reload_dropdown_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$settings_file""))
    
    tryCatch({
        sql <- glue::glue_sql(""SELECT id, value AS name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name'"", .con = m$db)
        m$settings_filenames_%widget_id% <- DBI::dbGetQuery(m$db, sql)
        
        dropdown_options <- convert_tibble_to_list(m$settings_filenames_%widget_id%, key_col = ""id"", text_col = ""name"")
        shiny.fluent::updateDropdown.shinyInput(session, ""settings_file_%widget_id%"", options = dropdown_options)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## A settings file is selected
observeEvent(input$settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$settings_file""))
    
    tryCatch({
    
        # Show delete button
        shinyjs::show(""delete_settings_file_div_%widget_id%"")
    
        # Get file name
        file_id <- input$settings_file_%widget_id%
        filename <- m$settings_filenames_%widget_id% %>% dplyr::filter(id == file_id) %>% dplyr::pull(name)
        
        output$settings_files_ui_%widget_id% <- renderUI(div(filename, style = paste0(settings_files_ui_style, ""background-color: #1d94ce;"")))
        
        # Save that this file is selected
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_general_settings_%widget_id%', Math.random());""))
        
        # Load saved settings
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-load_figure_settings_%widget_id%', Math.random());""))
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## Open delete a settings file modal
observeEvent(input$delete_settings_file_%widget_id%, {
    %req%
    req(length(input$settings_file_%widget_id%) > 0)
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$delete_settings_file""))
    
    shinyjs::show(""delete_settings_file_modal_%widget_id%"")
})

## Close delete a settings file modal
observeEvent(input$close_file_deletion_modal_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$close_file_deletion_modal""))
    
    shinyjs::hide(""delete_settings_file_modal_%widget_id%"")
})

## Confirm settings file deletion
observeEvent(input$confirm_file_deletion_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$confirm_file_deletion""))
    
    tryCatch({
        file_id <- input$settings_file_%widget_id%
        
        # Delete row in db
        sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE id = {file_id}"", .con = m$db))
        
        # Update dropdown
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-reload_dropdown_%widget_id%', Math.random());""))
        
        # Close modal
        shinyjs::hide(""delete_settings_file_modal_%widget_id%"")
        
        # Update selected settings file UI
        output$settings_files_ui_%widget_id% <- renderUI(div(i18np$t(""no_settings_file_selected""), style = paste0(settings_files_ui_style, ""background-color: #606060ab;"")))
        
        # Hide delete button
        shinyjs::hide(""delete_settings_file_div_%widget_id%"")
        
        # Notify user
        show_message_bar(output, ""settings_file_delete"", ""warning"", i18n = i18np, ns = ns)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-10-20 22:37:19,0
5,plugin,20,"# Server - Main file

# Tabs

## All tabs
tabs <- c(""figure"", ""figure_settings"", ""code"", ""general_settings"")

## Create an observer by tab, show selected tab, hide all others
sapply(tabs, function(tab){

    observeEvent(input[[paste0(tab, ""_button_%widget_id%"")]], {
        %req%
        if (debug) cat(paste0(""\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$"", tab))
        
        tryCatch({
            if (tab == ""general_settings"") shinyjs::hide(""figure_settings_code_div_%widget_id%"")
            else shinyjs::show(""figure_settings_code_div_%widget_id%"")
            
            sapply(paste0(setdiff(c(""figure_settings"", ""code"", ""general_settings""), tab), ""_div_%widget_id%""), shinyjs::hide)
            shinyjs::hide(""settings_files_div_%widget_id%"")
            
            if (tab != ""code"" | (tab == ""code"" & ""projects_console_access"" %in% user_accesses)) shinyjs::show(paste0(tab, ""_div_%widget_id%""))
            
            if (tab %in% c(""figure_settings"", ""code"")){
                if (length(input$figure_and_settings_side_by_side_%widget_id%) > 0) if (input$figure_and_settings_side_by_side_%widget_id%) shinyjs::show(""figure_div_%widget_id%"")
                else shinyjs::hide(""figure_div_%widget_id%"")
                
                shinyjs::show(""figure_settings_code_sidenav_%widget_id%"")
                
                if (tab == ""figure_settings"") anti_tab <- ""code""
                else anti_tab <- ""figure_settings""
                
                shinyjs::runjs(paste0(""
                    var figureSettingsDiv = document.getElementById('"", id, ""-figure_settings_div_%widget_id%');
                    var codeDiv = document.getElementById('"", id, ""-code_div_%widget_id%');
                    
                    if ('"", tab, ""' === 'figure_settings') {
                        figureSettingsDiv.style.flexBasis = codeDiv.style.flexBasis;
                    } else {
                        codeDiv.style.flexBasis = figureSettingsDiv.style.flexBasis;
                    }
                ""))
            }
            else {
                shinyjs::hide(""figure_settings_code_sidenav_%widget_id%"")
                if (tab != ""figure"") shinyjs::hide(""figure_div_%widget_id%"")
            }
            
            # Prevent a bug with scroll into ace editor
            shinyjs::runjs(""var event = new Event('resize'); window.dispatchEvent(event);"")
            
        }, error = function(e) cat(paste0(""\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    })
})

# Figure settings
%import_script('server_figure_settings.R')%

# Code
%import_script('server_code.R')%

# Settings files
%import_script('server_settings_files.R')%

# General settings
%import_script('server_general_settings.R')%",1,2024-10-20 22:37:19,0
6,plugin,21,"base,en,fr
show_figure,Figure,Figure
show_figure_settings,Set up the figure,Paramétrer la figure
show_code_editor,Edit figure code,Editer le code de la figure
show_general_settings,General settings,Paramètres généraux
figure_and_settings_side_by_side,Figure and settings/editor side by side,Figure et paramètres/éditeur côte à côte
display_figure,Display figure,Afficher la figure
save_figure_settings_and_code,Save,Sauvegarder
parameters_not_saved,Parameters not saved,Paramètres non sauvegardés
show_settings_file,Show settings file,Afficher le fichier de sauvegarde
create_settings_file,Create a settings file,Créer un fichier de sauvegarde
delete_settings_file_title,Delete a settings file,Supprimer un fichier de sauvegarde
delete_settings_file_text,Confirm deletion of the settings file?,Confirmer la suppression du fichier de sauvegarde ?
add,Add,Ajouter
file_name,File name,Nom du fichier
file,File,Fichier
provide_valid_name,Provide valid name,Nom valide requis
name_already_used,This name is already used,Ce nom est déjà utilisé
delete,Delete,Supprimer
dont_delete,Cancel,Annuler
no_settings_file_selected,No settings file selected,Pas de fichier de sauvegarde sélectionné
new_settings_file_added,New settings file added,Nouveau fichier de sauvegarde des paramètres ajouté
settings_file_deleted,Settings file deleted,Fichier de sauvegarde des paramètres supprimé
run_code_on_data_update,Run code on data update,Exécuter le code lors de la mise à jour des données
run_code_at_settings_file_load,Run code when a settings file is loaded,Exécuter le code au chargement d'un fichier de sauvegarde
save_general_settings,Save general settings,Sauvegarder les paramètres généraux
display,Display,Affichage
code_execution,Code execution,Exécution du code
error_displaying_figure,Error displaying figure,Erreur lors de l'affichage de la figure
features,Features,Variables
no_data_to_display,No data to display,Pas de données à afficher
data_to_display,Data to display,Données à afficher
patient_data,Patient data,Données du patient
stay_data,Stay data,Données du séjour
concepts,Concepts,Concepts
select_patient,Select a patient,Sélectionnez un patient
select_stay,Select a stay,Sélectionnez un séjour
synchronize_timelines,Synchronize timelines,Synchroniser les timelines",1,2024-10-20 22:37:19,0
7,plugin,22,"# UI - Code page

shinyAce::aceEditor(
    ns(""code_%widget_id%""), value = """", mode = ""r"",
    hotkeys = list(
        save = list(win = ""CTRL-S"", mac = ""CTRL-S|CMD-S""),
        run_all = list(win = ""CTRL-SHIFT-ENTER"", mac = ""CTRL-SHIFT-ENTER|CMD-SHIFT-ENTER""),
        comment = list(win = ""CTRL-SHIFT-C"", mac = ""CTRL-SHIFT-C|CMD-SHIFT-C"")
    ),
    autoScrollEditorIntoView = TRUE, height = ""100%"", debounce = 100, fontSize = 11, showPrintMargin = FALSE
)",1,2024-10-20 22:37:19,0
8,plugin,23,"# UI - Figure settings
#
# Insert the UI components for configuring the figure settings in this section.

div(
    div(
        shiny.fluent::Dropdown.shinyInput(
            ns(""data_source_%widget_id%""), options = list(
                list(key = ""person"", text = i18np$t(""patient_data"")),
                list(key = ""visit_detail"", text = i18np$t(""stay_data""))
            ), value = ""visit_detail"", label = i18np$t(""data_to_display"")
        ),
        style = ""width: 200px;""
    ),
    div(
        id = ns(""concepts_div_%widget_id%""),
        div(
            shiny.fluent::Dropdown.shinyInput(
                ns(""concepts_%widget_id%""), label = i18np$t(""concepts""),
                options = convert_tibble_to_list(
                    selected_concepts %>% dplyr::filter(domain_id == ""Measurement""),
                    key_col = ""concept_id"", text_col = ""concept_name""
                ),
                multiSelect = TRUE
            ),
            style = ""width: 200px;""
        ),
        style = ""display: flex; gap: 10px; padding-bottom: 15px; border-bottom: solid 1px #808080;""
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""synchronize_timelines_%widget_id%""), label = i18np$t(""synchronize_timelines"")),
        style = ""margin-top: 15px;""
    )
)",1,2024-10-20 22:37:19,0
9,plugin,24,"# UI - Figure page
#
# Insert the UI components for the figure in this section.

div(
    shinyjs::hidden(
        div(
            id = ns(""error_message_div_%widget_id%""),
            uiOutput(ns(""error_message_%widget_id%"")),
            style = ""padding-top: 10px;""
        )
    ),
    div(
        id = ns(""dygraph_div_%widget_id%""),
        dygraphs::dygraphOutput(ns(""dygraph_%widget_id%""), height = ""100%"", width = ""100%""),
        style = ""width: 100%; height: calc(100% - 10px); padding-top: 10px; box-sizing: border-box;""
    ),
    style = ""height: 100%; width: 100%; box-sizing: border-box; padding-right: 5px;""
)",1,2024-10-20 22:37:19,0
10,plugin,25,"# UI - General settings
#
# Include the UI components for the general settings in this section.
# If you add any fields here, ensure that you also update server_general_settings.R and ui_general_settings.R accordingly.

div(
    tags$strong(i18np$t(""display"")), br(),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""show_settings_file_%widget_id%""), value = toggle_values$show_settings_file),
        tags$label(i18np$t(""show_settings_file""), `for` = ns(""show_settings_file_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 8px;"" 
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""figure_and_settings_side_by_side_%widget_id%""), value = toggle_values$figure_and_settings_side_by_side),
        tags$label(i18np$t(""figure_and_settings_side_by_side""), `for` = ns(""figure_and_settings_side_by_side_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 5px;"" 
    ),
    tags$strong(i18np$t(""code_execution"")), br(),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""run_code_at_settings_file_load_%widget_id%""), value = toggle_values$run_code_at_settings_file_load),
        tags$label(i18np$t(""run_code_at_settings_file_load""), `for` = ns(""run_code_at_settings_file_load_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 8px;"" 
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""run_code_on_data_update_%widget_id%""), value = toggle_values$run_code_on_data_update),
        tags$label(i18np$t(""run_code_on_data_update""), `for` = ns(""run_code_on_data_update_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 5px;"" 
    ),
    style = ""margin: 5px 10px;""
)",1,2024-10-20 22:37:19,0
11,plugin,26,"# UI - Load general settings
#
# Insert the UI components for configuring the figure settings here.

sql <- glue::glue_sql(""SELECT link_id, name, value, value_num FROM widgets_options WHERE widget_id = %widget_id% AND category = 'general_settings'"", .con = m$db)
general_settings <- DBI::dbGetQuery(m$db, sql)

toggle_values <- list()

if (nrow(general_settings) == 0){

    toggle_values$show_settings_file <- TRUE
    toggle_values$figure_and_settings_side_by_side <- TRUE
    toggle_values$run_code_on_data_update <- FALSE
    toggle_values$run_code_at_settings_file_load <- FALSE
    
    dropdown_options <- list()
    selected_file <- NULL
    
} else if (nrow(general_settings) > 0){

    # Toggles values
    
    general_settings_vec <- c(""show_settings_file"", ""figure_and_settings_side_by_side"", ""run_code_on_data_update"", ""run_code_at_settings_file_load"")
    
    sapply(general_settings_vec, function(name){
        
        toggle_value <- FALSE
        
        row <- general_settings %>% dplyr::filter(name == !!name)
        if (nrow(row) > 0){
            if (is.na(row %>% dplyr::pull(value_num))) toggle_value <- FALSE
            else (toggle_value <- as.logical(row %>% dplyr::pull(value_num)))
        }
        
        toggle_values[[name]] <<- toggle_value
    })
    
    # Selected settings file
    
    sql <- glue::glue_sql(""SELECT id, value AS name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name'"", .con = m$db)
    m$settings_filenames_%widget_id% <- DBI::dbGetQuery(m$db, sql)
    dropdown_options <- convert_tibble_to_list(m$settings_filenames_%widget_id%, key_col = ""id"", text_col = ""name"")
    selected_file <- general_settings %>% dplyr::filter(name == ""selected_file_id"") %>% dplyr::pull(link_id)
}

if (toggle_values$figure_and_settings_side_by_side) div_width <- ""50%"" else div_width <- ""100%""",1,2024-10-20 22:37:19,0
12,plugin,27,"# UI - Settings files
#
# This code corresponds to the page that appears when you click on the file icon at the top of the widget.
# The UI allows you to select, add, and delete settings files.

tagList(

    # Add settings file modal
    shinyjs::hidden(
      div(
        id = ns(""add_settings_file_modal_%widget_id%""),
        div(
            div(
                tags$h1(i18np$t(""create_settings_file""), style = ""font-size: 14px;""),
                shiny.fluent::IconButton.shinyInput(ns(""close_add_settings_file_modal_%widget_id%""), iconProps = list(iconName = ""ChromeClose"")),
                style = ""display: flex; justify-content: space-between;"",
                class = ""small_close_button""
            ),
            div(shiny.fluent::TextField.shinyInput(ns(""settings_file_name_%widget_id%""), label = i18np$t(""file_name"")), style = ""width: 200px;""),
            div(
                shiny.fluent::PrimaryButton.shinyInput(ns(""add_settings_file_%widget_id%""), i18np$t(""add"")),
                style = ""position: absolute; right: 10px; bottom: 8px;""
            ),
            style = ""background: #fff; padding: 5px 10px 10px 15px; position: relative; width: 400px; height: 120px;""
        ),
        style = ""display: flex; align-items: center; justify-content: center; position: absolute; left: 0; top: 0;  width: 100%; height: 100%; background-color: rgba(0,0,0,0.2); z-index: 1000;""
      )
    ),
    
    # Delete settings file modal
    shinyjs::hidden(
      div(
        id = ns(""delete_settings_file_modal_%widget_id%""),
        div(
            tags$h1(i18np$t(""delete_settings_file_title""), style = ""font-size: 14px;""),
            tags$p(i18np$t(""delete_settings_file_text"")),
            div(
                shiny.fluent::DefaultButton.shinyInput(ns(""close_file_deletion_modal_%widget_id%""), i18np$t(""dont_delete"")),
                div(shiny.fluent::PrimaryButton.shinyInput(ns(""confirm_file_deletion_%widget_id%""), i18np$t(""delete"")), class = ""delete_button""),
                style = ""position: absolute; right: 10px; bottom: 8px; display: flex; gap: 5px;""
            ),
            style = ""background: #fff; padding: 5px 10px 10px 15px; position: relative; width: 400px; height: 120px;""
        ),
        style = ""display: flex; align-items: center; justify-content: center; position: absolute; left: 0; top: 0;  width: 100%; height: 100%; background-color: rgba(0,0,0,0.2); z-index: 1000;""
      )
    ),
    
    # Sidenav
    div(
        id = ns(""settings_files_sidenav_%widget_id%""),
        shiny.fluent::IconButton.shinyInput(ns(""create_settings_file_%widget_id%""), iconProps = list(iconName = ""Add""), title = i18np$t(""create_settings_file""), style = ""margin: 0""),
        class = ""widget_icon"",
        style = ""border-right: solid grey 0.5px;""
    ),
    
    # Dropdown and delete button
    div(
        div(shiny.fluent::Dropdown.shinyInput(ns(""settings_file_%widget_id%""), label = i18np$t(""file""), options = dropdown_options, value = selected_file), style = ""width: 200px""),
        shinyjs::hidden(
            div(
                id = ns(""delete_settings_file_div_%widget_id%""),
                shiny.fluent::IconButton.shinyInput(ns(""delete_settings_file_%widget_id%""), iconProps = list(iconName = ""Delete"")),
                style = ""margin-top: 26px;"", class = ""widget_icon""
            )
        ),
        style = ""display: flex; gap: 5px; margin: 5px 10px;""
    )
)",1,2024-10-20 22:37:19,0
13,plugin,28,"# UI - main file

if (""projects_console_access"" %in% user_accesses){
    code_button <- shiny.fluent::IconButton.shinyInput(ns(""code_button_%widget_id%""), iconProps = list(iconName = ""Code""), title = i18np$t(""show_code_editor""))
} else code_button <- """"

%import_script('ui_load_general_settings.R')%

tagList(
    div(
        shinyjs::hidden(
            div(
                id = ns(""figure_button_div_%widget_id%""),
                shiny.fluent::IconButton.shinyInput(ns(""figure_button_%widget_id%""), iconProps = list(iconName = ""BarChart4""), title = i18np$t(""show_figure""))
            )
        ),
        shiny.fluent::IconButton.shinyInput(ns(""figure_settings_button_%widget_id%""), iconProps = list(iconName = ""AllApps""), title = i18np$t(""show_figure_settings"")),
        code_button,
        shiny.fluent::IconButton.shinyInput(ns(""general_settings_button_%widget_id%""), iconProps = list(iconName = ""Settings""), title = i18np$t(""show_general_settings"")),
        uiOutput(
            ns(""settings_files_ui_%widget_id%""),
            onclick = paste0(""Shiny.setInputValue('"", id, ""-show_settings_files_tab_%widget_id%', Math.random())"")
        ),
        class = ""widget_icon"",
        style = ""display: flex; color: #808080; border-bottom: solid grey 0.5px; height: 28px; padding-top: 5px; font-size: 12px; color: #808080;""
    ),
    div(
        id = ns(""figure_settings_code_div_%widget_id%""),
        div(
            id = ns(""figure_settings_code_sidenav_%widget_id%""),
            shiny.fluent::IconButton.shinyInput(ns(""display_figure_%widget_id%""), iconProps = list(iconName = ""Play""), title = i18np$t(""display_figure""), style = ""margin: 0""),
            shiny.fluent::IconButton.shinyInput(ns(""save_params_and_code_%widget_id%""), iconProps = list(iconName = ""Save""), title = i18np$t(""save_figure_settings_and_code""), style = ""margin: 0""),
            class = ""widget_icon"",
            style = ""border-right: solid grey 0.5px; margin-right: 10px;""
        ),
        div(
            id = ns(""figure_div_%widget_id%""),
            %import_script('ui_figure.R')%,
            style = paste0(""height: 100%; flex-basis: "", div_width, ""; flex: 1; box-sizing: border-box; min-width: 100px;""),
            class = ""left-panel""
        ),
        div(
            id = ns(""resizer_%widget_id%""),
            style = ""width: 5px; cursor: col-resize; background-color: #ccc;"",
            class = ""resizer""
        ),
        shinyjs::hidden(
            div(
                id = ns(""figure_settings_div_%widget_id%""),
                %import_script('ui_figure_settings.R')%,
                style = paste0(""height: 100%; flex-basis: "", div_width, ""%; margin: 5px 10px; overflow: auto; flex: 1; box-sizing: border-box;"")
            )
        ),
        div(
            id = ns(""code_div_%widget_id%""),
            %import_script('ui_code.R')%,
            style = paste0(""height: 100%; flex-basis: "", div_width, ""%; overflow: auto; flex: 1; box-sizing: border-box;""),
            class = ""right-panel""
        ),
        style = ""display: flex; height: calc(100% - 40px);""
    ),
    shinyjs::hidden(
        div(
            id = ns(""general_settings_div_%widget_id%""),
            div(
                id = ns(""general_settings_sidenav_%widget_id%""),
                shiny.fluent::IconButton.shinyInput(ns(""save_general_settings_button_%widget_id%""), iconProps = list(iconName = ""Save""), title = i18np$t(""save_general_settings""), style = ""margin: 0""),
                class = ""widget_icon"",
                style = ""border-right: solid grey 0.5px;""
            ),
            %import_script('ui_general_settings.R')%,
            style = ""display: flex; height: calc(100% - 40px);""
        )
    ),
    shinyjs::hidden(
        div(
            id = ns(""settings_files_div_%widget_id%""),
            %import_script('ui_settings_files.R')%,
            style = ""display: flex; height: calc(100% - 40px);""
        )
    )
)",1,2024-10-20 22:37:19,0
14,plugin,41,"# UI - main file

## Hide save buttons if the user does not have access

if (""projects_console_access"" %in% user_accesses){
    code_button <- shiny.fluent::IconButton.shinyInput(ns(""code_button_%widget_id%""), iconProps = list(iconName = ""Code""), title = i18np$t(""show_code_editor""))
} else code_button <- """"

if (""projects_widgets_settings"" %in% user_accesses){
    save_figure_settings_buttons <- shiny.fluent::IconButton.shinyInput(ns(""save_params_and_code_%widget_id%""), iconProps = list(iconName = ""Save""), title = i18np$t(""save_figure_settings_and_code""), style = ""margin: 0"")
    save_general_settings_button <- shiny.fluent::IconButton.shinyInput(ns(""save_general_settings_button_%widget_id%""), iconProps = list(iconName = ""Save""), title = i18np$t(""save_general_settings""), style = ""margin: 0"")
} else {
    save_figure_settings_buttons <- """"
    save_general_settings_button <- """"   
}

%import_script('ui_load_general_settings.R')%

tagList(
    div(
        shinyjs::hidden(
            div(
                id = ns(""figure_button_div_%widget_id%""),
                shiny.fluent::IconButton.shinyInput(ns(""figure_button_%widget_id%""), iconProps = list(iconName = ""BarChart4""), title = i18np$t(""show_figure""))
            )
        ),
        shiny.fluent::IconButton.shinyInput(ns(""figure_settings_button_%widget_id%""), iconProps = list(iconName = ""AllApps""), title = i18np$t(""show_figure_settings"")),
        code_button,
        shiny.fluent::IconButton.shinyInput(ns(""general_settings_button_%widget_id%""), iconProps = list(iconName = ""Settings""), title = i18np$t(""show_general_settings"")),
        uiOutput(
            ns(""settings_files_ui_%widget_id%""),
            onclick = paste0(""Shiny.setInputValue('"", id, ""-show_settings_files_tab_%widget_id%', Math.random())"")
        ),
        class = ""widget_icon"",
        style = ""display: flex; color: #808080; border-bottom: solid grey 0.5px; height: 28px; padding-top: 5px; font-size: 12px;""
    ),
    div(
        id = ns(""figure_settings_code_div_%widget_id%""),
        div(
            id = ns(""figure_settings_code_sidenav_%widget_id%""),
            shiny.fluent::IconButton.shinyInput(ns(""display_figure_%widget_id%""), iconProps = list(iconName = ""Play""), title = i18np$t(""display_figure""), style = ""margin: 0""),
            save_figure_settings_buttons,
            class = ""widget_icon"",
            style = ""border-right: solid grey 0.5px; width: 25px; margin-right: 10px;""
        ),
        div(
            id = ns(""figure_div_%widget_id%""),
            %import_script('ui_figure.R')%,
            style = paste0(""height: 100%; flex-basis: "", div_width, ""; flex: 1; box-sizing: border-box; min-width: 50px;""),
            class = ""left-panel""
        ),
        div(
            id = ns(""resizer_%widget_id%""),
            style = ""width: 5px; cursor: col-resize; background-color: #ccc;"",
            class = ""resizer""
        ),
        div(
            id = ns(""figure_settings_div_%widget_id%""),
            %import_script('ui_figure_settings.R')%,
            style = paste0(""height: 100%; flex-basis: "", div_width, ""%; margin: 5px 10px; overflow: auto; flex: 1; box-sizing: border-box;"")
        ),
        shinyjs::hidden(
            div(
                id = ns(""code_div_%widget_id%""),
                %import_script('ui_code.R')%,
                style = paste0(""height: 100%; flex-basis: "", div_width, ""%; overflow: auto; flex: 1; box-sizing: border-box;""),
                class = ""right-panel""
            )
        ),
        style = ""display: flex; height: calc(100% - 40px);""
    ),
    shinyjs::hidden(
        div(
            id = ns(""general_settings_div_%widget_id%""),
            div(
                id = ns(""general_settings_sidenav_%widget_id%""),
                save_general_settings_button,
                class = ""widget_icon"",
                style = ""border-right: solid grey 0.5px; width: 25px;""
            ),
            %import_script('ui_general_settings.R')%,
            style = ""display: flex; height: calc(100% - 40px);""
        )
    ),
    shinyjs::hidden(
        div(
            id = ns(""settings_files_div_%widget_id%""),
            %import_script('ui_settings_files.R')%,
            style = ""display: flex; height: calc(100% - 40px);""
        )
    )
)",1,2024-08-28 16:24:47,0
15,plugin,42,"# Server - Main file

# Tabs

## All tabs
tabs <- c(""figure"", ""figure_settings"", ""code"", ""general_settings"")

## Create an observer by tab, show selected tab, hide all others
sapply(tabs, function(tab){

    observeEvent(input[[paste0(tab, ""_button_%widget_id%"")]], {
        %req%
        if (debug) cat(paste0(""\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$"", tab))
        
        tryCatch({
            if (tab == ""general_settings"") shinyjs::hide(""figure_settings_code_div_%widget_id%"")
            else shinyjs::show(""figure_settings_code_div_%widget_id%"")
            
            sapply(paste0(setdiff(c(""figure_settings"", ""code"", ""general_settings""), tab), ""_div_%widget_id%""), shinyjs::hide)
            shinyjs::hide(""settings_files_div_%widget_id%"")
            
            if (tab != ""code"" | (tab == ""code"" & ""projects_console_access"" %in% user_accesses)) shinyjs::show(paste0(tab, ""_div_%widget_id%""))
            
            if (tab %in% c(""figure_settings"", ""code"")){
                if (length(input$figure_and_settings_side_by_side_%widget_id%) > 0) if (input$figure_and_settings_side_by_side_%widget_id%) shinyjs::show(""figure_div_%widget_id%"")
                else shinyjs::hide(""figure_div_%widget_id%"")
                
                shinyjs::show(""figure_settings_code_sidenav_%widget_id%"")
                
                if (tab == ""figure_settings"") anti_tab <- ""code""
                else anti_tab <- ""figure_settings""
                
                shinyjs::runjs(paste0(""
                    var figureSettingsDiv = document.getElementById('"", id, ""-figure_settings_div_%widget_id%');
                    var codeDiv = document.getElementById('"", id, ""-code_div_%widget_id%');
                    
                    if ('"", tab, ""' === 'figure_settings') {
                        figureSettingsDiv.style.flexBasis = codeDiv.style.flexBasis;
                    } else {
                        codeDiv.style.flexBasis = figureSettingsDiv.style.flexBasis;
                    }
                ""))
            }
            else {
                shinyjs::hide(""figure_settings_code_sidenav_%widget_id%"")
                if (tab != ""figure"") shinyjs::hide(""figure_div_%widget_id%"")
            }
            
            # Prevent a bug with scroll into ace editor
            shinyjs::runjs(""var event = new Event('resize'); window.dispatchEvent(event);"")
            
        }, error = function(e) cat(paste0(""\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    })
})

# Figure settings
%import_script('server_figure_settings.R')%

# Code
%import_script('server_code.R')%

# Settings files
%import_script('server_settings_files.R')%

# General settings
%import_script('server_general_settings.R')%",1,2024-08-28 16:24:47,0
16,plugin,43,"base,en,fr
show_figure,Figure,Figure
show_figure_settings,Set up the figure,Paramétrer la figure
show_code_editor,Edit figure code,Editer le code de la figure
show_general_settings,General settings,Paramètres généraux
figure_and_settings_side_by_side,Figure and settings/editor side by side,Figure et paramètres/éditeur côte à côte
display_figure,Display figure,Afficher la figure
save_figure_settings_and_code,Save,Sauvegarder
language,Language,Langage
output,Output,Output
r,R,R
python,Python,Python
figure,Figure,Figure
console,Console,Console
table,Table,Table
datatable,DataTable,DataTable
rmarkdown,RMarkdown,RMarkdown
matplotlib,Matplotlib,Matplotlib
parameters_not_saved,Parameters not saved,Paramètres non sauvegardés
show_settings_file,Show settings file,Afficher le fichier de sauvegarde
create_settings_file,Create a settings file,Créer un fichier de sauvegarde
delete_settings_file_title,Delete a settings file,Supprimer un fichier de sauvegarde
delete_settings_file_text,Confirm deletion of the settings file?,Confirmer la suppression du fichier de sauvegarde ?
add,Add,Ajouter
file_name,File name,Nom du fichier
file,File,Fichier
provide_valid_name,Provide valid name,Nom valide requis
name_already_used,This name is already used,Ce nom est déjà utilisé
delete,Delete,Supprimer
dont_delete,Cancel,Annuler
no_settings_file_selected,No settings file selected,Pas de fichier de sauvegarde sélectionné
new_settings_file_added,New settings file added,Nouveau fichier de sauvegarde des paramètres ajouté
settings_file_deleted,Settings file deleted,Fichier de sauvegarde des paramètres supprimé
run_code_on_data_update,Run code on data update,Exécuter le code lors de la mise à jour des données
save_general_settings,Save general settings,Sauvegarder les paramètres généraux
display,Display,Affichage
code_execution,Code execution,Exécution du code
run_code_at_settings_file_load,Run code when a settings file is loaded,Exécuter le code au chargement d'un fichier de sauvegarde
ui_html,UI (HTML),UI (HTML)
error_displaying_figure,Error displaying figure,Erreur lors de l'affichage de la figure
features,Features,Variables
select_patient,Select a patient,Sélectionnez un patient
no_data_to_display,No data to display,Pas de données à afficher
hospital_unit,Hospital unit,Unité
datetime_start,Start,Date de début
datetime_end,End,Date de fin",1,2024-08-28 16:24:47,0
17,plugin,44,"# Server - Code

# Init code var
m$code_%widget_id% <- """"

# Prevent a bug with scroll into ace editor
shinyjs::delay(300, shinyjs::runjs(""var event = new Event('resize'); window.dispatchEvent(event);""))

# Comment code
observeEvent(input$code_%widget_id%_comment, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_comment""))

    tryCatch({
        lines <- strsplit(input$code_%widget_id%, ""\\n"")[[1]]
        req(length(lines) > 0)
        
        start_row <- input$code_%widget_id%_comment$range$start$row + 1
        end_row <- input$code_%widget_id%_comment$range$end$row + 1
        
        for (i in start_row:end_row) if (startsWith(lines[i], ""# "")) lines[i] <- substr(lines[i], 3, nchar(lines[i])) else lines[i] <- paste0(""# "", lines[i])
        
        shinyAce::updateAceEditor(session, ""code_%widget_id%"", value = paste0(lines, collapse = ""\\n""))
        
        shinyjs::runjs(sprintf(""
            var editor = ace.edit('%s-rode');
            editor.moveCursorTo(%d, %d);
            editor.focus();
        "", id, input$code_%widget_id%_comment$range$end$row, input$code_%widget_id%_comment$range$end$column))
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Run all code with shortcut
observeEvent(input$code_%widget_id%_run_all, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_run_all""))

    m$code_%widget_id% <- input$code_%widget_id%
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
})

# Run code when button is clicked
observeEvent(input$display_figure_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$display_figure""))
    
    m$code_%widget_id% <- input$code_%widget_id%
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
})

# Run code at patient update
observeEvent(m$selected_person, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$selected_person""))
    
    if (isTRUE(input$run_code_on_data_update_%widget_id%)) shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
})

# Run code
observeEvent(input$run_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_code""))
    
    tryCatch({
        
        if (is.na(m$selected_person)){
            output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""select_patient""), messageBarType = 5), style = ""display: inline-block;""))
            shinyjs::hide(""stays_plot_%widget_id%"")
            shinyjs::show(""error_message_div_%widget_id%"")
        }
        else {

            data <- d$data_person$visit_detail
            
            if (data %>% dplyr::count() %>% dplyr::pull() == 0){
                    
                output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""no_data_to_display""), messageBarType = 5), style = ""display: inline-block;""))
                
                shinyjs::hide(""stays_plot_%widget_id%"")
                shinyjs::show(""error_message_div_%widget_id%"")
            } else {
                
                shinyjs::hide(""error_message_div_%widget_id%"")
                shinyjs::show(""stays_plot_%widget_id%"")
                
                data <-
                    d$data_person$visit_detail %>%
                    dplyr::select(visit_detail_start_datetime, visit_detail_end_datetime, care_site_id) %>%
                    dplyr::left_join(
                        d$care_site %>% dplyr::select(care_site_id, care_site_name),
                        by = ""care_site_id""
                    ) %>%
                    dplyr::collect() %>%
                    dplyr::arrange(visit_detail_start_datetime) %>%
                    dplyr::filter(!is.na(care_site_name)) %>%
                    dplyr::mutate(
                        service_order = as.numeric(forcats::fct_rev(forcats::fct_inorder(care_site_name)))
                    )
                
                unique_levels <- data$service_order
                unique_labels <- data$care_site_name
                
                if (language == ""fr"") datetime_format <- ""%d-%m-%Y %H:%M""
                else datetime_format <- ""%Y-%m-%d %H:%M""
                
                plotly_visit_detail <- plotly::plot_ly(data = data, source = ""visit_detail_plot_%widget_id%"") %>%
                    plotly::add_segments(
                        x = ~visit_detail_start_datetime,
                        xend = ~visit_detail_end_datetime,
                        y = ~service_order,
                        yend = ~service_order,
                        line = list(color = ""steelblue"", width = 10),
                        text = ~paste0(
                            i18np$t(""hospital_unit""), "" : "", care_site_name, ""<br>"",
                            i18np$t(""datetime_start""), "" : "", format(visit_detail_start_datetime, datetime_format), ""<br>"",
                            i18np$t(""datetime_end""), "" : "", format(visit_detail_end_datetime, datetime_format)
                        ),
                        hoverinfo = ""text""
                    ) %>%
                    plotly::layout(
                        xaxis = list(
                            type = ""date"",
                            tickmode = ""auto"",
                            title = """",
                            nticks = 10,
                            tickfont = list(size = 10),
                            tickformat = datetime_format
                        ),
                        yaxis = list(
                            tickvals = unique_levels,
                            ticktext = unique_labels,
                            title = """",
                            automargin = TRUE
                        ),
                        hoverlabel = list(align = ""left"")
                    ) %>%
                    plotly::config(displayModeBar = FALSE)
            
                output$stays_plot_%widget_id% <- plotly::renderPlotly(plotly_visit_detail)
            }
        }

        # Go to figure tab
        if (!input$figure_and_settings_side_by_side_%widget_id%) shinyjs::click(""figure_button_%widget_id%"")
        
    }, error = function(e){
        show_message_bar(output, ""error_displaying_figure"", ""severeWarning"", i18n = i18np, ns = ns)
        cat(paste0(""\\n"", now(), "" - widget %widget_id% - input$display_figure - error = "", toString(e)))
    })
})

# Save code with shortcut
observeEvent(input$code_%widget_id%_save, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_save""))
    
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_params_and_code_%widget_id%', Math.random());""))
})",1,2024-08-28 16:26:07,0
18,plugin,45,"# Server - Figure settings

# Load figure settings

observeEvent(input$load_figure_settings_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$load_figure_settings""))
    
    # Update figure settings UI
    
    link_id <- input$settings_file_%widget_id%
    sql <- glue::glue_sql(""SELECT name, value FROM widgets_options WHERE widget_id = %widget_id% AND category = 'figure_settings' AND link_id = {link_id}"", .con = m$db)
    figure_settings <- DBI::dbGetQuery(m$db, sql)
    
    if (nrow(figure_settings) > 0){
        sapply(figure_settings$name, function(name){
        
            value <- figure_settings %>% dplyr::filter(name == !!name) %>% dplyr::pull(value)
            
            # Update figure settings UI here with loaded figure settings
        })
    }
    
    # Run code if toggle is activated
    if (length(input$run_code_at_settings_file_load_%widget_id%) > 0){
        if (input$run_code_at_settings_file_load_%widget_id%){
           shinyjs::delay(500, shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-display_figure_%widget_id%', Math.random());"")))
       }
    }
})

# Save current settings

observeEvent(input$save_params_and_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_params_and_code""))
    
    tryCatch({
    
        # If no settings file is selected, go to settings files management page
        if (length(input$settings_file_%widget_id%) == 0) shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-show_settings_files_tab_%widget_id%', Math.random());""))
        
        if (length(input$settings_file_%widget_id%) > 0){
            
            link_id <- input$settings_file_%widget_id%
        
            # Delete old settings
            sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND category = 'figure_settings' AND link_id = {link_id}"", .con = m$db))
            
            # Add new settings in db
            # new_data <- tibble::tribble(
            #     ~name, ~value, ~value_num,
            #     ...
            # ) %>%
            # dplyr::transmute(
            #     id = get_last_row(m$db, ""widgets_options"") + 1:1, widget_id = %widget_id%, person_id = NA_integer_, link_id = link_id,
            #     category = ""figure_settings"", name, value, value_num, creator_id = m$user_id, datetime = now(), deleted = FALSE
            # )
            
            # DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
            
            # Notify user
            show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-08-28 16:26:24,0
19,plugin,46,"# Server - General settings

# Settings / editor side-by-side with figure

observeEvent(input$figure_and_settings_side_by_side_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$figure_and_settings_side_by_side""))
    
    tryCatch({
        if (input$figure_and_settings_side_by_side_%widget_id%){
            shinyjs::runjs(paste0(""
                $('#"", id, ""-figure_div_%widget_id%').css('flex-basis', '50%');
                $('#"", id, ""-figure_settings_div_%widget_id%').css('flex-basis', '50%');
                $('#"", id, ""-code_div_%widget_id%').css('flex-basis', '50%');
                
                if (!window.resizingInitialized_%widget_id%) {
                    var container = document.getElementById('"", id, ""-figure_settings_code_div_%widget_id%');
                    
                    var isResizing = false;
                    var lastDownX = 0;
                    
                    var leftPanel = container.querySelector('.left-panel');
                    var figureSettingsPanel = document.getElementById('"", id, ""-figure_settings_div_%widget_id%');
                    var codePanel = document.getElementById('"", id, ""-code_div_%widget_id%');
                    var resizer = container.querySelector('.resizer');
                    
                    function triggerResizeEvent() {
                        var event = new Event('resize');
                        window.dispatchEvent(event);
                    }
                    
                    resizer.addEventListener('mousedown', function(e) {
                        isResizing = true;
                        lastDownX = e.clientX;
                
                        document.addEventListener('mousemove', resizePanels);
                        document.addEventListener('mouseup', stopResizing);
                    });
                    
                    function resizePanels(e) {
                        if (!isResizing) return;
                        
                        var offsetLeftPanel = leftPanel.offsetWidth;
                        var offsetFigureSettingsPanel = figureSettingsPanel.offsetWidth;
                        var offsetCodePanel = codePanel.offsetWidth;
                        var deltaX = e.clientX - lastDownX;
                        
                        leftPanel.style.flexBasis = (offsetLeftPanel + deltaX) + 'px';
                        
                        figureSettingsPanel.style.flexBasis = (offsetFigureSettingsPanel - deltaX) + 'px';
                        codePanel.style.flexBasis = (offsetCodePanel - deltaX) + 'px';
                
                        lastDownX = e.clientX;
                        triggerResizeEvent();
                    }
                    
                    function stopResizing(e) {
                        isResizing = false;
                        document.removeEventListener('mousemove', resizePanels);
                        document.removeEventListener('mouseup', stopResizing);
                        triggerResizeEvent();
                    }
                }
                
                window.resizingInitialized_%widget_id% = true;
            ""))
            shinyjs::hide(""figure_button_div_%widget_id%"")
            shinyjs::show(""resizer_%widget_id%"")
        }
        else {
            shinyjs::runjs(paste0(""
                $('#"", id, ""-figure_div_%widget_id%').css('flex-basis', '100%');
                $('#"", id, ""-figure_settings_div_%widget_id%').css('flex-basis', '100%');
                $('#"", id, ""-code_div_%widget_id%').css('flex-basis', '100%');
            ""))
            
            shinyjs::show(""figure_button_div_%widget_id%"");
            shinyjs::hide(""resizer_%widget_id%"");
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Save general settings in db

observeEvent(input$save_general_settings_button_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_general_settings_button""))
    
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_general_settings_%widget_id%', Math.random());""))
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

observeEvent(input$save_general_settings_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_general_settings""))
    
    tryCatch({
    
        # Delete old rows
        sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND category = 'general_settings'"", .con = m$db))
        
        file_id <- input$settings_file_%widget_id%
        new_data <- tibble::tibble(name = ""selected_file_id"", value = NA_character_, value_num = NA_integer_, link_id = file_id)
        
        general_settings <- c(""show_settings_file"", ""figure_and_settings_side_by_side"", ""run_code_on_data_update"", ""run_code_at_settings_file_load"")
        
        sapply(general_settings, function(name){
            toggle_value <- 0L
            input_name <- paste0(name, ""_%widget_id%"")
            if (length(input[[input_name]]) > 0) if (input[[input_name]]) toggle_value <- 1L
            new_data <<- new_data %>% dplyr::bind_rows(tibble::tibble(name = name, value = NA_character_, value_num = toggle_value, link_id = NA_integer_))
        })
        
        new_data <-
            new_data %>%
            dplyr::transmute(
                id = get_last_row(m$db, ""widgets_options"") + 1:(length(general_settings) + 1), widget_id = %widget_id%, person_id = NA_integer_, link_id,
                category = ""general_settings"", name, value, value_num, creator_id = m$user_id, datetime = now(), deleted = FALSE
            )
        
        DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-08-28 16:26:46,0
20,plugin,47,"# Server - Settings files management

settings_files_ui_style <- paste0(
    ""display: inline-block; color: white; max-width: 250px; border-radius: 8px; padding: 1px 5px; align-items: center;"",
    ""height: 18px; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; cursor: pointer; margin: 2px 5px;""
)

output$settings_files_ui_%widget_id% <- renderUI({
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer output$settings_files""))
    
    div(i18np$t(""no_settings_file_selected""), style = paste0(settings_files_ui_style, ""background-color: #606060ab;""))
})

## Show / hide settings file
observeEvent(input$show_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_settings_file""))
    
    if (input$show_settings_file_%widget_id%) shinyjs::show(""settings_files_ui_%widget_id%"")
    else shinyjs::hide(""settings_files_ui_%widget_id%"")
})

## Show / hide settings files div
observeEvent(input$show_settings_files_tab_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_settings_files_tab""))
    
    sapply(c(paste0(tabs, ""_div_%widget_id%""), ""figure_settings_code_div_%widget_id%""), shinyjs::hide)
    shinyjs::show(""settings_files_div_%widget_id%"")
})

## Show add settings file modal
observeEvent(input$create_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$create_settings_file""))
    
    shinyjs::show(""add_settings_file_modal_%widget_id%"")
})

## Close add settings file modal
observeEvent(input$close_add_settings_file_modal_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$close_add_settings_file_modal""))
    
    shinyjs::hide(""add_settings_file_modal_%widget_id%"")
})

## Confirm creation of settings file
observeEvent(input$add_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$add_settings_file""))
    
    tryCatch({
        file_name <- input$settings_file_name_%widget_id%
        
        # Check if name if empty
        empty_name <- TRUE
        if (length(file_name) > 0) if (!is.na(file_name) & file_name != """") empty_name <- FALSE
        if (empty_name) shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = i18np$t(""provide_valid_name""))
        else {
        
            shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = NULL)
            
            # Check if name is already used
            sql <- glue::glue_sql(""SELECT name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name' AND LOWER(value) = {tolower(file_name)}"", .con = m$db)
            name_already_used <- nrow(DBI::dbGetQuery(m$db, sql) > 0)
            
            if (name_already_used) shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = i18np$t(""name_already_used""))
            else {
                
                new_id <- get_last_row(m$db, ""widgets_options"") + 1
                
                # Add settings file in database
                new_data <- tibble::tibble(
                    id = new_id, widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
                    category = ""settings_files"", name = ""file_name"", value = file_name, value_num = NA_real_, creator_id = m$user_id, datetime = now(), deleted = FALSE
                )
                DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
                
                # Reset fields
                shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", value = """")
                
                # Update dropdown
                shiny.fluent::updateDropdown.shinyInput(session, ""settings_file_%widget_id%"", value = new_id)
                shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-reload_dropdown_%widget_id%', Math.random());""))
                
                # Close modal
                shinyjs::hide(""add_settings_file_modal_%widget_id%"")
                
                # Notify user
                show_message_bar(output, ""new_settings_file_added"", ""success"", i18n = i18np, ns = ns)
            }
        }
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## Update dropdown
observeEvent(input$reload_dropdown_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$settings_file""))
    
    tryCatch({
        sql <- glue::glue_sql(""SELECT id, value AS name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name'"", .con = m$db)
        m$settings_filenames_%widget_id% <- DBI::dbGetQuery(m$db, sql)
        
        dropdown_options <- convert_tibble_to_list(m$settings_filenames_%widget_id%, key_col = ""id"", text_col = ""name"")
        shiny.fluent::updateDropdown.shinyInput(session, ""settings_file_%widget_id%"", options = dropdown_options)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## A settings file is selected
observeEvent(input$settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$settings_file""))
    
    tryCatch({
    
        # Show delete button
        shinyjs::show(""delete_settings_file_div_%widget_id%"")
    
        # Get file name
        file_id <- input$settings_file_%widget_id%
        filename <- m$settings_filenames_%widget_id% %>% dplyr::filter(id == file_id) %>% dplyr::pull(name)
        
        output$settings_files_ui_%widget_id% <- renderUI(div(filename, style = paste0(settings_files_ui_style, ""background-color: #1d94ce;"")))
        
        # Save that this file is selected
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_general_settings_%widget_id%', Math.random());""))
        
        # Load saved settings
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-load_figure_settings_%widget_id%', Math.random());""))
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## Open delete a settings file modal
observeEvent(input$delete_settings_file_%widget_id%, {
    %req%
    req(length(input$settings_file_%widget_id%) > 0)
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$delete_settings_file""))
    
    shinyjs::show(""delete_settings_file_modal_%widget_id%"")
})

## Close delete a settings file modal
observeEvent(input$close_file_deletion_modal_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$close_file_deletion_modal""))
    
    shinyjs::hide(""delete_settings_file_modal_%widget_id%"")
})

## Confirm settings file deletion
observeEvent(input$confirm_file_deletion_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$confirm_file_deletion""))
    
    tryCatch({
        file_id <- input$settings_file_%widget_id%
        
        # Delete row in db
        sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE id = {file_id}"", .con = m$db))
        
        # Update dropdown
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-reload_dropdown_%widget_id%', Math.random());""))
        
        # Close modal
        shinyjs::hide(""delete_settings_file_modal_%widget_id%"")
        
        # Update selected settings file UI
        output$settings_files_ui_%widget_id% <- renderUI(div(i18np$t(""no_settings_file_selected""), style = paste0(settings_files_ui_style, ""background-color: #606060ab;"")))
        
        # Hide delete button
        shinyjs::hide(""delete_settings_file_div_%widget_id%"")
        
        # Notify user
        show_message_bar(output, ""settings_file_delete"", ""warning"", i18n = i18np, ns = ns)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-08-28 16:26:57,0
21,plugin,48,"# UI - Figure settings
#
# Insert the UI components for configuring the figure settings in this section.

div(
    
)",1,2024-08-28 16:27:17,0
22,plugin,49,"# UI - Figure page
#
# Insert the UI components for the figure in this section.

div(
    shinyjs::hidden(
        div(
            id = ns(""error_message_div_%widget_id%""),
            uiOutput(ns(""error_message_%widget_id%"")),
            style = ""padding-top: 10px;""
        )
    ),
    plotly::plotlyOutput(ns(""stays_plot_%widget_id%""), width = ""100%"", height = ""100%""),
    style = ""width: 100%; height: 100%;""
)",1,2024-08-28 16:27:31,0
23,plugin,50,"# UI - Load general settings
#
# Insert the UI components for configuring the figure settings here.

sql <- glue::glue_sql(""SELECT link_id, name, value, value_num FROM widgets_options WHERE widget_id = %widget_id% AND category = 'general_settings'"", .con = m$db)
general_settings <- DBI::dbGetQuery(m$db, sql)

toggle_values <- list()

if (nrow(general_settings) == 0){

    toggle_values$show_settings_file <- TRUE
    toggle_values$figure_and_settings_side_by_side <- TRUE
    toggle_values$run_code_on_data_update <- FALSE
    toggle_values$run_code_at_settings_file_load <- FALSE
    
    dropdown_options <- list()
    selected_file <- NULL
    
} else if (nrow(general_settings) > 0){

    # Toggles values
    
    general_settings_vec <- c(""show_settings_file"", ""figure_and_settings_side_by_side"", ""run_code_on_data_update"", ""run_code_at_settings_file_load"")
    
    sapply(general_settings_vec, function(name){
        
        toggle_value <- FALSE
        
        row <- general_settings %>% dplyr::filter(name == !!name)
        if (nrow(row) > 0){
            if (is.na(row %>% dplyr::pull(value_num))) toggle_value <- FALSE
            else (toggle_value <- as.logical(row %>% dplyr::pull(value_num)))
        }
        
        toggle_values[[name]] <<- toggle_value
    })
    
    # Selected settings file
    
    sql <- glue::glue_sql(""SELECT id, value AS name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name'"", .con = m$db)
    m$settings_filenames_%widget_id% <- DBI::dbGetQuery(m$db, sql)
    dropdown_options <- convert_tibble_to_list(m$settings_filenames_%widget_id%, key_col = ""id"", text_col = ""name"")
    selected_file <- general_settings %>% dplyr::filter(name == ""selected_file_id"") %>% dplyr::pull(link_id)
}

if (toggle_values$figure_and_settings_side_by_side) div_width <- ""50%"" else div_width <- ""100%""",1,2024-08-28 16:27:41,0
24,plugin,51,"# UI - Settings files
#
# This code corresponds to the page that appears when you click on the file icon at the top of the widget.
# The UI allows you to select, add, and delete settings files.

tagList(

    # Add settings file modal
    shinyjs::hidden(
      div(
        id = ns(""add_settings_file_modal_%widget_id%""),
        div(
            div(
                tags$h1(i18np$t(""create_settings_file""), style = ""font-size: 14px;""),
                shiny.fluent::IconButton.shinyInput(ns(""close_add_settings_file_modal_%widget_id%""), iconProps = list(iconName = ""ChromeClose"")),
                style = ""display: flex; justify-content: space-between;"",
                class = ""small_close_button""
            ),
            div(shiny.fluent::TextField.shinyInput(ns(""settings_file_name_%widget_id%""), label = i18np$t(""file_name"")), style = ""width: 200px;""),
            div(
                shiny.fluent::PrimaryButton.shinyInput(ns(""add_settings_file_%widget_id%""), i18np$t(""add"")),
                style = ""position: absolute; right: 10px; bottom: 8px;""
            ),
            style = ""background: #fff; padding: 5px 10px 10px 15px; position: relative; width: 400px; height: 120px;""
        ),
        style = ""display: flex; align-items: center; justify-content: center; position: absolute; left: 0; top: 0;  width: 100%; height: 100%; background-color: rgba(0,0,0,0.2); z-index: 1000;""
      )
    ),
    
    # Delete settings file modal
    shinyjs::hidden(
      div(
        id = ns(""delete_settings_file_modal_%widget_id%""),
        div(
            tags$h1(i18np$t(""delete_settings_file_title""), style = ""font-size: 14px;""),
            tags$p(i18np$t(""delete_settings_file_text"")),
            div(
                shiny.fluent::DefaultButton.shinyInput(ns(""close_file_deletion_modal_%widget_id%""), i18np$t(""dont_delete"")),
                div(shiny.fluent::PrimaryButton.shinyInput(ns(""confirm_file_deletion_%widget_id%""), i18np$t(""delete"")), class = ""delete_button""),
                style = ""position: absolute; right: 10px; bottom: 8px; display: flex; gap: 5px;""
            ),
            style = ""background: #fff; padding: 5px 10px 10px 15px; position: relative; width: 400px; height: 120px;""
        ),
        style = ""display: flex; align-items: center; justify-content: center; position: absolute; left: 0; top: 0;  width: 100%; height: 100%; background-color: rgba(0,0,0,0.2); z-index: 1000;""
      )
    ),
    
    # Sidenav
    div(
        id = ns(""settings_files_sidenav_%widget_id%""),
        shiny.fluent::IconButton.shinyInput(ns(""create_settings_file_%widget_id%""), iconProps = list(iconName = ""Add""), title = i18np$t(""create_settings_file""), style = ""margin: 0""),
        class = ""widget_icon"",
        style = ""border-right: solid grey 0.5px;""
    ),
    
    # Dropdown and delete button
    div(
        div(shiny.fluent::Dropdown.shinyInput(ns(""settings_file_%widget_id%""), label = i18np$t(""file""), options = dropdown_options, value = selected_file), style = ""width: 200px""),
        shinyjs::hidden(
            div(
                id = ns(""delete_settings_file_div_%widget_id%""),
                shiny.fluent::IconButton.shinyInput(ns(""delete_settings_file_%widget_id%""), iconProps = list(iconName = ""Delete"")),
                style = ""margin-top: 26px;"", class = ""widget_icon""
            )
        ),
        style = ""display: flex; gap: 5px; margin: 5px 10px;""
    )
)",1,2024-08-28 16:27:54,0
25,plugin,52,"# UI - General settings
#
# Include the UI components for the general settings in this section.
# If you add any fields here, ensure that you also update server_general_settings.R and ui_general_settings.R accordingly.

div(
    tags$strong(i18np$t(""display"")), br(),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""show_settings_file_%widget_id%""), value = toggle_values$show_settings_file),
        tags$label(i18np$t(""show_settings_file""), `for` = ns(""show_settings_file_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 8px;"" 
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""figure_and_settings_side_by_side_%widget_id%""), value = toggle_values$figure_and_settings_side_by_side),
        tags$label(i18np$t(""figure_and_settings_side_by_side""), `for` = ns(""figure_and_settings_side_by_side_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 5px;"" 
    ),
    tags$strong(i18np$t(""code_execution"")), br(),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""run_code_at_settings_file_load_%widget_id%""), value = toggle_values$run_code_at_settings_file_load),
        tags$label(i18np$t(""run_code_at_settings_file_load""), `for` = ns(""run_code_at_settings_file_load_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 8px;"" 
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""run_code_on_data_update_%widget_id%""), value = toggle_values$run_code_on_data_update),
        tags$label(i18np$t(""run_code_on_data_update""), `for` = ns(""run_code_on_data_update_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 5px;"" 
    ),
    style = ""margin: 5px 10px;""
)",1,2024-08-28 16:32:53,0
26,plugin,53,"# UI - Code page

shinyAce::aceEditor(
    ns(""code_%widget_id%""), value = """", mode = ""r"",
    hotkeys = list(
        save = list(win = ""CTRL-S"", mac = ""CTRL-S|CMD-S""),
        run_all = list(win = ""CTRL-SHIFT-ENTER"", mac = ""CTRL-SHIFT-ENTER|CMD-SHIFT-ENTER""),
        comment = list(win = ""CTRL-SHIFT-C"", mac = ""CTRL-SHIFT-C|CMD-SHIFT-C"")
    ),
    autoScrollEditorIntoView = TRUE, height = ""100%"", debounce = 100, fontSize = 11, showPrintMargin = FALSE
)",1,2024-08-28 16:38:44,0
27,plugin,68,"# UI - main file

## Hide save buttons if the user does not have access

if (""projects_console_access"" %in% user_accesses){
    code_button <- shiny.fluent::IconButton.shinyInput(ns(""code_button_%widget_id%""), iconProps = list(iconName = ""Code""), title = i18np$t(""show_code_editor""))
} else code_button <- """"

if (""projects_widgets_settings"" %in% user_accesses){
    save_figure_settings_buttons <- shiny.fluent::IconButton.shinyInput(ns(""save_params_and_code_%widget_id%""), iconProps = list(iconName = ""Save""), title = i18np$t(""save_figure_settings_and_code""), style = ""margin: 0"")
    save_general_settings_button <- shiny.fluent::IconButton.shinyInput(ns(""save_general_settings_button_%widget_id%""), iconProps = list(iconName = ""Save""), title = i18np$t(""save_general_settings""), style = ""margin: 0"")
} else {
    save_figure_settings_buttons <- """"
    save_general_settings_button <- """"   
}

%import_script('ui_load_general_settings.R')%

tagList(
    div(
        shinyjs::hidden(
            div(
                id = ns(""figure_button_div_%widget_id%""),
                shiny.fluent::IconButton.shinyInput(ns(""figure_button_%widget_id%""), iconProps = list(iconName = ""BarChart4""), title = i18np$t(""show_figure""))
            )
        ),
        shiny.fluent::IconButton.shinyInput(ns(""figure_settings_button_%widget_id%""), iconProps = list(iconName = ""AllApps""), title = i18np$t(""show_figure_settings"")),
        code_button,
        shiny.fluent::IconButton.shinyInput(ns(""general_settings_button_%widget_id%""), iconProps = list(iconName = ""Settings""), title = i18np$t(""show_general_settings"")),
        uiOutput(
            ns(""settings_files_ui_%widget_id%""),
            onclick = paste0(""Shiny.setInputValue('"", id, ""-show_settings_files_tab_%widget_id%', Math.random())"")
        ),
        class = ""widget_icon"",
        style = ""display: flex; color: #808080; border-bottom: solid grey 0.5px; height: 28px; padding-top: 5px; font-size: 12px;""
    ),
    div(
        id = ns(""figure_settings_code_div_%widget_id%""),
        div(
            id = ns(""figure_settings_code_sidenav_%widget_id%""),
            shiny.fluent::IconButton.shinyInput(ns(""display_figure_%widget_id%""), iconProps = list(iconName = ""Play""), title = i18np$t(""display_figure""), style = ""margin: 0""),
            save_figure_settings_buttons,
            class = ""widget_icon"",
            style = ""border-right: solid grey 0.5px; width: 25px; margin-right: 10px;""
        ),
        div(
            id = ns(""figure_div_%widget_id%""),
            %import_script('ui_figure.R')%,
            style = paste0(""height: 100%; flex-basis: "", div_width, ""; flex: 1; box-sizing: border-box; min-width: 50px;""),
            class = ""left-panel""
        ),
        div(
            id = ns(""resizer_%widget_id%""),
            style = ""width: 5px; cursor: col-resize; background-color: #ccc;"",
            class = ""resizer""
        ),
        div(
            id = ns(""figure_settings_div_%widget_id%""),
            %import_script('ui_figure_settings.R')%,
            style = paste0(""height: 100%; flex-basis: "", div_width, ""%; margin: 5px 10px; overflow: auto; flex: 1; box-sizing: border-box;"")
        ),
        shinyjs::hidden(
            div(
                id = ns(""code_div_%widget_id%""),
                %import_script('ui_code.R')%,
                style = paste0(""height: 100%; flex-basis: "", div_width, ""%; overflow: auto; flex: 1; box-sizing: border-box;""),
                class = ""right-panel""
            )
        ),
        style = ""display: flex; height: calc(100% - 40px);""
    ),
    shinyjs::hidden(
        div(
            id = ns(""general_settings_div_%widget_id%""),
            div(
                id = ns(""general_settings_sidenav_%widget_id%""),
                save_general_settings_button,
                class = ""widget_icon"",
                style = ""border-right: solid grey 0.5px; width: 25px;""
            ),
            %import_script('ui_general_settings.R')%,
            style = ""display: flex; height: calc(100% - 40px);""
        )
    ),
    shinyjs::hidden(
        div(
            id = ns(""settings_files_div_%widget_id%""),
            %import_script('ui_settings_files.R')%,
            style = ""display: flex; height: calc(100% - 40px);""
        )
    )
)",1,2024-08-28 16:24:47,0
28,plugin,69,"# Server - Main file

# Tabs

## All tabs
tabs <- c(""figure"", ""figure_settings"", ""code"", ""general_settings"")

## Create an observer by tab, show selected tab, hide all others
sapply(tabs, function(tab){

    observeEvent(input[[paste0(tab, ""_button_%widget_id%"")]], {
        %req%
        if (debug) cat(paste0(""\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$"", tab))
        
        tryCatch({
            if (tab == ""general_settings"") shinyjs::hide(""figure_settings_code_div_%widget_id%"")
            else shinyjs::show(""figure_settings_code_div_%widget_id%"")
            
            sapply(paste0(setdiff(c(""figure_settings"", ""code"", ""general_settings""), tab), ""_div_%widget_id%""), shinyjs::hide)
            shinyjs::hide(""settings_files_div_%widget_id%"")
            
            if (tab != ""code"" | (tab == ""code"" & ""projects_console_access"" %in% user_accesses)) shinyjs::show(paste0(tab, ""_div_%widget_id%""))
            
            if (tab %in% c(""figure_settings"", ""code"")){
                if (length(input$figure_and_settings_side_by_side_%widget_id%) > 0) if (input$figure_and_settings_side_by_side_%widget_id%) shinyjs::show(""figure_div_%widget_id%"")
                else shinyjs::hide(""figure_div_%widget_id%"")
                
                shinyjs::show(""figure_settings_code_sidenav_%widget_id%"")
                
                if (tab == ""figure_settings"") anti_tab <- ""code""
                else anti_tab <- ""figure_settings""
                
                shinyjs::runjs(paste0(""
                    var figureSettingsDiv = document.getElementById('"", id, ""-figure_settings_div_%widget_id%');
                    var codeDiv = document.getElementById('"", id, ""-code_div_%widget_id%');
                    
                    if ('"", tab, ""' === 'figure_settings') {
                        figureSettingsDiv.style.flexBasis = codeDiv.style.flexBasis;
                    } else {
                        codeDiv.style.flexBasis = figureSettingsDiv.style.flexBasis;
                    }
                ""))
            }
            else {
                shinyjs::hide(""figure_settings_code_sidenav_%widget_id%"")
                if (tab != ""figure"") shinyjs::hide(""figure_div_%widget_id%"")
            }
            
            # Prevent a bug with scroll into ace editor
            shinyjs::runjs(""var event = new Event('resize'); window.dispatchEvent(event);"")
            
        }, error = function(e) cat(paste0(""\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    })
})

# Figure settings
%import_script('server_figure_settings.R')%

# Code
%import_script('server_code.R')%

# Settings files
%import_script('server_settings_files.R')%

# General settings
%import_script('server_general_settings.R')%",1,2024-08-28 16:24:47,0
29,plugin,70,"base,en,fr
show_figure,Figure,Figure
show_figure_settings,Set up the figure,Paramétrer la figure
show_code_editor,Edit figure code,Editer le code de la figure
show_general_settings,General settings,Paramètres généraux
figure_and_settings_side_by_side,Figure and settings/editor side by side,Figure et paramètres/éditeur côte à côte
display_figure,Display figure,Afficher la figure
save_figure_settings_and_code,Save,Sauvegarder
parameters_not_saved,Parameters not saved,Paramètres non sauvegardés
show_settings_file,Show settings file,Afficher le fichier de sauvegarde
create_settings_file,Create a settings file,Créer un fichier de sauvegarde
delete_settings_file_title,Delete a settings file,Supprimer un fichier de sauvegarde
delete_settings_file_text,Confirm deletion of the settings file?,Confirmer la suppression du fichier de sauvegarde ?
add,Add,Ajouter
file_name,File name,Nom du fichier
file,File,Fichier
provide_valid_name,Provide valid name,Nom valide requis
name_already_used,This name is already used,Ce nom est déjà utilisé
delete,Delete,Supprimer
dont_delete,Cancel,Annuler
no_settings_file_selected,No settings file selected,Pas de fichier de sauvegarde sélectionné
new_settings_file_added,New settings file added,Nouveau fichier de sauvegarde des paramètres ajouté
settings_file_deleted,Settings file deleted,Fichier de sauvegarde des paramètres supprimé
run_code_on_data_update,Run code on data update,Exécuter le code lors de la mise à jour des données
save_general_settings,Save general settings,Sauvegarder les paramètres généraux
display,Display,Affichage
code_execution,Code execution,Exécution du code
run_code_at_settings_file_load,Run code when a settings file is loaded,Exécuter le code au chargement d'un fichier de sauvegarde
error_displaying_figure,Error displaying figure,Erreur lors de l'affichage de la figure
features,Features,Variables
no_data_to_display,No data to display,Pas de données à afficher
concept,Concept,Concept
to,To,Au
data_to_display,Data to display,Données à afficher
patient_data,Patient data,Données du patient
stay_data,Stay data,Données du séjour
select_patient,Select a patient,Sélectionnez un patient
select_stay,Select a stay,Sélectionnez un séjour
concepts_to_display,Concepts to display,Concepts à afficher
all_concepts,All concepts,Tous les concepts
selected_concept_classes,Selected concept classes,Classes de concepts sélectionnées
selected_concepts,Selected concepts,Concepts sélectionnés
concepts,Concepts,Concepts
concept_classes,Concept classes,Classes de concepts
num_cols,Number of columns,Nombre de colonnes
aggregate_fct,Aggregate function,Fonction d'agrégat
min,Min,Minimum
median,Median,Médiane
mean,Mean,Moyenne
max,Max,Maximum
synchronize_timelines,Synchronize timelines,Synchroniser les timelines",1,2024-08-28 16:24:47,0
30,plugin,71,"# Server - Code

# Init code var
m$code_%widget_id% <- """"

# Prevent a bug with scroll into ace editor
shinyjs::delay(300, shinyjs::runjs(""var event = new Event('resize'); window.dispatchEvent(event);""))

# Comment code
observeEvent(input$code_%widget_id%_comment, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_comment""))

    tryCatch({
        lines <- strsplit(input$code_%widget_id%, ""\\n"")[[1]]
        req(length(lines) > 0)
        
        start_row <- input$code_%widget_id%_comment$range$start$row + 1
        end_row <- input$code_%widget_id%_comment$range$end$row + 1
        
        for (i in start_row:end_row) if (startsWith(lines[i], ""# "")) lines[i] <- substr(lines[i], 3, nchar(lines[i])) else lines[i] <- paste0(""# "", lines[i])
        
        shinyAce::updateAceEditor(session, ""code_%widget_id%"", value = paste0(lines, collapse = ""\\n""))
        
        shinyjs::runjs(sprintf(""
            var editor = ace.edit('%s-rode');
            editor.moveCursorTo(%d, %d);
            editor.focus();
        "", id, input$code_%widget_id%_comment$range$end$row, input$code_%widget_id%_comment$range$end$column))
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Run all code with shortcut
observeEvent(input$code_%widget_id%_run_all, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_run_all""))

    m$code_%widget_id% <- input$code_%widget_id%
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
})

# Run code when button is clicked
observeEvent(input$display_figure_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$display_figure""))
    
    m$code_%widget_id% <- input$code_%widget_id%
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
})

# Run code at patient update
observeEvent(m$selected_person, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$selected_person""))
    
    if (isTRUE(input$run_code_on_data_update_%widget_id%) && length(input$data_source_%widget_id%) > 0 && input$data_source_%widget_id% == ""person""){
        
        tryCatch({
        
            # Reset synchronized datetimes
            m$datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactive(m$datetimes_timeline_%tab_id%()) %>% debounce(500)
            
            # Run code
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
            
         }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    }
})

# Run code at visit_detail update
observeEvent(m$selected_visit_detail, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$selected_visit_detail""))
    
    if (isTRUE(input$run_code_on_data_update_%widget_id%) && length(input$data_source_%widget_id%) > 0 && input$data_source_%widget_id% == ""visit_detail""){
        
        tryCatch({
        
            # Reset synchronized datetimes
            m$datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactive(m$datetimes_timeline_%tab_id%()) %>% debounce(500)
            
            # Run code
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
            
         }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    }
})

# Run code
observeEvent(input$run_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_code""))
    
    tryCatch({
        
        data_source <- ""visit_detail""
        if (length(input$data_source_%widget_id%) > 0) data_source <- input$data_source_%widget_id%
        
        if ((data_source == ""person"" & is.na(m$selected_person)) | (data_source == ""visit_detail"" & is.na(m$selected_visit_detail))){
            
            if (data_source == ""person"" & is.na(m$selected_person)) output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""select_patient""), messageBarType = 5), style = ""display: inline-block;""))
            else if (data_source == ""visit_detail"" & is.na(m$selected_visit_detail)) output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""select_stay""), messageBarType = 5), style = ""display: inline-block;""))
            
            sapply(c(""datatable_%widget_id%"", ""datetime_slider_div_%widget_id%""), shinyjs::hide)
            shinyjs::show(""error_message_div_%widget_id%"")
            
        } else {
        
            data <- d[[paste0(""data_"", data_source)]]$measurement
            
            if (length(input$concepts_choice_%widget_id%) > 0){
                if (input$concepts_choice_%widget_id% == ""selected_concept_classes""){
                    if (data %>% dplyr::count() %>% dplyr::pull() > 0) data <- 
                        data %>%
                        dplyr::collect() %>%
                        dplyr::inner_join(d$concept %>% dplyr::select(measurement_concept_id = concept_id, concept_class_id), by = ""measurement_concept_id"") %>%
                        dplyr::filter(concept_class_id %in% input$concept_classes_%widget_id%) %>%
                        dplyr::select(-concept_class_id)
                }
                else if (input$concepts_choice_%widget_id% == ""selected_concepts""){
                    if (data %>% dplyr::count() %>% dplyr::pull() > 0) data <- data %>% dplyr::filter(measurement_concept_id %in% input$concepts_%widget_id%)
                }
            }
            
            if (data %>% dplyr::count() %>% dplyr::pull() == 0){
                
                output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""no_data_to_display""), messageBarType = 5), style = ""display: inline-block;""))
                
                sapply(c(""datatable_%widget_id%"", ""datetime_slider_div_%widget_id%""), shinyjs::hide)
                shinyjs::show(""error_message_div_%widget_id%"")
            } else {
                
                shinyjs::hide(""error_message_div_%widget_id%"")
                sapply(c(""datatable_%widget_id%"", ""datetime_slider_div_%widget_id%""), shinyjs::show)
                
                if (length(input$num_cols_%widget_id%) > 0) num_cols <- input$num_cols_%widget_id%
                else num_cols <- 8
                
                if (length(input$aggregate_fct_%widget_id%) > 0) aggregate_fct <- input$aggregate_fct_%widget_id%
                else aggregate_fct <- 8
                
                
                if (data_source == ""person"") {
                    data_datetimes_range     <- 
                        d$data_person$visit_occurrence %>%
                        dplyr::summarize(
                            min_visit_start_datetime = min(visit_start_datetime, na.rm = TRUE),
                            max_visit_end_datetime = max(visit_end_datetime, na.rm = TRUE)
                        ) %>%
                        dplyr::collect()
                }
                else if (data_source == ""visit_detail"") {
                    selected_visit_detail <- m$selected_visit_detail
                    
                    data_datetimes_range <- 
                        d$data_person$visit_detail %>%
                        dplyr::filter(visit_detail_id == selected_visit_detail) %>%
                        dplyr::summarize(
                            min_visit_start_datetime = min(visit_detail_start_datetime, na.rm = TRUE),
                            max_visit_end_datetime = max(visit_detail_end_datetime, na.rm = TRUE)
                        ) %>%
                        dplyr::collect()
                }
                
                data_datetimes_range <- c(data_datetimes_range$min_visit_start_datetime, data_datetimes_range$max_visit_end_datetime)
                m$data_datetimes_range_%widget_id% <- data_datetimes_range
                
                if (isTRUE(input$synchronize_timelines_%widget_id%) && length(m$debounced_datetimes_timeline_%tab_id%()) > 0) datetimes <- m$debounced_datetimes_timeline_%tab_id%()
                else {
                    datetimes <- data_datetimes_range
                    if (length(m$debounced_datetime_slider_%widget_id%()) > 0) {
                        if (m$debounced_datetime_slider_%widget_id%()[[1]] >= data_datetimes_range[[1]] & m$debounced_datetime_slider_%widget_id%()[[2]] <= data_datetimes_range[[2]]){
                            datetimes <- m$debounced_datetime_slider_%widget_id%()
                        }
                    }
                }
                
                m$datetimes_%widget_id% <- datetimes
                
                updateSliderInput(
                    session, ""datetime_slider_%widget_id%"", min = data_datetimes_range[[1]], max = data_datetimes_range[[2]],
                    value = datetimes,
                    timeFormat = ifelse(language == ""fr"", ""%d-%m-%Y %H:%M"", ""%Y-%m-%d %H:%M""), step = 3600000
                )
                
                data <-
                    data %>%
                    dplyr::collect() %>%
                    dplyr::left_join(
                        d$concept %>% 
                        dplyr::select(measurement_concept_id = concept_id, measurement_concept_name = concept_name),
                        by = ""measurement_concept_id""
                    ) %>%
                    dplyr::select(measurement_concept_name, measurement_datetime, value_as_number) %>%
                    dplyr::arrange(measurement_concept_name, measurement_datetime)
                
                interval_duration <- as.numeric(difftime(datetimes[[2]], datetimes[[1]], units = ""secs"")) / num_cols
                
                if (language == ""fr"") date_format <- ""%d-%m-%Y""
                else date_format <- ""%Y-%m-%d""
                
                intervals <- tibble::tibble(
                    interval = 0:(num_cols - 1),
                    interval_start = datetimes[[1]] + interval * interval_duration,
                    interval_end = interval_start + interval_duration
                ) %>%
                dplyr::mutate(
                    interval_label = paste(
                        format(interval_start, date_format),
                        "" <span style='color:#0084D8'>"", format(interval_start, ""%H:%M""), ""</span>"",
                        "" "", tolower(i18np$t(""to"")), "" "",
                        format(interval_end, date_format),
                        "" <span style='color:#0084D8'>"", format(interval_end, ""%H:%M""), ""</span>""
                    )
                )
                
                data <-
                    data %>%
                    dplyr::mutate(
                        interval = floor(as.numeric(difftime(measurement_datetime, datetimes[[1]], units = ""secs"")) / interval_duration)
                    ) %>%
                    dplyr::group_by(measurement_concept_name, interval) %>%
                    dplyr::summarize(
                        agg_value = round(do.call(aggregate_fct, list(value_as_number, na.rm = TRUE)), 1),
                        n = sum(!is.na(value_as_number)),
                        .groups = ""drop""
                    ) %>%
                    dplyr::mutate(agg_value = paste0(agg_value, "" (n = "", n, "")"")) %>%
                    dplyr::right_join(intervals, by = ""interval"") %>%
                    dplyr::select(measurement_concept_name, interval_label, agg_value) %>%
                    tidyr::pivot_wider(
                        names_from = interval_label,
                        values_from = agg_value
                    ) %>%
                    dplyr::arrange(measurement_concept_name) %>%
                    dplyr::rename(!!i18np$t(""concept"") := measurement_concept_name) %>%
                    dplyr::filter(!is.na(!!rlang::sym(i18np$t(""concept""))) & !!rlang::sym(i18np$t(""concept"")) != """")
                    
                # Reorder date columns (works also with french date format)
                date_cols <- names(data)[-1]
                sorted_date_cols <- date_cols[order(as.Date(
                    gsub("" <.*$"", """", date_cols),
                    format = date_format
                ))]
                
                data <-
                    data %>%
                    dplyr::relocate(all_of(sorted_date_cols), .after = 1)
                
                output$datatable_%widget_id% <- DT::renderDT({
                    row_count <- nrow(data)
                
                    DT::datatable(
                        data,
                        rownames = FALSE,
                        options = list(
                            dom = if (row_count > 10) ""<'datatable_length'l><'top't><'bottom'p>"" else ""<'top't>"",
                            pageLength = if (row_count > 10) 25 else 10,
                            paging = row_count > 10,
                            compact = TRUE, 
                            hover = TRUE
                        ),
                        escape = FALSE,
                        
                        # CSS for datatable
                        callback = htmlwidgets::JS(
                          ""table.on('draw.dt', function() {"",
                          ""  $('.dataTable tbody tr td').css({"",
                          ""    'height': '12px',"",
                          ""    'padding': '2px 5px'"",
                          ""  });"",
                          ""  $('.dataTable thead tr td div .form-control').css('font-size', '12px');"",
                          ""  $('.dataTable thead tr td').css('padding', '5px');"",
                          ""  $('.dataTable tbody tr td:first-child').css({"",
                          ""    'min-width': '100px',"",
                          ""    'max-width': '100px',"",
                          ""    'width': '100px',"",
                          ""    'white-space': 'nowrap'"",
                          ""  });"",
                          ""  $('.dataTable thead tr th:first-child').css({"",
                          ""    'min-width': '100px',"",
                          ""    'max-width': '100px',"",
                          ""    'width': '100px',"",
                          ""    'white-space': 'nowrap'"",
                          ""  });"",
                          """",
                          ""  $('.dataTable tbody td').each(function() {"",
                          ""    var cellText = $(this).text();"",
                          ""    $(this).attr('title', cellText);"",
                          ""  });"",
                          ""});""
                        )
                    )
                })
            }
        }
        
        # Go to figure tab
        if (!input$figure_and_settings_side_by_side_%widget_id%) shinyjs::click(""figure_button_%widget_id%"")
        
    }, error = function(e){
        show_message_bar(output, ""error_displaying_figure"", ""severeWarning"", i18n = i18np, ns = ns)
        cat(paste0(""\\n"", now(), "" - widget %widget_id% - input$display_figure - error = "", toString(e)))
    })
})

# Save code with shortcut
observeEvent(input$code_%widget_id%_save, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_save""))
    
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_params_and_code_%widget_id%', Math.random());""))
})

# Adjust CSS of datetime sliderInput

# shinyjs::delay(100, shinyjs::runjs(paste0(""
#     function adjustSliderLabels_%widget_id%() {
#         const toLabel = document.querySelector('#"", id, ""-datetime_slider_div_%widget_id% .irs-to');
#         const singleLabel = document.querySelector('#"", id, ""-datetime_slider_div_%widget_id% .irs-single');
#     
#         if (toLabel) {
#             const toLeft = parseFloat(toLabel.style.left);
#             if (toLeft > 72) {
#                 toLabel.style.left = '72%';
#             }
#         }
#     
#         if (singleLabel) {
#             const singleLeft = parseFloat(singleLabel.style.left);
#             if (singleLeft < 0) {
#                 singleLabel.style.left = '0%';
#             } else if (singleLeft > 32) {
#                 singleLabel.style.left = '32%';
#             }
#         }
#     }
#     
#     window.observeSliderChanges_%widget_id% = function() {
#         const toLabel = document.querySelector(('#"", id, ""-datetime_slider_div_%widget_id% .irs-to');
#         const singleLabel = document.querySelector(('#"", id, ""-datetime_slider_div_%widget_id% .irs-single');
#         
#         if (toLabel) {
#             const observer = new MutationObserver(adjustSliderLabels);
#             
#             observer.observe(fromLabel, { attributes: true, attributeFilter: ['style'] });
#             observer.observe(toLabel, { attributes: true, attributeFilter: ['style'] });
#             
#             if (singleLabel) {
#                 observer.observe(singleLabel, { attributes: true, attributeFilter: ['style'] });
#             }
#             
#             adjustSliderLabels_%widget_id%();
#         }
#     }
#     
#     observeSliderChanges_%widget_id%();
# "")))",1,2024-08-28 16:26:07,0
31,plugin,72,"# Server - Figure settings

# Load figure settings

observeEvent(input$load_figure_settings_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$load_figure_settings""))
    
    # Update figure settings UI
    
    link_id <- input$settings_file_%widget_id%
    sql <- glue::glue_sql(""SELECT name, value, value_num FROM widgets_options WHERE widget_id = %widget_id% AND category = 'figure_settings' AND link_id = {link_id}"", .con = m$db)
    figure_settings <- DBI::dbGetQuery(m$db, sql)
    
    if (nrow(figure_settings) > 0){
        sapply(figure_settings$name, function(name){
        
            value <- figure_settings %>% dplyr::filter(name == !!name) %>% dplyr::pull(value)
            value_num <- figure_settings %>% dplyr::filter(name == !!name) %>% dplyr::pull(value_num)
            
            if (name %in% c(""data_source"", ""concepts_choice"", ""aggregate_fct"")) shiny.fluent::updateDropdown.shinyInput(session, paste0(name, ""_%widget_id%""), value = value)
            else if (name %in% c(""concepts"", ""concept_classes"")){
                value <- unlist(strsplit(value, "", ""))
                if (name == ""concepts"") value <- as.numeric(value)
                shiny.fluent::updateDropdown.shinyInput(session, paste0(name, ""_%widget_id%""), value = value)
            }
            else if (name == ""num_cols"") shiny.fluent::updateSpinButton.shinyInput(session, paste0(name, ""_%widget_id%""), value = value_num)
            else if (name == ""synchronize_timelines""){
                value <- as.logical(value_num)
                shiny.fluent::updateToggle.shinyInput(session, paste0(name, ""_%widget_id%""), value = value)
            }
        })
    }
    
    # Run code if toggle is activated
    if (length(input$run_code_at_settings_file_load_%widget_id%) > 0){
        if (input$run_code_at_settings_file_load_%widget_id%){
           shinyjs::delay(500, shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-display_figure_%widget_id%', Math.random());"")))
       }
    }
})

# Save current settings

observeEvent(input$save_params_and_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_params_and_code""))
    
    tryCatch({
    
        # If no settings file is selected, go to settings files management page
        if (length(input$settings_file_%widget_id%) == 0) shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-show_settings_files_tab_%widget_id%', Math.random());""))
        
        if (length(input$settings_file_%widget_id%) > 0){
            
            link_id <- input$settings_file_%widget_id%
        
            # Delete old settings
            sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND category = 'figure_settings' AND link_id = {link_id}"", .con = m$db))
            
            # Add new settings in db
            new_data <- tibble::tribble(
                ~name, ~value, ~value_num,
                ""data_source"", input$data_source_%widget_id%, NA_real_,
                ""concepts_choice"", input$concepts_choice_%widget_id%, NA_real_,
                ""concept_classes"", input$concept_classes_%widget_id% %>% toString(), NA_real_,
                ""concepts"", input$concepts_%widget_id% %>% toString(), NA_real_,
                ""num_cols"", NA_character_, input$num_cols_%widget_id%,
                ""aggregate_fct"", input$aggregate_fct_%widget_id%, NA_real_,
                ""synchronize_timelines"", NA_character_, as.integer(input$synchronize_timelines_%widget_id%)
            )
            
            new_data <-
                new_data %>%
                dplyr::transmute(
                    id = get_last_row(m$db, ""widgets_options"") + 1:nrow(new_data), widget_id = %widget_id%, person_id = NA_integer_, link_id = link_id,
                    category = ""figure_settings"", name, value, value_num, creator_id = m$user_id, datetime = now(), deleted = FALSE
                )
            
            DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
            
            # Notify user
            show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Show / hide concepts_div and concept_classes_div

observeEvent(input$concepts_choice_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$concepts_choice_""))
    
   
    if (input$concepts_choice_%widget_id% == ""selected_concepts""){
        shinyjs::hide(""concept_classes_div_%widget_id%"")
        shinyjs::show(""concepts_div_%widget_id%"")
    }
    else if (input$concepts_choice_%widget_id% == ""selected_concept_classes""){
        shinyjs::hide(""concepts_div_%widget_id%"")
        shinyjs::show(""concept_classes_div_%widget_id%"")
    }
    else sapply(c(""concepts_div_%widget_id%"", ""concept_classes_div_%widget_id%""), shinyjs::hide)
})

# Synchronize timelines

# Create a reactiveVal with timeline datetimes
if (length(m$datetimes_timeline_%tab_id%) == 0){
    m$datetimes_timeline_%tab_id% <- reactiveVal()
    m$debounced_datetimes_timeline_%tab_id% <- reactive(m$datetimes_timeline_%tab_id%()) %>% debounce(500)
}

m$debounced_datetime_slider_%widget_id% <- reactive(input$datetime_slider_%widget_id%) %>% debounce(500)

observeEvent(m$debounced_datetime_slider_%widget_id%(), {
    %req%
    req(length(m$debounced_datetime_slider_%widget_id%()) > 0)
    req(length(m$datetimes_%widget_id%[[1]]) > 0)
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$debounced_datetime_slider""))
    
    tryCatch({
        m$datetimes_timeline_%tab_id%(m$debounced_datetime_slider_%widget_id%() %>% as.POSIXct())
        
        if (
            isFALSE(input$synchronize_timelines_%widget_id%) &
            (abs(as.numeric(m$debounced_datetime_slider_%widget_id%()[[1]]) - as.numeric(m$datetimes_%widget_id%[[1]])) > 5 |
            abs(as.numeric(m$debounced_datetime_slider_%widget_id%()[[2]]) - as.numeric (m$datetimes_%widget_id%[[2]])) > 5)){
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
        }
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

observeEvent(m$debounced_datetimes_timeline_%tab_id%(), {
    %req%
    req(input$synchronize_timelines_%widget_id%)
    req(length(m$debounced_datetimes_timeline_%tab_id%()) > 0)
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$debounced_datetimes_timeline""))
    
    tryCatch({
        
        if (
            abs(as.numeric(m$debounced_datetimes_timeline_%tab_id%()[[1]]) - as.numeric(m$datetimes_%widget_id%[[1]])) > 5 |
            abs(as.numeric(m$debounced_datetimes_timeline_%tab_id%()[[2]]) - as.numeric (m$datetimes_%widget_id%[[2]])) > 5){
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
}, ignoreInit = TRUE)",1,2024-08-28 16:26:24,0
32,plugin,73,"# Server - General settings

# Settings / editor side-by-side with figure

observeEvent(input$figure_and_settings_side_by_side_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$figure_and_settings_side_by_side""))
    
    tryCatch({
        if (input$figure_and_settings_side_by_side_%widget_id%){
            shinyjs::runjs(paste0(""
                $('#"", id, ""-figure_div_%widget_id%').css('flex-basis', '50%');
                $('#"", id, ""-figure_settings_div_%widget_id%').css('flex-basis', '50%');
                $('#"", id, ""-code_div_%widget_id%').css('flex-basis', '50%');
                
                if (!window.resizingInitialized_%widget_id%) {
                    var container = document.getElementById('"", id, ""-figure_settings_code_div_%widget_id%');
                    
                    var isResizing = false;
                    var lastDownX = 0;
                    
                    var leftPanel = container.querySelector('.left-panel');
                    var figureSettingsPanel = document.getElementById('"", id, ""-figure_settings_div_%widget_id%');
                    var codePanel = document.getElementById('"", id, ""-code_div_%widget_id%');
                    var resizer = container.querySelector('.resizer');
                    
                    function triggerResizeEvent() {
                        var event = new Event('resize');
                        window.dispatchEvent(event);
                    }
                    
                    resizer.addEventListener('mousedown', function(e) {
                        isResizing = true;
                        lastDownX = e.clientX;
                
                        document.addEventListener('mousemove', resizePanels);
                        document.addEventListener('mouseup', stopResizing);
                    });
                    
                    function resizePanels(e) {
                        if (!isResizing) return;
                        
                        var offsetLeftPanel = leftPanel.offsetWidth;
                        var offsetFigureSettingsPanel = figureSettingsPanel.offsetWidth;
                        var offsetCodePanel = codePanel.offsetWidth;
                        var deltaX = e.clientX - lastDownX;
                        
                        leftPanel.style.flexBasis = (offsetLeftPanel + deltaX) + 'px';
                        
                        figureSettingsPanel.style.flexBasis = (offsetFigureSettingsPanel - deltaX) + 'px';
                        codePanel.style.flexBasis = (offsetCodePanel - deltaX) + 'px';
                
                        lastDownX = e.clientX;
                        triggerResizeEvent();
                    }
                    
                    function stopResizing(e) {
                        isResizing = false;
                        document.removeEventListener('mousemove', resizePanels);
                        document.removeEventListener('mouseup', stopResizing);
                        triggerResizeEvent();
                    }
                }
                
                window.resizingInitialized_%widget_id% = true;
            ""))
            shinyjs::hide(""figure_button_div_%widget_id%"")
            shinyjs::show(""resizer_%widget_id%"")
        }
        else {
            shinyjs::runjs(paste0(""
                $('#"", id, ""-figure_div_%widget_id%').css('flex-basis', '100%');
                $('#"", id, ""-figure_settings_div_%widget_id%').css('flex-basis', '100%');
                $('#"", id, ""-code_div_%widget_id%').css('flex-basis', '100%');
            ""))
            
            shinyjs::show(""figure_button_div_%widget_id%"");
            shinyjs::hide(""resizer_%widget_id%"");
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Save general settings in db

observeEvent(input$save_general_settings_button_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_general_settings_button""))
    
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_general_settings_%widget_id%', Math.random());""))
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

observeEvent(input$save_general_settings_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_general_settings""))
    
    tryCatch({
    
        # Delete old rows
        sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND category = 'general_settings'"", .con = m$db))
        
        file_id <- input$settings_file_%widget_id%
        new_data <- tibble::tibble(name = ""selected_file_id"", value = NA_character_, value_num = NA_integer_, link_id = file_id)
        
        general_settings <- c(""show_settings_file"", ""figure_and_settings_side_by_side"", ""run_code_on_data_update"", ""run_code_at_settings_file_load"")
        
        sapply(general_settings, function(name){
            toggle_value <- 0L
            input_name <- paste0(name, ""_%widget_id%"")
            if (length(input[[input_name]]) > 0) if (input[[input_name]]) toggle_value <- 1L
            new_data <<- new_data %>% dplyr::bind_rows(tibble::tibble(name = name, value = NA_character_, value_num = toggle_value, link_id = NA_integer_))
        })
        
        new_data <-
            new_data %>%
            dplyr::transmute(
                id = get_last_row(m$db, ""widgets_options"") + 1:(length(general_settings) + 1), widget_id = %widget_id%, person_id = NA_integer_, link_id,
                category = ""general_settings"", name, value, value_num, creator_id = m$user_id, datetime = now(), deleted = FALSE
            )
        
        DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-08-28 16:26:46,0
33,plugin,74,"# Server - Settings files management

settings_files_ui_style <- paste0(
    ""display: inline-block; color: white; max-width: 250px; border-radius: 8px; padding: 1px 5px; align-items: center;"",
    ""height: 18px; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; cursor: pointer; margin: 2px 5px;""
)

output$settings_files_ui_%widget_id% <- renderUI({
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer output$settings_files""))
    
    div(i18np$t(""no_settings_file_selected""), style = paste0(settings_files_ui_style, ""background-color: #606060ab;""))
})

## Show / hide settings file
observeEvent(input$show_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_settings_file""))
    
    if (input$show_settings_file_%widget_id%) shinyjs::show(""settings_files_ui_%widget_id%"")
    else shinyjs::hide(""settings_files_ui_%widget_id%"")
})

## Show / hide settings files div
observeEvent(input$show_settings_files_tab_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_settings_files_tab""))
    
    sapply(c(paste0(tabs, ""_div_%widget_id%""), ""figure_settings_code_div_%widget_id%""), shinyjs::hide)
    shinyjs::show(""settings_files_div_%widget_id%"")
})

## Show add settings file modal
observeEvent(input$create_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$create_settings_file""))
    
    shinyjs::show(""add_settings_file_modal_%widget_id%"")
})

## Close add settings file modal
observeEvent(input$close_add_settings_file_modal_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$close_add_settings_file_modal""))
    
    shinyjs::hide(""add_settings_file_modal_%widget_id%"")
})

## Confirm creation of settings file
observeEvent(input$add_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$add_settings_file""))
    
    tryCatch({
        file_name <- input$settings_file_name_%widget_id%
        
        # Check if name if empty
        empty_name <- TRUE
        if (length(file_name) > 0) if (!is.na(file_name) & file_name != """") empty_name <- FALSE
        if (empty_name) shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = i18np$t(""provide_valid_name""))
        else {
        
            shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = NULL)
            
            # Check if name is already used
            sql <- glue::glue_sql(""SELECT name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name' AND LOWER(value) = {tolower(file_name)}"", .con = m$db)
            name_already_used <- nrow(DBI::dbGetQuery(m$db, sql) > 0)
            
            if (name_already_used) shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = i18np$t(""name_already_used""))
            else {
                
                new_id <- get_last_row(m$db, ""widgets_options"") + 1
                
                # Add settings file in database
                new_data <- tibble::tibble(
                    id = new_id, widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
                    category = ""settings_files"", name = ""file_name"", value = file_name, value_num = NA_real_, creator_id = m$user_id, datetime = now(), deleted = FALSE
                )
                DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
                
                # Reset fields
                shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", value = """")
                
                # Update dropdown
                shiny.fluent::updateDropdown.shinyInput(session, ""settings_file_%widget_id%"", value = new_id)
                shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-reload_dropdown_%widget_id%', Math.random());""))
                
                # Close modal
                shinyjs::hide(""add_settings_file_modal_%widget_id%"")
                
                # Notify user
                show_message_bar(output, ""new_settings_file_added"", ""success"", i18n = i18np, ns = ns)
            }
        }
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## Update dropdown
observeEvent(input$reload_dropdown_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$settings_file""))
    
    tryCatch({
        sql <- glue::glue_sql(""SELECT id, value AS name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name'"", .con = m$db)
        m$settings_filenames_%widget_id% <- DBI::dbGetQuery(m$db, sql)
        
        dropdown_options <- convert_tibble_to_list(m$settings_filenames_%widget_id%, key_col = ""id"", text_col = ""name"")
        shiny.fluent::updateDropdown.shinyInput(session, ""settings_file_%widget_id%"", options = dropdown_options)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## A settings file is selected
observeEvent(input$settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$settings_file""))
    
    tryCatch({
    
        # Show delete button
        shinyjs::show(""delete_settings_file_div_%widget_id%"")
    
        # Get file name
        file_id <- input$settings_file_%widget_id%
        filename <- m$settings_filenames_%widget_id% %>% dplyr::filter(id == file_id) %>% dplyr::pull(name)
        
        output$settings_files_ui_%widget_id% <- renderUI(div(filename, style = paste0(settings_files_ui_style, ""background-color: #1d94ce;"")))
        
        # Save that this file is selected
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_general_settings_%widget_id%', Math.random());""))
        
        # Load saved settings
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-load_figure_settings_%widget_id%', Math.random());""))
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## Open delete a settings file modal
observeEvent(input$delete_settings_file_%widget_id%, {
    %req%
    req(length(input$settings_file_%widget_id%) > 0)
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$delete_settings_file""))
    
    shinyjs::show(""delete_settings_file_modal_%widget_id%"")
})

## Close delete a settings file modal
observeEvent(input$close_file_deletion_modal_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$close_file_deletion_modal""))
    
    shinyjs::hide(""delete_settings_file_modal_%widget_id%"")
})

## Confirm settings file deletion
observeEvent(input$confirm_file_deletion_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$confirm_file_deletion""))
    
    tryCatch({
        file_id <- input$settings_file_%widget_id%
        
        # Delete row in db
        sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE id = {file_id}"", .con = m$db))
        
        # Update dropdown
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-reload_dropdown_%widget_id%', Math.random());""))
        
        # Close modal
        shinyjs::hide(""delete_settings_file_modal_%widget_id%"")
        
        # Update selected settings file UI
        output$settings_files_ui_%widget_id% <- renderUI(div(i18np$t(""no_settings_file_selected""), style = paste0(settings_files_ui_style, ""background-color: #606060ab;"")))
        
        # Hide delete button
        shinyjs::hide(""delete_settings_file_div_%widget_id%"")
        
        # Notify user
        show_message_bar(output, ""settings_file_delete"", ""warning"", i18n = i18np, ns = ns)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-08-28 16:26:57,0
34,plugin,75,"# UI - Figure settings
#
# Insert the UI components for configuring the figure settings in this section.

div(
    div(
        shiny.fluent::Dropdown.shinyInput(
            ns(""data_source_%widget_id%""), options = list(
                list(key = ""person"", text = i18np$t(""patient_data"")),
                list(key = ""visit_detail"", text = i18np$t(""stay_data""))
            ), value = ""visit_detail"", label = i18np$t(""data_to_display"")
        ),
        style = ""width: 200px;""
    ),
    div(
        div(
            shiny.fluent::Dropdown.shinyInput(
                ns(""concepts_choice_%widget_id%""), options = list(
                    list(key = ""all_concepts"", text = i18np$t(""all_concepts"")),
                    list(key = ""selected_concept_classes"", text = i18np$t(""selected_concept_classes"")),
                    list(key = ""selected_concepts"", text = i18np$t(""selected_concepts""))
                ), value = ""selected_concepts"", label = i18np$t(""concepts_to_display"")
            ),
            style = ""width: 200px;""
        ),
        shinyjs::hidden(
            div(
                id = ns(""concept_classes_div_%widget_id%""),
                div(
                    shiny.fluent::Dropdown.shinyInput(
                        ns(""concept_classes_%widget_id%""), label = i18np$t(""concept_classes""),
                        options = convert_tibble_to_list(
                            d$concept %>% dplyr::filter(domain_id == ""Measurement"") %>% dplyr::distinct(concept_class_id),
                            key_col = ""concept_class_id"", text_col = ""concept_class_id""
                        ),
                        multiSelect = TRUE
                    ),
                    style = ""width: 200px;""
                )
            )
        ),
        shinyjs::hidden(
            div(
                id = ns(""concepts_div_%widget_id%""),
                div(
                    shiny.fluent::Dropdown.shinyInput(
                        ns(""concepts_%widget_id%""), label = i18np$t(""concepts""),
                        options = convert_tibble_to_list(
                            selected_concepts %>% dplyr::filter(domain_id == ""Measurement""),
                            key_col = ""concept_id"", text_col = ""concept_name""
                        ),
                        multiSelect = TRUE
                    ),
                    style = ""width: 200px;""
                )
            )
        ),
        style = ""display: flex; gap: 10px; padding-bottom: 15px; border-bottom: solid 1px #808080;""
    ),
    div(
        div(i18np$t(""num_cols""), style = ""font-weight: 600; margin-bottom: 5px;""),
        div(shiny.fluent::SpinButton.shinyInput(ns(""num_cols_%widget_id%""), min = 1, max = 20, by = 1, value = 8), style = ""width: 200px;""),
        style = ""margin-top: 10px;""
    ),
    div(
        shiny.fluent::Dropdown.shinyInput(ns(""aggregate_fct_%widget_id%""), label = ""Aggregated function"", value = ""mean"", options = list(
            list(key = ""min"", text = i18np$t(""min"")),
            list(key = ""mean"", text = i18np$t(""mean"")),
            list(key = ""median"", text = i18np$t(""median"")),
            list(key = ""max"", text = i18np$t(""max""))
        )),
        style = ""width: 200px; padding-bottom: 15px; border-bottom: solid 1px #808080;""
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""synchronize_timelines_%widget_id%""), label = i18np$t(""synchronize_timelines"")),
        style = ""margin-top: 15px;""
    )
)",1,2024-08-28 16:27:17,0
35,plugin,76,"# UI - Figure page
#
# Insert the UI components for the figure in this section.

div(
    shinyjs::hidden(
        div(
            id = ns(""error_message_div_%widget_id%""),
            uiOutput(ns(""error_message_%widget_id%"")),
            style = ""padding-top: 10px;""
        )
    ),
    div(
        DT::DTOutput(ns(""datatable_%widget_id%"")),
        style = ""padding: 5px 5px 0 5px; position: relative; z-index: 100;""
    ),
    shinyjs::hidden(
        div(
            id = ns(""datetime_slider_div_%widget_id%""),
            sliderInput(
                ns(""datetime_slider_%widget_id%""),
                label = NULL,
                ticks = FALSE,
                min = as.Date(""1970-01-01""),
                max = Sys.Date(),
                value = c(as.Date(""1970-01-01""), Sys.Date()),
                timezone = ""+0000"",
                width = ""100%""
            ),
            style = ""width: calc(100% - 130px); padding-left: 130px; overflow: hidden; position: relative; top: -10px;""
        )
    ),
    style = ""width: 100%; height: 100%; overflow: auto; box-sizing: border-box;""
)",1,2024-08-28 16:27:31,0
36,plugin,77,"# UI - Load general settings
#
# Insert the UI components for configuring the figure settings here.

sql <- glue::glue_sql(""SELECT link_id, name, value, value_num FROM widgets_options WHERE widget_id = %widget_id% AND category = 'general_settings'"", .con = m$db)
general_settings <- DBI::dbGetQuery(m$db, sql)

toggle_values <- list()

if (nrow(general_settings) == 0){

    toggle_values$show_settings_file <- TRUE
    toggle_values$figure_and_settings_side_by_side <- TRUE
    toggle_values$run_code_on_data_update <- FALSE
    toggle_values$run_code_at_settings_file_load <- FALSE
    
    dropdown_options <- list()
    selected_file <- NULL
    
} else if (nrow(general_settings) > 0){

    # Toggles values
    
    general_settings_vec <- c(""show_settings_file"", ""figure_and_settings_side_by_side"", ""run_code_on_data_update"", ""run_code_at_settings_file_load"")
    
    sapply(general_settings_vec, function(name){
        
        toggle_value <- FALSE
        
        row <- general_settings %>% dplyr::filter(name == !!name)
        if (nrow(row) > 0){
            if (is.na(row %>% dplyr::pull(value_num))) toggle_value <- FALSE
            else (toggle_value <- as.logical(row %>% dplyr::pull(value_num)))
        }
        
        toggle_values[[name]] <<- toggle_value
    })
    
    # Selected settings file
    
    sql <- glue::glue_sql(""SELECT id, value AS name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name'"", .con = m$db)
    m$settings_filenames_%widget_id% <- DBI::dbGetQuery(m$db, sql)
    dropdown_options <- convert_tibble_to_list(m$settings_filenames_%widget_id%, key_col = ""id"", text_col = ""name"")
    selected_file <- general_settings %>% dplyr::filter(name == ""selected_file_id"") %>% dplyr::pull(link_id)
}

if (toggle_values$figure_and_settings_side_by_side) div_width <- ""50%"" else div_width <- ""100%""",1,2024-08-28 16:27:41,0
37,plugin,78,"# UI - Settings files
#
# This code corresponds to the page that appears when you click on the file icon at the top of the widget.
# The UI allows you to select, add, and delete settings files.

tagList(

    # Add settings file modal
    shinyjs::hidden(
      div(
        id = ns(""add_settings_file_modal_%widget_id%""),
        div(
            div(
                tags$h1(i18np$t(""create_settings_file""), style = ""font-size: 14px;""),
                shiny.fluent::IconButton.shinyInput(ns(""close_add_settings_file_modal_%widget_id%""), iconProps = list(iconName = ""ChromeClose"")),
                style = ""display: flex; justify-content: space-between;"",
                class = ""small_close_button""
            ),
            div(shiny.fluent::TextField.shinyInput(ns(""settings_file_name_%widget_id%""), label = i18np$t(""file_name"")), style = ""width: 200px;""),
            div(
                shiny.fluent::PrimaryButton.shinyInput(ns(""add_settings_file_%widget_id%""), i18np$t(""add"")),
                style = ""position: absolute; right: 10px; bottom: 8px;""
            ),
            style = ""background: #fff; padding: 5px 10px 10px 15px; position: relative; width: 400px; height: 120px;""
        ),
        style = ""display: flex; align-items: center; justify-content: center; position: absolute; left: 0; top: 0;  width: 100%; height: 100%; background-color: rgba(0,0,0,0.2); z-index: 1000;""
      )
    ),
    
    # Delete settings file modal
    shinyjs::hidden(
      div(
        id = ns(""delete_settings_file_modal_%widget_id%""),
        div(
            tags$h1(i18np$t(""delete_settings_file_title""), style = ""font-size: 14px;""),
            tags$p(i18np$t(""delete_settings_file_text"")),
            div(
                shiny.fluent::DefaultButton.shinyInput(ns(""close_file_deletion_modal_%widget_id%""), i18np$t(""dont_delete"")),
                div(shiny.fluent::PrimaryButton.shinyInput(ns(""confirm_file_deletion_%widget_id%""), i18np$t(""delete"")), class = ""delete_button""),
                style = ""position: absolute; right: 10px; bottom: 8px; display: flex; gap: 5px;""
            ),
            style = ""background: #fff; padding: 5px 10px 10px 15px; position: relative; width: 400px; height: 120px;""
        ),
        style = ""display: flex; align-items: center; justify-content: center; position: absolute; left: 0; top: 0;  width: 100%; height: 100%; background-color: rgba(0,0,0,0.2); z-index: 1000;""
      )
    ),
    
    # Sidenav
    div(
        id = ns(""settings_files_sidenav_%widget_id%""),
        shiny.fluent::IconButton.shinyInput(ns(""create_settings_file_%widget_id%""), iconProps = list(iconName = ""Add""), title = i18np$t(""create_settings_file""), style = ""margin: 0""),
        class = ""widget_icon"",
        style = ""border-right: solid grey 0.5px;""
    ),
    
    # Dropdown and delete button
    div(
        div(shiny.fluent::Dropdown.shinyInput(ns(""settings_file_%widget_id%""), label = i18np$t(""file""), options = dropdown_options, value = selected_file), style = ""width: 200px""),
        shinyjs::hidden(
            div(
                id = ns(""delete_settings_file_div_%widget_id%""),
                shiny.fluent::IconButton.shinyInput(ns(""delete_settings_file_%widget_id%""), iconProps = list(iconName = ""Delete"")),
                style = ""margin-top: 26px;"", class = ""widget_icon""
            )
        ),
        style = ""display: flex; gap: 5px; margin: 5px 10px;""
    )
)",1,2024-08-28 16:27:54,0
38,plugin,79,"# UI - General settings
#
# Include the UI components for the general settings in this section.
# If you add any fields here, ensure that you also update server_general_settings.R and ui_general_settings.R accordingly.

div(
    tags$strong(i18np$t(""display"")), br(),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""show_settings_file_%widget_id%""), value = toggle_values$show_settings_file),
        tags$label(i18np$t(""show_settings_file""), `for` = ns(""show_settings_file_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 8px;"" 
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""figure_and_settings_side_by_side_%widget_id%""), value = toggle_values$figure_and_settings_side_by_side),
        tags$label(i18np$t(""figure_and_settings_side_by_side""), `for` = ns(""figure_and_settings_side_by_side_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 5px;"" 
    ),
    tags$strong(i18np$t(""code_execution"")), br(),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""run_code_at_settings_file_load_%widget_id%""), value = toggle_values$run_code_at_settings_file_load),
        tags$label(i18np$t(""run_code_at_settings_file_load""), `for` = ns(""run_code_at_settings_file_load_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 8px;"" 
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""run_code_on_data_update_%widget_id%""), value = toggle_values$run_code_on_data_update),
        tags$label(i18np$t(""run_code_on_data_update""), `for` = ns(""run_code_on_data_update_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 5px;"" 
    ),
    style = ""margin: 5px 10px;""
)",1,2024-08-28 16:32:53,0
39,plugin,80,"# UI - Code page

shinyAce::aceEditor(
    ns(""code_%widget_id%""), value = """", mode = ""r"",
    hotkeys = list(
        save = list(win = ""CTRL-S"", mac = ""CTRL-S|CMD-S""),
        run_all = list(win = ""CTRL-SHIFT-ENTER"", mac = ""CTRL-SHIFT-ENTER|CMD-SHIFT-ENTER""),
        comment = list(win = ""CTRL-SHIFT-C"", mac = ""CTRL-SHIFT-C|CMD-SHIFT-C"")
    ),
    autoScrollEditorIntoView = TRUE, height = ""100%"", debounce = 100, fontSize = 11, showPrintMargin = FALSE
)",1,2024-08-28 16:38:44,0
40,plugin,96,"# UI - main file

## Hide save buttons if the user does not have access

if (""projects_console_access"" %in% user_accesses){
    code_button <- shiny.fluent::IconButton.shinyInput(ns(""code_button_%widget_id%""), iconProps = list(iconName = ""Code""), title = i18np$t(""show_code_editor""))
} else code_button <- """"

if (""projects_widgets_settings"" %in% user_accesses){
    save_figure_settings_buttons <- shiny.fluent::IconButton.shinyInput(ns(""save_params_and_code_%widget_id%""), iconProps = list(iconName = ""Save""), title = i18np$t(""save_figure_settings_and_code""), style = ""margin: 0"")
    save_general_settings_button <- shiny.fluent::IconButton.shinyInput(ns(""save_general_settings_button_%widget_id%""), iconProps = list(iconName = ""Save""), title = i18np$t(""save_general_settings""), style = ""margin: 0"")
} else {
    save_figure_settings_buttons <- """"
    save_general_settings_button <- """"   
}

%import_script('ui_load_general_settings.R')%

tagList(
    div(
        shinyjs::hidden(
            div(
                id = ns(""figure_button_div_%widget_id%""),
                shiny.fluent::IconButton.shinyInput(ns(""figure_button_%widget_id%""), iconProps = list(iconName = ""BarChart4""), title = i18np$t(""show_figure""))
            )
        ),
        shiny.fluent::IconButton.shinyInput(ns(""figure_settings_button_%widget_id%""), iconProps = list(iconName = ""AllApps""), title = i18np$t(""show_figure_settings"")),
        code_button,
        shiny.fluent::IconButton.shinyInput(ns(""general_settings_button_%widget_id%""), iconProps = list(iconName = ""Settings""), title = i18np$t(""show_general_settings"")),
        uiOutput(
            ns(""settings_files_ui_%widget_id%""),
            onclick = paste0(""Shiny.setInputValue('"", id, ""-show_settings_files_tab_%widget_id%', Math.random())"")
        ),
        class = ""widget_icon"",
        style = ""display: flex; color: #808080; border-bottom: solid grey 0.5px; height: 28px; padding-top: 5px; font-size: 12px;""
    ),
    div(
        id = ns(""figure_settings_code_div_%widget_id%""),
        div(
            id = ns(""figure_settings_code_sidenav_%widget_id%""),
            shiny.fluent::IconButton.shinyInput(ns(""display_figure_%widget_id%""), iconProps = list(iconName = ""Play""), title = i18np$t(""display_figure""), style = ""margin: 0""),
            save_figure_settings_buttons,
            class = ""widget_icon"",
            style = ""border-right: solid grey 0.5px; width: 25px; margin-right: 10px;""
        ),
        div(
            id = ns(""figure_div_%widget_id%""),
            %import_script('ui_figure.R')%,
            style = paste0(""height: 100%; flex-basis: "", div_width, ""; flex: 1; box-sizing: border-box; min-width: 50px;""),
            class = ""left-panel""
        ),
        div(
            id = ns(""resizer_%widget_id%""),
            style = ""width: 5px; cursor: col-resize; background-color: #ccc;"",
            class = ""resizer""
        ),
        div(
            id = ns(""figure_settings_div_%widget_id%""),
            %import_script('ui_figure_settings.R')%,
            style = paste0(""height: 100%; flex-basis: "", div_width, ""%; margin: 5px 10px; overflow: auto; flex: 1; box-sizing: border-box;"")
        ),
        shinyjs::hidden(
            div(
                id = ns(""code_div_%widget_id%""),
                %import_script('ui_code.R')%,
                style = paste0(""height: 100%; flex-basis: "", div_width, ""%; overflow: auto; flex: 1; box-sizing: border-box;""),
                class = ""right-panel""
            )
        ),
        style = ""display: flex; height: calc(100% - 40px);""
    ),
    shinyjs::hidden(
        div(
            id = ns(""general_settings_div_%widget_id%""),
            div(
                id = ns(""general_settings_sidenav_%widget_id%""),
                save_general_settings_button,
                class = ""widget_icon"",
                style = ""border-right: solid grey 0.5px; width: 25px;""
            ),
            %import_script('ui_general_settings.R')%,
            style = ""display: flex; height: calc(100% - 40px);""
        )
    ),
    shinyjs::hidden(
        div(
            id = ns(""settings_files_div_%widget_id%""),
            %import_script('ui_settings_files.R')%,
            style = ""display: flex; height: calc(100% - 40px);""
        )
    )
)",1,2024-08-28 16:24:47,0
41,plugin,97,"# Server - Main file

# Tabs

## All tabs
tabs <- c(""figure"", ""figure_settings"", ""code"", ""general_settings"")

## Create an observer by tab, show selected tab, hide all others
sapply(tabs, function(tab){

    observeEvent(input[[paste0(tab, ""_button_%widget_id%"")]], {
        %req%
        if (debug) cat(paste0(""\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$"", tab))
        
        tryCatch({
            if (tab == ""general_settings"") shinyjs::hide(""figure_settings_code_div_%widget_id%"")
            else shinyjs::show(""figure_settings_code_div_%widget_id%"")
            
            sapply(paste0(setdiff(c(""figure_settings"", ""code"", ""general_settings""), tab), ""_div_%widget_id%""), shinyjs::hide)
            shinyjs::hide(""settings_files_div_%widget_id%"")
            
            if (tab != ""code"" | (tab == ""code"" & ""projects_console_access"" %in% user_accesses)) shinyjs::show(paste0(tab, ""_div_%widget_id%""))
            
            if (tab %in% c(""figure_settings"", ""code"")){
                if (length(input$figure_and_settings_side_by_side_%widget_id%) > 0) if (input$figure_and_settings_side_by_side_%widget_id%) shinyjs::show(""figure_div_%widget_id%"")
                else shinyjs::hide(""figure_div_%widget_id%"")
                
                shinyjs::show(""figure_settings_code_sidenav_%widget_id%"")
                
                if (tab == ""figure_settings"") anti_tab <- ""code""
                else anti_tab <- ""figure_settings""
                
                shinyjs::runjs(paste0(""
                    var figureSettingsDiv = document.getElementById('"", id, ""-figure_settings_div_%widget_id%');
                    var codeDiv = document.getElementById('"", id, ""-code_div_%widget_id%');
                    
                    if ('"", tab, ""' === 'figure_settings') {
                        figureSettingsDiv.style.flexBasis = codeDiv.style.flexBasis;
                    } else {
                        codeDiv.style.flexBasis = figureSettingsDiv.style.flexBasis;
                    }
                ""))
            }
            else {
                shinyjs::hide(""figure_settings_code_sidenav_%widget_id%"")
                if (tab != ""figure"") shinyjs::hide(""figure_div_%widget_id%"")
            }
            
            # Prevent a bug with scroll into ace editor
            shinyjs::runjs(""var event = new Event('resize'); window.dispatchEvent(event);"")
            
        }, error = function(e) cat(paste0(""\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    })
})

# Figure settings
%import_script('server_figure_settings.R')%

# Code
%import_script('server_code.R')%

# Settings files
%import_script('server_settings_files.R')%

# General settings
%import_script('server_general_settings.R')%",1,2024-08-28 16:24:47,0
42,plugin,98,"base,en,fr
show_figure,Figure,Figure
show_figure_settings,Set up the figure,Paramétrer la figure
show_code_editor,Edit figure code,Editer le code de la figure
show_general_settings,General settings,Paramètres généraux
figure_and_settings_side_by_side,Figure and settings/editor side by side,Figure et paramètres/éditeur côte à côte
display_figure,Display figure,Afficher la figure
save_figure_settings_and_code,Save,Sauvegarder
show_settings_file,Show settings file,Afficher le fichier de sauvegarde
create_settings_file,Create a settings file,Créer un fichier de sauvegarde
delete_settings_file_title,Delete a settings file,Supprimer un fichier de sauvegarde
delete_settings_file_text,Confirm deletion of the settings file?,Confirmer la suppression du fichier de sauvegarde ?
add,Add,Ajouter
file_name,File name,Nom du fichier
file,File,Fichier
provide_valid_name,Provide valid name,Nom valide requis
name_already_used,This name is already used,Ce nom est déjà utilisé
delete,Delete,Supprimer
dont_delete,Cancel,Annuler
no_settings_file_selected,No settings file selected,Pas de fichier de sauvegarde sélectionné
new_settings_file_added,New settings file added,Nouveau fichier de sauvegarde des paramètres ajouté
settings_file_deleted,Settings file deleted,Fichier de sauvegarde des paramètres supprimé
code_execution,Code execution,Exécution du code
run_code_on_data_update,Run code on data update,Exécuter le code lors de la mise à jour des données
run_code_at_settings_file_load,Run code when a settings file is loaded,Exécuter le code au chargement d'un fichier de sauvegarde
save_general_settings,Save general settings,Sauvegarder les paramètres généraux
error_displaying_figure,Error displaying figure,Erreur lors de l'affichage de la figure
select_patient,Select a patient,Sélectionnez un patient
select_stay,Select a stay,Sélectionnez un séjour
no_data_to_display,No data to display,Pas de données à afficher
data_to_display,Data to display,Données à afficher
concepts_to_display,Concepts to display,Concepts à afficher
all_concepts,All concepts,Tous les concepts
selected_concept_classes,Selected concept classes,Classes de concepts sélectionnées
selected_concepts,Selected concepts,Concepts sélectionnés
concepts,Concepts,Concepts
concept_classes,Concept classes,Classes de concepts
patient_data,Patient data,Données du patient
stay_data,Stay data,Données du séjour
drug,Drug,Médicament
drugs,Drugs,Médicaments
start,Start,Début
end,End,Fin
amount,Amount,Quantité
rate,Rate,Débit
synchronize_timelines,Synchronize timelines,Synchroniser les timelines",1,2024-08-28 16:24:47,0
43,plugin,99,"# Server - Code

# Init code var
m$code_%widget_id% <- """"

# Prevent a bug with scroll into ace editor
shinyjs::delay(300, shinyjs::runjs(""var event = new Event('resize'); window.dispatchEvent(event);""))

# Comment code
observeEvent(input$code_%widget_id%_comment, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_comment""))

    tryCatch({
        lines <- strsplit(input$code_%widget_id%, ""\\n"")[[1]]
        req(length(lines) > 0)
        
        start_row <- input$code_%widget_id%_comment$range$start$row + 1
        end_row <- input$code_%widget_id%_comment$range$end$row + 1
        
        for (i in start_row:end_row) if (startsWith(lines[i], ""# "")) lines[i] <- substr(lines[i], 3, nchar(lines[i])) else lines[i] <- paste0(""# "", lines[i])
        
        shinyAce::updateAceEditor(session, ""code_%widget_id%"", value = paste0(lines, collapse = ""\\n""))
        
        shinyjs::runjs(sprintf(""
            var editor = ace.edit('%s-rode');
            editor.moveCursorTo(%d, %d);
            editor.focus();
        "", id, input$code_%widget_id%_comment$range$end$row, input$code_%widget_id%_comment$range$end$column))
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Run all code with shortcut
observeEvent(input$code_%widget_id%_run_all, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_run_all""))

    m$code_%widget_id% <- input$code_%widget_id%
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
})

# Run code when button is clicked
observeEvent(input$display_figure_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$display_figure""))
    
    m$code_%widget_id% <- input$code_%widget_id%
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
})

# Run code at patient update
observeEvent(m$selected_person, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$selected_person""))
    
    if (isTRUE(input$run_code_on_data_update_%widget_id%) && length(input$data_source_%widget_id%) > 0 && input$data_source_%widget_id% == ""person""){
        
        tryCatch({
        
            # Reset synchronized datetimes
            m$datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactive(m$datetimes_timeline_%tab_id%()) %>% debounce(500)
            
            # Run code
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
            
         }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    }
})

# Run code at visit_detail update
observeEvent(m$selected_visit_detail, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$selected_visit_detail""))
    
    if (isTRUE(input$run_code_on_data_update_%widget_id%) && length(input$data_source_%widget_id%) > 0 && input$data_source_%widget_id% == ""visit_detail""){
        
        tryCatch({
        
            # Reset synchronized datetimes
            m$datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactiveVal()
            m$debounced_datetimes_timeline_%tab_id% <- reactive(m$datetimes_timeline_%tab_id%()) %>% debounce(500)
            
            # Run code
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
            
         }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
    }
})

# Run code
observeEvent(input$run_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_code""))
    
    tryCatch({
        
        data_source <- ""visit_detail""
        if (length(input$data_source_%widget_id%) > 0) data_source <- input$data_source_%widget_id%
        
        if ((data_source == ""person"" & is.na(m$selected_person)) | (data_source == ""visit_detail"" & is.na(m$selected_visit_detail))){
            
            if (data_source == ""person"" & is.na(m$selected_person)) output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""select_patient""), messageBarType = 5), style = ""display: inline-block;""))
            else if (data_source == ""visit_detail"" & is.na(m$selected_visit_detail)) output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""select_stay""), messageBarType = 5), style = ""display: inline-block;""))
            
            shinyjs::hide(""drug_exposure_plot_%widget_id%"")
            shinyjs::show(""error_message_div_%widget_id%"")
            
        } else {
            
            data <- d[[paste0(""data_"", data_source)]]$drug_exposure
            
            if (length(input$concepts_choice_%widget_id%) > 0){
                if (input$concepts_choice_%widget_id% == ""selected_concept_classes""){
                    if (data %>% dplyr::count() %>% dplyr::pull() > 0) data <- 
                        data %>%
                        dplyr::collect() %>%
                        dplyr::inner_join(d$concept %>% dplyr::select(drug_concept_id = concept_id, concept_class_id), by = ""drug_concept_id"") %>%
                        dplyr::filter(concept_class_id %in% input$concept_classes_%widget_id%) %>%
                        dplyr::select(-concept_class_id)
                }
                else if (input$concepts_choice_%widget_id% == ""selected_concepts""){
                    if (data %>% dplyr::count() %>% dplyr::pull() > 0) data <- data %>% dplyr::filter(drug_concept_id %in% input$concepts_%widget_id%)
                }
            }
            
            if (data %>% dplyr::count() %>% dplyr::pull() == 0){
                
                output$error_message_%widget_id% <- renderUI(div(shiny.fluent::MessageBar(i18np$t(""no_data_to_display""), messageBarType = 5), style = ""display: inline-block;""))
                
                shinyjs::hide(""drug_exposure_plot_%widget_id%"")
                shinyjs::show(""error_message_div_%widget_id%"")
            } else {
                
                shinyjs::hide(""error_message_div_%widget_id%"")
                shinyjs::show(""drug_exposure_plot_%widget_id%"")
                
                data <-
                    data %>%
                    join_concepts(d$concept, c(""drug"", ""drug_type"", ""route"")) %>%
                    dplyr::left_join(
                        d$drug_strength %>%
                            join_concepts(d$concept, c(""ingredient"", ""amount_unit"", ""numerator_unit"", ""denominator_unit"")) %>%
                            dplyr::select(
                                drug_concept_id, ingredient_concept_id, ingredient_concept_name,
                                amount_value, amount_unit_concept_id, amount_unit_concept_name,
                                numerator_value, numerator_unit_concept_id, numerator_unit_concept_name,
                                denominator_value, denominator_unit_concept_id, denominator_unit_concept_name
                            ),
                        by = ""drug_concept_id"",
                        copy = TRUE
                    ) %>%
                    dplyr::collect() %>%
                    dplyr::arrange(person_id, drug_exposure_start_datetime) %>%
                    dplyr::mutate(
                        amount = dplyr::case_when(
                            !is.na(amount_value) ~ round(quantity * amount_value, 1),
                            !is.na(numerator_value) ~ round(quantity * numerator_value, 1)
                        ),
                        amount_unit = dplyr::case_when(
                            !is.na(amount_value) ~ amount_unit_concept_name,
                            !is.na(numerator_value) ~ numerator_unit_concept_name
                        ),
                        duration_hours = as.numeric(difftime(drug_exposure_end_datetime, drug_exposure_start_datetime, units = ""hours"")),
                        rate = dplyr::case_when(
                            !is.na(numerator_value) & !is.na(duration_hours) & duration_hours > 0 ~ round(amount / duration_hours, 1)
                        ),
                        rate_unit = dplyr::case_when(
                            !is.na(rate) & !is.na(amount_unit) ~ paste0(amount_unit, "" per hour"")
                        ),
                        daily_dose = dplyr::case_when(
                            is.na(rate) & !is.na(amount) ~ amount / duration_hours * 24
                        ),
                        daily_dose_unit = dplyr::case_when(
                            is.na(rate) & !is.na(amount_unit) ~ paste0(amount_unit, "" per day"")
                        )
                    ) %>%
                    dplyr::select(
                        person_id, drug_concept_name,
                        drug_exposure_start_datetime, drug_exposure_end_datetime, duration_hours,
                        amount, amount_unit, rate, rate_unit, daily_dose, daily_dose_unit
                    )
                    
                data <- data %>% dplyr::mutate(drug_concept_name = factor(drug_concept_name, levels = unique(drug_concept_name)))
                
                unique_levels <- levels(data$drug_concept_name)
                unique_labels <- ifelse(
                    nchar(unique_levels) > 22,
                    paste0(substr(unique_levels, 1, 17), ""...""),
                    unique_levels
                )
                
                if (language == ""fr"") datetime_format <- ""%d-%m-%Y %H:%M""
                else datetime_format <- ""%Y-%m-%d %H:%M""
                
                if (data_source == ""person"") {
                    data_datetimes_range <- 
                        d$data_person$visit_occurrence %>%
                        dplyr::summarize(
                            min_visit_start_datetime = min(visit_start_datetime, na.rm = TRUE),
                            max_visit_end_datetime = max(visit_end_datetime, na.rm = TRUE)
                        ) %>%
                        dplyr::collect()
                }
                else if (data_source == ""visit_detail"") {
                    selected_visit_detail <- m$selected_visit_detail
                    
                    data_datetimes_range <- 
                        d$data_person$visit_detail %>%
                        dplyr::filter(visit_detail_id == selected_visit_detail) %>%
                        dplyr::summarize(
                            min_visit_start_datetime = min(visit_detail_start_datetime, na.rm = TRUE),
                            max_visit_end_datetime = max(visit_detail_end_datetime, na.rm = TRUE)
                        ) %>%
                        dplyr::collect()
                }
                
                data_datetimes_range <- c(data_datetimes_range$min_visit_start_datetime, data_datetimes_range$max_visit_end_datetime)
                m$data_datetimes_range_%widget_id% <- data_datetimes_range
                
                if (isTRUE(input$synchronize_timelines_%widget_id%) && length(m$debounced_datetimes_timeline_%tab_id%()) > 0) datetimes <- m$debounced_datetimes_timeline_%tab_id%()
                else datetimes <- data_datetimes_range
                
                m$datetimes_%widget_id% <- datetimes
                
                plotly_drug_exposure <-
                    plotly::plot_ly(data = data, source = ""drug_exposure_plot_%widget_id%"") %>%
                    plotly::add_segments(
                        x = ~drug_exposure_start_datetime,
                        xend = ~drug_exposure_end_datetime,
                        y = ~as.numeric(drug_concept_name),
                        yend = ~as.numeric(drug_concept_name),
                        line = list(color = ""coral"", width = 5),
                        text = ~paste0(
                            i18np$t(""drug""), "" : "", drug_concept_name, ""<br>"",
                            i18np$t(""start""), "" : "", format(drug_exposure_start_datetime, datetime_format), ""<br>"",
                            i18np$t(""end""), "" : "", format(drug_exposure_end_datetime, datetime_format), ""<br>"",
                            i18np$t(""amount""), "" : "", ifelse(is.na(amount), ""/"", amount), "" "", ifelse(is.na(amount_unit), """", amount_unit), ""<br>"",
                            i18np$t(""rate""), "" : "", ifelse(is.na(rate), ""/"", rate), "" "", ifelse(is.na(rate_unit), """", rate_unit)
                        ),
                        hoverinfo = ""text""
                    ) %>%
                    plotly::layout(
                        xaxis = list(
                            type = ""date"",
                            tickmode = ""auto"",
                            title = """",
                            nticks = 10,
                            tickfont = list(size = 10),
                            tickformat = datetime_format,
                            range = c(
                                format(datetimes[[1]], ""%Y-%m-%d %H:%M:%S""),
                                format(datetimes[[2]], ""%Y-%m-%d %H:%M:%S"")
                            )
                        ),
                        yaxis = list(
                            tickvals = seq_along(unique_levels),
                            ticktext = unique_labels,
                            title = """",
                            tickfont = list(family = ""Courier New"", size = 11),
                            automargin = FALSE
                        ),
                        hoverlabel = list(align = ""left""),
                        margin = list(l = 145, r = 0, t = 0, b = 0)
                    ) %>%
                    plotly::config(displayModeBar = FALSE) %>%
                    plotly::event_register(""plotly_relayout"")
                
                output$drug_exposure_plot_%widget_id% <- plotly::renderPlotly(plotly_drug_exposure)
            }
        }
        
        # Go to figure tab
        if (!input$figure_and_settings_side_by_side_%widget_id%) shinyjs::click(""figure_button_%widget_id%"")
        
    }, error = function(e){
        show_message_bar(output, ""error_displaying_figure"", ""severeWarning"", i18n = i18np, ns = ns)
        cat(paste0(""\\n"", now(), "" - widget %widget_id% - input$display_figure - error = "", toString(e)))
    })
})

# Save code with shortcut
observeEvent(input$code_%widget_id%_save, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$code_save""))
    
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_params_and_code_%widget_id%', Math.random());""))
})",1,2024-08-28 16:26:07,0
44,plugin,100,"# Server - Figure settings

# Load figure settings

observeEvent(input$load_figure_settings_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$load_figure_settings""))
    
    # Update figure settings UI
    
    link_id <- input$settings_file_%widget_id%
    sql <- glue::glue_sql(""SELECT name, value, value_num FROM widgets_options WHERE widget_id = %widget_id% AND category = 'figure_settings' AND link_id = {link_id}"", .con = m$db)
    figure_settings <- DBI::dbGetQuery(m$db, sql)
    
    if (nrow(figure_settings) > 0){
        sapply(figure_settings$name, function(name){
        
            value <- figure_settings %>% dplyr::filter(name == !!name) %>% dplyr::pull(value)
            value_num <- figure_settings %>% dplyr::filter(name == !!name) %>% dplyr::pull(value_num)
            
            if (name %in% c(""data_source"", ""concepts_choice"")) shiny.fluent::updateDropdown.shinyInput(session, paste0(name, ""_%widget_id%""), value = value)
            else if (name %in% c(""concepts"", ""concept_classes"")){
                value <- unlist(strsplit(value, "", ""))
                if (name == ""concepts"") value <- as.numeric(value)
                shiny.fluent::updateDropdown.shinyInput(session, paste0(name, ""_%widget_id%""), value = value)
            }
            else if (name == ""synchronize_timelines""){
                value <- as.logical(value_num)
                shiny.fluent::updateToggle.shinyInput(session, paste0(name, ""_%widget_id%""), value = value)
            }
        })
    }
    
    # Run code if toggle is activated
    if (length(input$run_code_at_settings_file_load_%widget_id%) > 0){
        if (input$run_code_at_settings_file_load_%widget_id%){
           shinyjs::delay(500, shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-display_figure_%widget_id%', Math.random());"")))
       }
    }
})

# Save current settings

observeEvent(input$save_params_and_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_params_and_code""))
    
    tryCatch({
    
        # If no settings file is selected, go to settings files management page
        if (length(input$settings_file_%widget_id%) == 0) shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-show_settings_files_tab_%widget_id%', Math.random());""))
        
        if (length(input$settings_file_%widget_id%) > 0){
            
            link_id <- input$settings_file_%widget_id%
        
            # Delete old settings
            sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND category = 'figure_settings' AND link_id = {link_id}"", .con = m$db))
            
            # Add new settings in db
            new_data <- tibble::tribble(
                ~name, ~value, ~value_num,
                ""data_source"", input$data_source_%widget_id%, NA_real_,
                ""concepts_choice"", input$concepts_choice_%widget_id%, NA_real_,
                ""concept_classes"", input$concept_classes_%widget_id% %>% toString(), NA_real_,
                ""concepts"", input$concepts_%widget_id% %>% toString(), NA_real_,
                ""synchronize_timelines"", NA_character_, as.integer(input$synchronize_timelines_%widget_id%)
            )
            
            new_data <-
                new_data %>%
                dplyr::transmute(
                    id = get_last_row(m$db, ""widgets_options"") + 1:nrow(new_data), widget_id = %widget_id%, person_id = NA_integer_, link_id = link_id,
                    category = ""figure_settings"", name, value, value_num, creator_id = m$user_id, datetime = now(), deleted = FALSE
                )
            
            DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
            
            # Notify user
            show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Show / hide concepts_div and concept_classes_div_

observeEvent(input$concepts_choice_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$concepts_choice_""))
    
   
    if (input$concepts_choice_%widget_id% == ""selected_concepts""){
        shinyjs::hide(""concept_classes_div_%widget_id%"")
        shinyjs::show(""concepts_div_%widget_id%"")
    }
    else if (input$concepts_choice_%widget_id% == ""selected_concept_classes""){
        shinyjs::hide(""concepts_div_%widget_id%"")
        shinyjs::show(""concept_classes_div_%widget_id%"")
    }
    else sapply(c(""concepts_div_%widget_id%"", ""concept_classes_div_%widget_id%""), shinyjs::hide)
})

# Synchronize timelines

# Create a reactiveVal with timeline datetimes

if (length(m$datetimes_timeline_%tab_id%) == 0){
    m$datetimes_timeline_%tab_id% <- reactiveVal()
    m$debounced_datetimes_timeline_%tab_id% <- reactive(m$datetimes_timeline_%tab_id%()) %>% debounce(500)
}

observeEvent(m$debounced_datetimes_timeline_%tab_id%(), {
    %req%
    req(input$synchronize_timelines_%widget_id%)
    req(length(m$debounced_datetimes_timeline_%tab_id%()) > 0)
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$debounced_datetimes_timeline""))
    
    tryCatch({
        
        if (
            abs(as.numeric(m$debounced_datetimes_timeline_%tab_id%()[[1]]) - as.numeric(m$datetimes_%widget_id%[[1]])) > 5 |
            abs(as.numeric(m$debounced_datetimes_timeline_%tab_id%()[[2]]) - as.numeric (m$datetimes_%widget_id%[[2]])) > 5){
            shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-run_code_%widget_id%', Math.random());""))
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
}, ignoreInit = TRUE)

observeEvent(plotly::event_data(""plotly_relayout"", source = ""drug_exposure_plot_%widget_id%""), {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer plotly::event_date""))
    
    tryCatch({
        relayout_data <- plotly::event_data(""plotly_relayout"", source = ""drug_exposure_plot_%widget_id%"")
        
        if (!is.null(relayout_data) && is.list(relayout_data)) {
        
            if (""xaxis.autorange"" %in% names(relayout_data) && relayout_data[[""xaxis.autorange""]]) {
                m$datetimes_timeline_%tab_id%(m$data_datetimes_range_%widget_id%)
            } else if (""xaxis.range[0]"" %in% names(relayout_data) && ""xaxis.range[1]"" %in% names(relayout_data)) {
                
                selected_min <- lubridate::force_tz(as.POSIXct(relayout_data[[""xaxis.range[0]""]], origin = ""1970-01-01""), tzone = ""UTC"")
                selected_max <- lubridate::force_tz(as.POSIXct(relayout_data[[""xaxis.range[1]""]], origin = ""1970-01-01""), tzone = ""UTC"")
                m$datetimes_timeline_%tab_id%(c(selected_min, selected_max))
            }
        }
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-08-28 16:26:24,0
45,plugin,101,"# Server - General settings

# Settings / editor side-by-side with figure

observeEvent(input$figure_and_settings_side_by_side_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$figure_and_settings_side_by_side""))
    
    tryCatch({
        if (input$figure_and_settings_side_by_side_%widget_id%){
            shinyjs::runjs(paste0(""
                $('#"", id, ""-figure_div_%widget_id%').css('flex-basis', '50%');
                $('#"", id, ""-figure_settings_div_%widget_id%').css('flex-basis', '50%');
                $('#"", id, ""-code_div_%widget_id%').css('flex-basis', '50%');
                
                if (!window.resizingInitialized_%widget_id%) {
                    var container = document.getElementById('"", id, ""-figure_settings_code_div_%widget_id%');
                    
                    var isResizing = false;
                    var lastDownX = 0;
                    
                    var leftPanel = container.querySelector('.left-panel');
                    var figureSettingsPanel = document.getElementById('"", id, ""-figure_settings_div_%widget_id%');
                    var codePanel = document.getElementById('"", id, ""-code_div_%widget_id%');
                    var resizer = container.querySelector('.resizer');
                    
                    function triggerResizeEvent() {
                        var event = new Event('resize');
                        window.dispatchEvent(event);
                    }
                    
                    resizer.addEventListener('mousedown', function(e) {
                        isResizing = true;
                        lastDownX = e.clientX;
                
                        document.addEventListener('mousemove', resizePanels);
                        document.addEventListener('mouseup', stopResizing);
                    });
                    
                    function resizePanels(e) {
                        if (!isResizing) return;
                        
                        var offsetLeftPanel = leftPanel.offsetWidth;
                        var offsetFigureSettingsPanel = figureSettingsPanel.offsetWidth;
                        var offsetCodePanel = codePanel.offsetWidth;
                        var deltaX = e.clientX - lastDownX;
                        
                        leftPanel.style.flexBasis = (offsetLeftPanel + deltaX) + 'px';
                        
                        figureSettingsPanel.style.flexBasis = (offsetFigureSettingsPanel - deltaX) + 'px';
                        codePanel.style.flexBasis = (offsetCodePanel - deltaX) + 'px';
                
                        lastDownX = e.clientX;
                        triggerResizeEvent();
                    }
                    
                    function stopResizing(e) {
                        isResizing = false;
                        document.removeEventListener('mousemove', resizePanels);
                        document.removeEventListener('mouseup', stopResizing);
                        triggerResizeEvent();
                    }
                }
                
                window.resizingInitialized_%widget_id% = true;
            ""))
            shinyjs::hide(""figure_button_div_%widget_id%"")
            shinyjs::show(""resizer_%widget_id%"")
        }
        else {
            shinyjs::runjs(paste0(""
                $('#"", id, ""-figure_div_%widget_id%').css('flex-basis', '100%');
                $('#"", id, ""-figure_settings_div_%widget_id%').css('flex-basis', '100%');
                $('#"", id, ""-code_div_%widget_id%').css('flex-basis', '100%');
            ""))
            
            shinyjs::show(""figure_button_div_%widget_id%"");
            shinyjs::hide(""resizer_%widget_id%"");
        }
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

# Save general settings in db

observeEvent(input$save_general_settings_button_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_general_settings_button""))
    
    shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_general_settings_%widget_id%', Math.random());""))
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

observeEvent(input$save_general_settings_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_general_settings""))
    
    tryCatch({
    
        # Delete old rows
        sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND category = 'general_settings'"", .con = m$db))
        
        file_id <- input$settings_file_%widget_id%
        new_data <- tibble::tibble(name = ""selected_file_id"", value = NA_character_, value_num = NA_integer_, link_id = file_id)
        
        general_settings <- c(""show_settings_file"", ""figure_and_settings_side_by_side"", ""run_code_on_data_update"", ""run_code_at_settings_file_load"")
        
        sapply(general_settings, function(name){
            toggle_value <- 0L
            input_name <- paste0(name, ""_%widget_id%"")
            if (length(input[[input_name]]) > 0) if (input[[input_name]]) toggle_value <- 1L
            new_data <<- new_data %>% dplyr::bind_rows(tibble::tibble(name = name, value = NA_character_, value_num = toggle_value, link_id = NA_integer_))
        })
        
        new_data <-
            new_data %>%
            dplyr::transmute(
                id = get_last_row(m$db, ""widgets_options"") + 1:(length(general_settings) + 1), widget_id = %widget_id%, person_id = NA_integer_, link_id,
                category = ""general_settings"", name, value, value_num, creator_id = m$user_id, datetime = now(), deleted = FALSE
            )
        
        DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-08-28 16:26:46,0
46,plugin,102,"# Server - Settings files management

settings_files_ui_style <- paste0(
    ""display: inline-block; color: white; max-width: 250px; border-radius: 8px; padding: 1px 5px; align-items: center;"",
    ""height: 18px; font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; cursor: pointer; margin: 2px 5px;""
)

output$settings_files_ui_%widget_id% <- renderUI({
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer output$settings_files""))
    
    div(i18np$t(""no_settings_file_selected""), style = paste0(settings_files_ui_style, ""background-color: #606060ab;""))
})

## Show / hide settings file
observeEvent(input$show_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_settings_file""))
    
    if (input$show_settings_file_%widget_id%) shinyjs::show(""settings_files_ui_%widget_id%"")
    else shinyjs::hide(""settings_files_ui_%widget_id%"")
})

## Show / hide settings files div
observeEvent(input$show_settings_files_tab_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_settings_files_tab""))
    
    sapply(c(paste0(tabs, ""_div_%widget_id%""), ""figure_settings_code_div_%widget_id%""), shinyjs::hide)
    shinyjs::show(""settings_files_div_%widget_id%"")
})

## Show add settings file modal
observeEvent(input$create_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$create_settings_file""))
    
    shinyjs::show(""add_settings_file_modal_%widget_id%"")
})

## Close add settings file modal
observeEvent(input$close_add_settings_file_modal_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$close_add_settings_file_modal""))
    
    shinyjs::hide(""add_settings_file_modal_%widget_id%"")
})

## Confirm creation of settings file
observeEvent(input$add_settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$add_settings_file""))
    
    tryCatch({
        file_name <- input$settings_file_name_%widget_id%
        
        # Check if name if empty
        empty_name <- TRUE
        if (length(file_name) > 0) if (!is.na(file_name) & file_name != """") empty_name <- FALSE
        if (empty_name) shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = i18np$t(""provide_valid_name""))
        else {
        
            shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = NULL)
            
            # Check if name is already used
            sql <- glue::glue_sql(""SELECT name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name' AND LOWER(value) = {tolower(file_name)}"", .con = m$db)
            name_already_used <- nrow(DBI::dbGetQuery(m$db, sql) > 0)
            
            if (name_already_used) shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", errorMessage = i18np$t(""name_already_used""))
            else {
                
                new_id <- get_last_row(m$db, ""widgets_options"") + 1
                
                # Add settings file in database
                new_data <- tibble::tibble(
                    id = new_id, widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
                    category = ""settings_files"", name = ""file_name"", value = file_name, value_num = NA_real_, creator_id = m$user_id, datetime = now(), deleted = FALSE
                )
                DBI::dbAppendTable(m$db, ""widgets_options"", new_data)
                
                # Reset fields
                shiny.fluent::updateTextField.shinyInput(session, ""settings_file_name_%widget_id%"", value = """")
                
                # Update dropdown
                shiny.fluent::updateDropdown.shinyInput(session, ""settings_file_%widget_id%"", value = new_id)
                shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-reload_dropdown_%widget_id%', Math.random());""))
                
                # Close modal
                shinyjs::hide(""add_settings_file_modal_%widget_id%"")
                
                # Notify user
                show_message_bar(output, ""new_settings_file_added"", ""success"", i18n = i18np, ns = ns)
            }
        }
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## Update dropdown
observeEvent(input$reload_dropdown_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$settings_file""))
    
    tryCatch({
        sql <- glue::glue_sql(""SELECT id, value AS name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name'"", .con = m$db)
        m$settings_filenames_%widget_id% <- DBI::dbGetQuery(m$db, sql)
        
        dropdown_options <- convert_tibble_to_list(m$settings_filenames_%widget_id%, key_col = ""id"", text_col = ""name"")
        shiny.fluent::updateDropdown.shinyInput(session, ""settings_file_%widget_id%"", options = dropdown_options)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## A settings file is selected
observeEvent(input$settings_file_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$settings_file""))
    
    tryCatch({
    
        # Show delete button
        shinyjs::show(""delete_settings_file_div_%widget_id%"")
    
        # Get file name
        file_id <- input$settings_file_%widget_id%
        filename <- m$settings_filenames_%widget_id% %>% dplyr::filter(id == file_id) %>% dplyr::pull(name)
        
        output$settings_files_ui_%widget_id% <- renderUI(div(filename, style = paste0(settings_files_ui_style, ""background-color: #1d94ce;"")))
        
        # Save that this file is selected
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-save_general_settings_%widget_id%', Math.random());""))
        
        # Load saved settings
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-load_figure_settings_%widget_id%', Math.random());""))
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})

## Open delete a settings file modal
observeEvent(input$delete_settings_file_%widget_id%, {
    %req%
    req(length(input$settings_file_%widget_id%) > 0)
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$delete_settings_file""))
    
    shinyjs::show(""delete_settings_file_modal_%widget_id%"")
})

## Close delete a settings file modal
observeEvent(input$close_file_deletion_modal_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$close_file_deletion_modal""))
    
    shinyjs::hide(""delete_settings_file_modal_%widget_id%"")
})

## Confirm settings file deletion
observeEvent(input$confirm_file_deletion_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\\n"", now(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$confirm_file_deletion""))
    
    tryCatch({
        file_id <- input$settings_file_%widget_id%
        
        # Delete row in db
        sql_send_statement(m$db, glue::glue_sql(""DELETE FROM widgets_options WHERE id = {file_id}"", .con = m$db))
        
        # Update dropdown
        shinyjs::runjs(paste0(""Shiny.setInputValue('"", id, ""-reload_dropdown_%widget_id%', Math.random());""))
        
        # Close modal
        shinyjs::hide(""delete_settings_file_modal_%widget_id%"")
        
        # Update selected settings file UI
        output$settings_files_ui_%widget_id% <- renderUI(div(i18np$t(""no_settings_file_selected""), style = paste0(settings_files_ui_style, ""background-color: #606060ab;"")))
        
        # Hide delete button
        shinyjs::hide(""delete_settings_file_div_%widget_id%"")
        
        # Notify user
        show_message_bar(output, ""settings_file_delete"", ""warning"", i18n = i18np, ns = ns)
        
    }, error = function(e) cat(paste0(""\\n"", now(), "" - widget %widget_id% - error = "", toString(e))))
})",1,2024-08-28 16:26:57,0
47,plugin,103,"# UI - Figure settings
#
# Insert the UI components for configuring the figure settings in this section.

div(
    div(
        shiny.fluent::Dropdown.shinyInput(
            ns(""data_source_%widget_id%""), options = list(
                list(key = ""person"", text = i18np$t(""patient_data"")),
                list(key = ""visit_detail"", text = i18np$t(""stay_data""))
            ), value = ""visit_detail"", label = i18np$t(""data_to_display"")
        ),
        style = ""width: 200px;""
    ),
    div(
        div(
            shiny.fluent::Dropdown.shinyInput(
                ns(""concepts_choice_%widget_id%""), options = list(
                    list(key = ""all_concepts"", text = i18np$t(""all_concepts"")),
                    list(key = ""selected_concept_classes"", text = i18np$t(""selected_concept_classes"")),
                    list(key = ""selected_concepts"", text = i18np$t(""selected_concepts""))
                ), value = ""selected_concepts"", label = i18np$t(""concepts_to_display"")
            ),
            style = ""width: 200px;""
        ),
        shinyjs::hidden(
            div(
                id = ns(""concept_classes_div_%widget_id%""),
                div(
                    shiny.fluent::Dropdown.shinyInput(
                        ns(""concept_classes_%widget_id%""), label = i18np$t(""concept_classes""),
                        options = convert_tibble_to_list(
                            d$concept %>% dplyr::filter(domain_id == ""Drug"") %>% dplyr::distinct(concept_class_id),
                            key_col = ""concept_class_id"", text_col = ""concept_class_id""
                        ),
                        multiSelect = TRUE
                    ),
                    style = ""width: 200px;""
                )
            )
        ),
        shinyjs::hidden(
            div(
                id = ns(""concepts_div_%widget_id%""),
                div(
                    shiny.fluent::Dropdown.shinyInput(
                        ns(""concepts_%widget_id%""), label = i18np$t(""concepts""),
                        options = convert_tibble_to_list(
                            selected_concepts %>% dplyr::filter(domain_id == ""Drug""),
                            key_col = ""concept_id"", text_col = ""concept_name""
                        ),
                        multiSelect = TRUE
                    ),
                    style = ""width: 200px;""
                )
            )
        ),
        style = ""display: flex; gap: 10px; padding-bottom: 15px; border-bottom: solid 1px #808080;""
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""synchronize_timelines_%widget_id%""), label = i18np$t(""synchronize_timelines"")),
        style = ""margin-top: 15px;""
    )
)",1,2024-08-28 16:27:17,0
48,plugin,104,"# UI - Figure page
#
# Insert the UI components for the figure in this section.

div(
    shinyjs::hidden(
        div(
            id = ns(""error_message_div_%widget_id%""),
            uiOutput(ns(""error_message_%widget_id%"")),
            style = ""padding-top: 10px;""
        )
    ),
    plotly::plotlyOutput(ns(""drug_exposure_plot_%widget_id%""), width = ""100%"", height = ""100%""),
    style = ""width: 100%; height: 100%;""
)",1,2024-08-28 16:27:31,0
49,plugin,105,"# UI - Load general settings
#
# Insert the UI components for configuring the figure settings here.

sql <- glue::glue_sql(""SELECT link_id, name, value, value_num FROM widgets_options WHERE widget_id = %widget_id% AND category = 'general_settings'"", .con = m$db)
general_settings <- DBI::dbGetQuery(m$db, sql)

toggle_values <- list()

if (nrow(general_settings) == 0){

    toggle_values$show_settings_file <- TRUE
    toggle_values$figure_and_settings_side_by_side <- TRUE
    toggle_values$run_code_on_data_update <- FALSE
    toggle_values$run_code_at_settings_file_load <- FALSE
    
    dropdown_options <- list()
    selected_file <- NULL
    
} else if (nrow(general_settings) > 0){

    # Toggles values
    
    general_settings_vec <- c(""show_settings_file"", ""figure_and_settings_side_by_side"", ""run_code_on_data_update"", ""run_code_at_settings_file_load"")
    
    sapply(general_settings_vec, function(name){
        
        toggle_value <- FALSE
        
        row <- general_settings %>% dplyr::filter(name == !!name)
        if (nrow(row) > 0){
            if (is.na(row %>% dplyr::pull(value_num))) toggle_value <- FALSE
            else (toggle_value <- as.logical(row %>% dplyr::pull(value_num)))
        }
        
        toggle_values[[name]] <<- toggle_value
    })
    
    # Selected settings file
    
    sql <- glue::glue_sql(""SELECT id, value AS name FROM widgets_options WHERE widget_id = %widget_id% AND category = 'settings_files' AND name = 'file_name'"", .con = m$db)
    m$settings_filenames_%widget_id% <- DBI::dbGetQuery(m$db, sql)
    dropdown_options <- convert_tibble_to_list(m$settings_filenames_%widget_id%, key_col = ""id"", text_col = ""name"")
    selected_file <- general_settings %>% dplyr::filter(name == ""selected_file_id"") %>% dplyr::pull(link_id)
}

if (toggle_values$figure_and_settings_side_by_side) div_width <- ""50%"" else div_width <- ""100%""",1,2024-08-28 16:27:41,0
50,plugin,106,"# UI - Settings files
#
# This code corresponds to the page that appears when you click on the file icon at the top of the widget.
# The UI allows you to select, add, and delete settings files.

tagList(

    # Add settings file modal
    shinyjs::hidden(
      div(
        id = ns(""add_settings_file_modal_%widget_id%""),
        div(
            div(
                tags$h1(i18np$t(""create_settings_file""), style = ""font-size: 14px;""),
                shiny.fluent::IconButton.shinyInput(ns(""close_add_settings_file_modal_%widget_id%""), iconProps = list(iconName = ""ChromeClose"")),
                style = ""display: flex; justify-content: space-between;"",
                class = ""small_close_button""
            ),
            div(shiny.fluent::TextField.shinyInput(ns(""settings_file_name_%widget_id%""), label = i18np$t(""file_name"")), style = ""width: 200px;""),
            div(
                shiny.fluent::PrimaryButton.shinyInput(ns(""add_settings_file_%widget_id%""), i18np$t(""add"")),
                style = ""position: absolute; right: 10px; bottom: 8px;""
            ),
            style = ""background: #fff; padding: 5px 10px 10px 15px; position: relative; width: 400px; height: 120px;""
        ),
        style = ""display: flex; align-items: center; justify-content: center; position: absolute; left: 0; top: 0;  width: 100%; height: 100%; background-color: rgba(0,0,0,0.2); z-index: 1000;""
      )
    ),
    
    # Delete settings file modal
    shinyjs::hidden(
      div(
        id = ns(""delete_settings_file_modal_%widget_id%""),
        div(
            tags$h1(i18np$t(""delete_settings_file_title""), style = ""font-size: 14px;""),
            tags$p(i18np$t(""delete_settings_file_text"")),
            div(
                shiny.fluent::DefaultButton.shinyInput(ns(""close_file_deletion_modal_%widget_id%""), i18np$t(""dont_delete"")),
                div(shiny.fluent::PrimaryButton.shinyInput(ns(""confirm_file_deletion_%widget_id%""), i18np$t(""delete"")), class = ""delete_button""),
                style = ""position: absolute; right: 10px; bottom: 8px; display: flex; gap: 5px;""
            ),
            style = ""background: #fff; padding: 5px 10px 10px 15px; position: relative; width: 400px; height: 120px;""
        ),
        style = ""display: flex; align-items: center; justify-content: center; position: absolute; left: 0; top: 0;  width: 100%; height: 100%; background-color: rgba(0,0,0,0.2); z-index: 1000;""
      )
    ),
    
    # Sidenav
    div(
        id = ns(""settings_files_sidenav_%widget_id%""),
        shiny.fluent::IconButton.shinyInput(ns(""create_settings_file_%widget_id%""), iconProps = list(iconName = ""Add""), title = i18np$t(""create_settings_file""), style = ""margin: 0""),
        class = ""widget_icon"",
        style = ""border-right: solid grey 0.5px;""
    ),
    
    # Dropdown and delete button
    div(
        div(shiny.fluent::Dropdown.shinyInput(ns(""settings_file_%widget_id%""), label = i18np$t(""file""), options = dropdown_options, value = selected_file), style = ""width: 200px""),
        shinyjs::hidden(
            div(
                id = ns(""delete_settings_file_div_%widget_id%""),
                shiny.fluent::IconButton.shinyInput(ns(""delete_settings_file_%widget_id%""), iconProps = list(iconName = ""Delete"")),
                style = ""margin-top: 26px;"", class = ""widget_icon""
            )
        ),
        style = ""display: flex; gap: 5px; margin: 5px 10px;""
    )
)",1,2024-08-28 16:27:54,0
51,plugin,107,"# UI - General settings
#
# Include the UI components for the general settings in this section.
# If you add any fields here, ensure that you also update server_general_settings.R and ui_general_settings.R accordingly.

div(
    tags$strong(i18np$t(""display"")), br(),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""show_settings_file_%widget_id%""), value = toggle_values$show_settings_file),
        tags$label(i18np$t(""show_settings_file""), `for` = ns(""show_settings_file_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 8px;"" 
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""figure_and_settings_side_by_side_%widget_id%""), value = toggle_values$figure_and_settings_side_by_side),
        tags$label(i18np$t(""figure_and_settings_side_by_side""), `for` = ns(""figure_and_settings_side_by_side_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 5px;"" 
    ),
    tags$strong(i18np$t(""code_execution"")), br(),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""run_code_at_settings_file_load_%widget_id%""), value = toggle_values$run_code_at_settings_file_load),
        tags$label(i18np$t(""run_code_at_settings_file_load""), `for` = ns(""run_code_at_settings_file_load_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 8px;"" 
    ),
    div(
        shiny.fluent::Toggle.shinyInput(ns(""run_code_on_data_update_%widget_id%""), value = toggle_values$run_code_on_data_update),
        tags$label(i18np$t(""run_code_on_data_update""), `for` = ns(""run_code_on_data_update_%widget_id%""), style = ""margin-left: 5px;""),
        style = ""display: flex; margin-top: 5px;"" 
    ),
    style = ""margin: 5px 10px;""
)",1,2024-08-28 16:32:53,0
52,plugin,108,"# UI - Code page

shinyAce::aceEditor(
    ns(""code_%widget_id%""), value = """", mode = ""r"",
    hotkeys = list(
        save = list(win = ""CTRL-S"", mac = ""CTRL-S|CMD-S""),
        run_all = list(win = ""CTRL-SHIFT-ENTER"", mac = ""CTRL-SHIFT-ENTER|CMD-SHIFT-ENTER""),
        comment = list(win = ""CTRL-SHIFT-C"", mac = ""CTRL-SHIFT-C|CMD-SHIFT-C"")
    ),
    autoScrollEditorIntoView = TRUE, height = ""100%"", debounce = 100, fontSize = 11, showPrintMargin = FALSE
)",1,2024-08-28 16:38:44,0
