id,category,link_id,code,creator_id,datetime,deleted
1,plugin_ui,1,"# Get widget options
sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id%"", .con = m$db)
widget_options <- DBI::dbGetQuery(m$db, sql)
plots <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
selected_script <- NULL
selected_script_result <- widget_options %>% dplyr::filter(name == ""selected_script"")
if (nrow(selected_script_result) > 0) if ((selected_script_result %>% dplyr::pull(value_num)) %in% plots$id) selected_script <- selected_script_result %>% dplyr::pull(value_num)

# Get concepts associated with this widget
concepts <- tibble::tibble(concept_id = 0L, concept_name = i18np$t(""none"")) %>% dplyr::bind_rows(selected_concepts %>% dplyr::select(concept_id, concept_name))
variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")

# Get palettes from RColorBrewer
palettes <- convert_tibble_to_list(data = tibble::tibble(pal = c(""Set1"", ""Set2"", ""Set3"", ""Reds"", ""Purples"", ""Oranges"", ""Greens"", ""Blues"", ""Greys"")), key_col = ""pal"", text_col = ""pal"")

# List of inputs (to save & get saved params)

dropdowns <- paste(unlist(sapply(c(""variable"", ""colour_pal""), function(x) paste0(x, ""_"", 1:10))))
textfields <- paste(unlist(sapply(""variable_name"", function(x) paste0(x, ""_"", 1:10))))
spin_buttons <- c(""y_min"", ""y_max"")
toggle_inputs <- c(""show_stays"", ""stay_data_only"", ""show_range_selector"", ""synchronize_timelines"", ""smooth_curves"", ""draw_points"", ""change_y_values"", 
    ""run_plot_at_patient_changeover"", ""run_code_at_patient_changeover"")
colour_inputs <- paste(unlist(sapply(""colour"", function(x) paste0(x, ""_"", 1:10))))
ace_inputs <- ""code""
inputs <- c(dropdowns, textfields, spin_buttons, toggle_inputs, colour_inputs, ace_inputs)

default_values <- list()
default_values$run_code_at_patient_changeover <- FALSE
default_values$run_plot_at_patient_changeover <- FALSE
default_values$y_min <- NULL
default_values$y_max <- NULL
default_values$show_stays <- FALSE
default_values$stay_data_only <- FALSE
default_values$show_range_selector <- TRUE
default_values$synchronize_timelines <- FALSE
default_values$smooth_curves <- FALSE
default_values$draw_points <- TRUE
default_values$change_y_values <- FALSE
default_values$code <- """"

for (i in 1:10){
    default_values[[paste0(""variable_"", i)]] <- 0L
    default_values[[paste0(""variable_name_"", i)]] <- """"
    default_values[[paste0(""colour_"", i)]] <- ""#E41A1C""
    default_values[[paste0(""colour_pal_"", i)]] <- ""Set1""
}

inputs_values <- list()

# Get saved params for this widget
sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id% AND link_id = {selected_script}"", .con = m$db)
widget_options <- DBI::dbGetQuery(m$db, sql)

for (input_name in inputs){
    widget_option <- widget_options %>% dplyr::filter(name == input_name)
    
    if (nrow(widget_option) > 0){
        if (input_name %in% spin_buttons || grepl(""variable_[0-9]"", input_name)) inputs_values[[input_name]] <- widget_option$value_num
        else inputs_values[[input_name]] <- widget_option$value
    }
    else inputs_values[[input_name]] <- default_values[[input_name]]
}

# aceEditor div : show editor if user has access to the console
ace_editor_div <- div(br(), shiny.fluent::MessageBar(i18np$t(""unauthorized_access_to_console""), messageBarType = 5), br())
if (length(m$user_accesses) > 0) if (""data_console"" %in% m$user_accesses) ace_editor_div <- div(
    div(
        shinyAce::aceEditor(
            ns(""code_%widget_id%""), """", mode = ""r"", value = inputs_values$code,
                code_hotkeys = list(
                    ""r"", list(
                      run_selection = list(win = ""CTRL-ENTER"", mac = ""CTRL-ENTER|CMD-ENTER""),
                      run_all = list(win = ""CTRL-SHIFT-ENTER"", mac = ""CTRL-SHIFT-ENTER|CMD-SHIFT-ENTER""),
                      save = list(win = ""CTRL-S"", mac = ""CTRL-S|CMD-S"")
                    )
                ),
                autoScrollEditorIntoView = TRUE, minLines = 30, maxLines = 1000
        ), 
    style = ""width: 100%;""),
    shiny.fluent::PrimaryButton.shinyInput(ns(""run_code_%widget_id%""), i18n$t(""run_code"")), br()
)

# Variables div

for (i in 1:10){

    variables_div_temp <- div(
        id = ns(paste0(""variable_div_"", i)),
        shiny.fluent::Dropdown.shinyInput(ns(paste0(""variable_"", i, ""_%widget_id%"")), label = i18np$t(""variable""), options = variables, value = inputs_values[[paste0(""variable_"", i)]]),
        shiny.fluent::TextField.shinyInput(ns(paste0(""variable_name_"", i, ""_%widget_id%"")), label = i18np$t(""display_name""), value = inputs_values[[paste0(""variable_name_"", i)]]),
        shiny.fluent::Dropdown.shinyInput(ns(paste0(""colour_pal_"", i, ""_%widget_id%"")), options = palettes,  value = inputs_values[[paste0(""colour_pal_"", i)]], label = i18np$t(""palette"")),
        uiOutput(ns(paste0(""colour_ui_"", i, ""_%widget_id%"")))
    )
    
    if (i == 1) variables_div <- variables_div_temp
    else variables_div <- tagList(variables_div, shinyjs::hidden(variables_div_temp))
}

variables_div <- div(
    shiny.fluent::Dropdown.shinyInput(ns(""variable_num_%widget_id%""), label = i18np$t(""variable_num""), 
    options = convert_tibble_to_list(tibble::tibble(num = 1:10), key_col = ""num"", text_col = ""num""), value = 1L),
    variables_div
)

result <- tagList(
    actionButton(ns(""minimize_%widget_id%""), """", icon = icon(""minus""), style = ""position:absolute; top:8px; right:62px; z-index:10;""),
    shinyjs::hidden(actionButton(ns(""maximize_%widget_id%""), """", icon = icon(""plus""), style = ""position:absolute; top:8px; right:62px; z-index:10;"")),
    shiny.fluent::reactOutput(ns(""delete_confirm_%widget_id%"")),
    shiny.fluent::Pivot(
        id = ns(""pivot_%widget_id%""),
        onLinkClick = htmlwidgets::JS(paste0(""item => Shiny.setInputValue(''"", id, ""-current_tab_%widget_id%'', item.props.id)"")),
        shiny.fluent::PivotItem(id = ""plot_tab_%widget_id%"", itemKey = ""plot"", headerText = i18np$t(""plot"")),
        shiny.fluent::PivotItem(id = ""code_tab_%widget_id%"", itemKey = ""code"", headerText = i18np$t(""code"")),
        shiny.fluent::PivotItem(id = ""scripts_management_tab_%widget_id%"", itemKey = ""scripts_management"", headerText = i18np$t(""scripts_management""))
    ),
    div(
        id = ns(""plot_and_code_tab_header_%widget_id%""),
        br(),
        shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
            div(shiny.fluent::Dropdown.shinyInput(ns(""script_choice_%widget_id%""),
                options = convert_tibble_to_list(plots, key_col = ""id"", text_col = ""name""), value = selected_script), style = ""width:300px""),
            shiny.fluent::DefaultButton.shinyInput(ns(""save_%widget_id%""), i18np$t(""save"")),
            div(
                id = ns(""plot_tab_header_%widget_id%""),
                shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                    shiny.fluent::Toggle.shinyInput(ns(""run_plot_at_patient_changeover_%widget_id%""), value = as.logical(inputs_values$run_plot_at_patient_changeover), style = ""margin-top:5px;""),
                    div(class = ""toggle_title"", i18np$t(""run_plot_at_patient_changeover""), style = ""padding-top:5px;"")
                )
            ),
            shinyjs::hidden(
                div(
                    id = ns(""code_tab_header_%widget_id%""),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        shiny.fluent::Toggle.shinyInput(ns(""run_code_at_patient_changeover_%widget_id%""), value = as.logical(inputs_values$run_code_at_patient_changeover), style = ""margin-top:5px;""),
                        div(class = ""toggle_title"", i18np$t(""run_code_at_patient_changeover""), style = ""padding-top:5px;"")
                    )
                )
            )
        )
    ),
    div(
        id = ns(""plot_tab_%widget_id%""),
        div(
            style = ""display:flex;"",
            div(id = ns(""split_layout_left_%widget_id%""),
                style = ""padding-right:10px; width:50%;"",
                div(
                    id = ns(""plot_div_%widget_id%""), br(),
                    dygraphs::dygraphOutput(ns(""dygraph_%widget_id%""), width = ""100%"", height = 400),
                    shinyjs::hidden(div(id = ns(""empty_dygraph_%widget_id%""), style = ""height:400px; background-color:#EBEBEB;""))
                ), br(),
                div(
                    id = ns(""plot_size_div_%widget_id%""),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        div(
                            div(strong(i18np$t(""plot_width"")), style = ""margin-top:6px;""),
                            div(shiny.fluent::Slider.shinyInput(ns(""plot_width_%widget_id%""), value = 100, min = 1, max = 100), style = ""width:200px; margin-left:-8px; padding-top:4px;""),
                            style = ""width:200px""
                        ),
                        div(
                            div(strong(i18np$t(""plot_height"")), style = ""margin-top:6px;""),
                            div(shiny.fluent::Slider.shinyInput(ns(""plot_height_%widget_id%""), value = 100, min = 1, max = 100), style = ""width:200px; margin-left:-8px; padding-top:4px;""),
                            style = ""width:200px""
                        ),
                        div(
                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                shiny.fluent::Toggle.shinyInput(ns(""hide_params_%widget_id%""), value = FALSE, style = ""margin-top:5px;""),
                                div(class = ""toggle_title"", i18np$t(""hide_params""), style = ""padding-top:5px;"")
                            ),
                            style = ""width:200px; margin-top:15px;""
                        )
                    )
                )
            ),
            div(id = ns(""split_layout_right_%widget_id%""),
                style = ""padding-left:10px; width:50%;"",
                shiny.fluent::Pivot(
                    id = ns(""plot_pivot_%widget_id%""),
                    onLinkClick = htmlwidgets::JS(paste0(""item => Shiny.setInputValue(''"", id, ""-plot_current_tab_%widget_id%'', item.props.id)"")),
                    shiny.fluent::PivotItem(id = ""plot_parameters_tab_%widget_id%"", itemKey = ""plot_parameters"", headerText = i18np$t(""plot_parameters"")),
                    shiny.fluent::PivotItem(id = ""variables_tab_%widget_id%"", itemKey = ""variables"", headerText = i18np$t(""variables""))
                ),
                div(
                    id = ns(""plot_parameters_tab_%widget_id%""), br(),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        div(
                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                shiny.fluent::Toggle.shinyInput(ns(""show_stays_%widget_id%""), value = as.logical(inputs_values$show_stays), style = ""margin-top:5px;""),
                                div(class = ""toggle_title"", i18np$t(""show_stays""), style = ""padding-top:5px;"")
                            ), style = ""width:300px;""
                        ),
                        div(
                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                shiny.fluent::Toggle.shinyInput(ns(""stay_data_only_%widget_id%""), value = as.logical(inputs_values$stay_data_only), style = ""margin-top:5px;""),
                                div(class = ""toggle_title"", i18np$t(""stay_data_only""), style = ""padding-top:5px;"")
                            ), style = ""width:300px;""
                        )
                    ),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        div(
                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                shiny.fluent::Toggle.shinyInput(ns(""show_range_selector_%widget_id%""), value = as.logical(inputs_values$show_range_selector), style = ""margin-top:5px;""),
                                div(class = ""toggle_title"", i18np$t(""show_range_selector""), style = ""padding-top:5px;"")
                            ), style = ""width:300px;""
                        ),
                        div(
                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                shiny.fluent::Toggle.shinyInput(ns(""synchronize_timelines_%widget_id%""), value = as.logical(inputs_values$synchronize_timelines), style = ""margin-top:5px;""),
                                div(class = ""toggle_title"", i18np$t(""synchronize_timelines""), style = ""padding-top:5px;"")
                            ), style = ""width:300px;""
                        )
                    ),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        div(
                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                shiny.fluent::Toggle.shinyInput(ns(""smooth_curves_%widget_id%""), value = as.logical(inputs_values$smooth_curves), style = ""margin-top:5px;""),
                                div(class = ""toggle_title"", i18np$t(""smooth_curves""), style = ""padding-top:5px;"")
                            ), style = ""width:300px;""
                        ),
                        div(
                            shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                shiny.fluent::Toggle.shinyInput(ns(""draw_points_%widget_id%""), value = as.logical(inputs_values$draw_points), style = ""margin-top:5px;""),
                                div(class = ""toggle_title"", i18np$t(""draw_points""), style = ""padding-top:5px;"")
                            ), style = ""width:300px;""
                        )
                    ), br(),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        shiny.fluent::Toggle.shinyInput(ns(""change_y_values_%widget_id%""), value = as.logical(inputs_values$change_y_values), style = ""margin-top:5px;""),
                        div(class = ""toggle_title"", i18np$t(""change_y_values""), style = ""padding-top:5px;"")
                    ),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        div(
                            div(class = ""input_title"", i18np$t(""y_min"")),
                            shiny.fluent::SpinButton.shinyInput(ns(""y_min_%widget_id%""), value = inputs_values$y_min, step = 1),
                            style = ""width:300px""
                        ),
                        div(
                            div(class = ""input_title"", i18np$t(""y_max"")),
                            shiny.fluent::SpinButton.shinyInput(ns(""y_max_%widget_id%""), value = inputs_values$y_max, step = 1),
                            style = ""width:300px""
                        )
                    )
                ),
                div(
                    id = ns(""variables_tab_%widget_id%""),
                    variables_div
                ), br(),
                shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                    shiny.fluent::PrimaryButton.shinyInput(ns(""show_%widget_id%""), i18np$t(""show"")),
                    shiny.fluent::DefaultButton.shinyInput(ns(""generate_code_%widget_id%""), i18np$t(""generate_code""))
                )
            )
        )
    ),
    shinyjs::hidden(
        div(
            id = ns(""code_tab_%widget_id%""),
            ace_editor_div
        )
    ),
    shinyjs::hidden(
        div(
            id = ns(""scripts_management_tab_%widget_id%""),
            shiny.fluent::Stack(
                horizontal = TRUE, tokens = list(childrenGap = 10),
                make_textfield(i18n = i18n, ns = ns, label = ""name"", id = ""script_name_%widget_id%"", width = ""300px""),
                div(shiny.fluent::PrimaryButton.shinyInput(ns(""add_script_%widget_id%""), i18n$t(""add"")), style = ""margin-top:38px;"")
            ),
            DT::DTOutput(ns(""scripts_management_datatable_%widget_id%"")),
            shiny.fluent::Stack(
                horizontal = TRUE, tokens = list(childrenGap = 10),
                shiny.fluent::PrimaryButton.shinyInput(ns(""save_scripts_%widget_id%""), i18n$t(""save"")),
                shiny.fluent::DefaultButton.shinyInput(ns(""delete_scripts_%widget_id%""), i18n$t(""delete_selection""))
            )
        )
    )
)

if (!requireNamespace(""dygraphs"", quietly = TRUE) | !requireNamespace(""xts"", quietly = TRUE)) result <- shiny.fluent::MessageBar(i18np$t(""dygraphs_and_xts_not_installed""), messageBarType = 5)

result",1,2023-12-03 18:10:26,0
2,plugin_server,1,"# Get saved params for this widget
sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id%"", .con = m$db)
widget_options <- DBI::dbGetQuery(m$db, sql)

m$widget_options_%widget_id% <- widget_options
m$scripts_%widget_id% <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = FALSE)
m$reload_dt_%widget_id% <- Sys.time()

# List of inputs (to save & get saved params)

dropdowns <- paste(unlist(sapply(c(""variable"", ""colour_pal""), function(x) paste0(x, ""_"", 1:10))))
textfields <- paste(unlist(sapply(""variable_name"", function(x) paste0(x, ""_"", 1:10))))
spin_buttons <- c(""y_min"", ""y_max"")
toggle_inputs <- c(""show_stays"", ""stay_data_only"", ""show_range_selector"", ""synchronize_timelines"", ""smooth_curves"", ""draw_points"", ""change_y_values"", 
    ""run_plot_at_patient_changeover"", ""run_code_at_patient_changeover"")
colour_inputs <- paste(unlist(sapply(""colour"", function(x) paste0(x, ""_"", 1:10))))
ace_inputs <- ""code""
inputs <- c(dropdowns, textfields, spin_buttons, toggle_inputs, colour_inputs, ace_inputs)

default_values <- list()
default_values$run_code_at_patient_changeover <- FALSE
default_values$run_plot_at_patient_changeover <- FALSE
default_values$y_min <- NULL
default_values$y_max <- NULL
default_values$show_stays <- FALSE
default_values$stay_data_only <- FALSE
default_values$show_range_selector <- TRUE
default_values$synchronize_timelines <- FALSE
default_values$smooth_curves <- FALSE
default_values$draw_points <- TRUE
default_values$change_y_values <- FALSE
default_values$code <- """"

concepts <- tibble::tibble(concept_id = 0L, concept_name = i18np$t(""none"")) %>% dplyr::bind_rows(selected_concepts %>% dplyr::select(concept_id, concept_name))
variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")

for (i in 1:10){
    default_values[[paste0(""variable_"", i)]] <- 0L
    default_values[[paste0(""variable_name_"", i)]] <- """"
    default_values[[paste0(""colour_"", i)]] <- ""#E41A1C""
    default_values[[paste0(""colour_pal_"", i)]] <- ""Set1""
}

shinyjs::delay(100, {
    for (i in 1:10){
        # In case of widget settings, update dropdowns of variables
        if (length(input[[paste0(""variable_"", i, ""_%widget_id%"")]]) > 0){
            value <- 0L
            if (input[[paste0(""variable_"", i, ""_%widget_id%"")]] %in% selected_concepts$concept_id) value <- input[[paste0(""variable_"", i, ""_%widget_id%"")]]
            shiny.fluent::updateDropdown.shinyInput(session, paste0(""variable_"", i, ""_%widget_id%""), options = variables, value = value)
        }
    }
})

# -------------------------
# --- Show / hide divs ----
# -------------------------

observeEvent(input$current_tab_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$current_tab_%widget_id%""))
    
    sapply(c(""plot_and_code_tab_header_%widget_id%"", ""plot_tab_%widget_id%"", ""code_tab_%widget_id%"", ""scripts_management_tab_%widget_id%""), shinyjs::hide)
    shinyjs::show(input$current_tab_%widget_id%)
    if (input$current_tab_%widget_id% %in% c(""plot_tab_%widget_id%"", ""code_tab_%widget_id%"")){
        shinyjs::show(""plot_and_code_tab_header_%widget_id%"")
        sapply(c(""plot_tab_header_%widget_id%"", ""code_tab_header_%widget_id%""), shinyjs::hide)
        if (input$current_tab_%widget_id% == ""plot_tab_%widget_id%"") shinyjs::show(""plot_tab_header_%widget_id%"")
        else if (input$current_tab_%widget_id% == ""code_tab_%widget_id%"") shinyjs::show(""code_tab_header_%widget_id%"")
    }
})

observeEvent(input$plot_current_tab_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$plot_current_tab_%widget_id%""))
    
    sapply(c(""plot_parameters_tab_%widget_id%"", ""variables_tab_%widget_id%""), shinyjs::hide)
    shinyjs::show(input$plot_current_tab_%widget_id%)
})

observeEvent(input$variable_num_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$variable_num_%widget_id%""))
    
    sapply(1:10, function(i) shinyjs::hide(paste0(""variable_div_"", i)))
    shinyjs::show(paste0(""variable_div_"", input$variable_num_%widget_id%))
})

shinyjs::delay(100, m$trigger_hide_tab_%widget_id% <- Sys.time())
observeEvent(m$trigger_hide_tab_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$trigger_hide_tab_%widget_id%""))
    shinyjs::hide(""variables_tab_%widget_id%"")
})

# Hide parameters div
observeEvent(input$hide_params_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$hide_params_%widget_id%""))

    if (input$hide_params_%widget_id%){
        shinyjs::hide(""split_layout_right_%widget_id%"")
        shinyjs::runjs(glue::glue(""$(''#{id}-split_layout_left_%widget_id%'').css(''width'', ''100%'');""))
    }
    else {
        shinyjs::runjs(glue::glue(""$(''#{id}-split_layout_left_%widget_id%'').css(''width'', ''50%'');""))
        shinyjs::show(""split_layout_right_%widget_id%"")
    }
    
    # Reload plot
    m$create_plot_type_%widget_id% <- ""show_plot""
    m$create_plot_trigger_%widget_id% <- Sys.time()
})

divs <- c(""plot_and_code_tab_header_%widget_id%"", ""split_layout_right_%widget_id%"", ""plot_size_div_%widget_id%"", ""pivot_%widget_id%"")

# Minimize widget
observeEvent(input$minimize_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$minimize_%widget_id%""))
    shinyjs::runjs(glue::glue(""$(''#{id}-split_layout_left_%widget_id%'').css(''width'', ''100%'');""))
    shinyjs::delay(100, {
        shinyjs::show(""maximize_%widget_id%"")
        sapply(c(""minimize_%widget_id%"", divs), shinyjs::hide)
        m$create_plot_type_%widget_id% <- ""show_plot""
        m$create_plot_trigger_%widget_id% <- Sys.time()
    })
})

# Maximize widget
observeEvent(input$maximize_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$maximize_%widget_id%""))
    shinyjs::runjs(glue::glue(""$(''#{id}-split_layout_left_%widget_id%'').css(''width'', ''50%'');""))
    shinyjs::delay(100, {
        shinyjs::hide(""maximize_%widget_id%"")
        sapply(c(""minimize_%widget_id%"", divs), shinyjs::show)
        m$create_plot_type_%widget_id% <- ""show_plot""
        m$create_plot_trigger_%widget_id% <- Sys.time()
    })
})

# -------------
# --- Plot ----
# -------------

# Load plot or code at patient changeover
observeEvent(m$selected_person, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$selected_person""))
    
    if (length(input$run_plot_at_patient_changeover_%widget_id%) > 0){
        m$create_plot_type_%widget_id% <- ""show_plot""
        m$create_plot_trigger_%widget_id% <- Sys.time()
    }
    
    if (length(input$run_code_at_patient_changeover_%widget_id%) > 0){
        
    }
})

# Update x & y variables dropdowns
concepts <- tibble::tibble(concept_id = 0L, concept_name = i18np$t(""none"")) %>% dplyr::bind_rows(selected_concepts %>% dplyr::select(concept_id, concept_name))
variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")
for (i in 1:10) shiny.fluent::updateDropdown.shinyInput(session, paste0(""variable_"", i, ""_%widget_id%""), options = variables)   

sapply(1:10, function(i){

    # Update SwatchColorPicker
    observeEvent(input[[paste0(""colour_pal_"", i, ""_%widget_id%"")]], {
        %req%
        if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$colour_pal_"", i, ""_%widget_id%""))
    
        pal <- RColorBrewer::brewer.pal(n = 8, name = input[[paste0(""colour_pal_"", i, ""_%widget_id%"")]])
        pal_tibble <- tibble::tibble(name = pal)
        colorCells <- list()
        for (j in 1:nrow(pal_tibble)) colorCells <- rlist::list.append(colorCells, list(id = pal_tibble[[j, ""name""]], color = pal_tibble[[j, ""name""]]))
        
        # Get saved colour
        value <- pal[1]
        if (length(input$script_choice_%widget_id%) > 0){
            sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id% AND link_id = {input$script_choice_%widget_id%} AND name = {paste0(''colour_'', i)}"", .con = m$db)
            colour <- DBI::dbGetQuery(m$db, sql)
            if (nrow(colour) > 0) if (colour %>% dplyr::pull(value) %in% pal) value <- colour %>% dplyr::pull(value)   
        }
        
        output[[paste0(""colour_ui_"", i, ""_%widget_id%"")]] <- renderUI({
            %req%
            if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$colour_ui_"", i, ""_%widget_id%""))
            shiny.fluent::SwatchColorPicker.shinyInput(ns(paste0(""colour_"", i, ""_%widget_id%"")), colorCells = colorCells, columnCount = length(colorCells), value = value)
        })
    })
    
    # Update variable name
    observeEvent(input[[paste0(""variable_"", i, ""_%widget_id%"")]], {
        %req%
        if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$variable_"", i, ""_%widget_id%""))
        
        if (i == 1){
            if (length(m$widget_loaded_%widget_id%) == 0) shinyjs::hide(""variables_tab_%widget_id%"")
            m$widget_loaded_%widget_id% <- TRUE
        }
        
        concept_id <- input[[paste0(""variable_"", i, ""_%widget_id%"")]]
        req(concept_id != 0L, length(concept_id) > 0)
        table_name <- d$dataset_all_concepts %>% dplyr::filter(concept_id_1 == concept_id, is.na(relationship_id)) %>% dplyr::pull(domain_id) %>% tolower()
        
        unit_concept_name <- """"
        
        if (""tbl_lazy"" %in% class(d[[table_name]])) unit_concept_id <- d[[table_name]] %>% dplyr::filter(rlang::sym(paste0(table_name, ""_concept_id"")) == !!concept_id) %>% 
            dplyr::distinct(unit_concept_id) %>% dplyr::collect() %>% dplyr::pull(unit_concept_id)
        
        else unit_concept_id <- d[[table_name]] %>% dplyr::filter(get(paste0(table_name, ""_concept_id"")) == !!concept_id) %>%
            dplyr::distinct(unit_concept_id) %>% dplyr::pull(unit_concept_id)
            
        if (length(unit_concept_id) > 0) unit_concept_name <- d$dataset_all_concepts %>% dplyr::filter(concept_id_1 %in% unit_concept_id, is.na(relationship_id)) %>% dplyr::slice(1) %>% dplyr::pull(concept_name_1)
        
        concept_name <- d$dataset_all_concepts %>% dplyr::filter(concept_id_1 == concept_id, is.na(relationship_id)) %>% dplyr::pull(concept_name_1)
        if (unit_concept_name != """") concept_name <- paste0(concept_name, "" ("", unit_concept_name, "")"")
        
        shiny.fluent::updateTextField.shinyInput(session, paste0(""variable_name_"", i, ""_%widget_id%""), value = concept_name)
    })
})

# Render plot from ""plot"" tab
observeEvent(input$show_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_%widget_id%""))
    
    # Then load plot
    m$create_plot_type_%widget_id% <- ""show_plot""
    m$create_plot_trigger_%widget_id% <- Sys.time()
})

# Generate code and update aceEditor or render plot

observeEvent(m$create_plot_trigger_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$create_plot_trigger_%widget_id%""))
    
    req(requireNamespace(""dygraphs"", quietly = TRUE), requireNamespace(""xts"", quietly = TRUE), length(input$variable_1_%widget_id%) > 0)
    
    create_plot_type <- isolate(m$create_plot_type_%widget_id%)
    
    # At each step of the code, we put the code in the code variable, for the shinyAce code editor (tab ""Code"")
    
    req(length(isolate(input$colour_1_%widget_id%)) > 0)
    
    data <- tibble::tibble(concept_id = integer(), datetime = lubridate::ymd_hms(), value_as_number = numeric())
    code <- ""# A tibble containing the data for the plot\ndata <- tibble::tibble(concept_id = integer(), datetime = lubridate::ymd_hms(), value_as_number = numeric())\n\n""
    
    # Prevents a bug with filter on a list element (m$selected_person) which doesn''t work on lazy tibbles
    selected_person <- m$selected_person
    code <- paste0(code, 
        ""selected_person <- m$selected_person\n"",
        ""selected_visit_detail_id <- m$selected_visit_detail"")
    
    # Keep track of used concept_ids for dygraph plot
    concept_ids <- integer()
    
    j <- 0
    for (i in 1:10){
        if (input[[paste0(""variable_"", i, ""_%widget_id%"")]] != 0L){
            concept_id <- input[[paste0(""variable_"", i, ""_%widget_id%"")]]
            
            if (concept_id %not_in% concept_ids){
        
                variable <- d$dataset_all_concepts %>% dplyr::filter(concept_id_1 == concept_id, is.na(relationship_id))
                
                table_name <- tolower(variable$domain_id)
                
                if (table_name %in% c(""observation"", ""measurement"")){
                    concept_name <- variable$concept_name_1
                    
                    code_stays_filter <- """"
                    
                    if (j == 0){
                        if (length(input$stay_data_only_%widget_id%) > 0) if (input$stay_data_only_%widget_id% & !is.na(m$selected_visit_detail)) code_stays_filter <- paste0("",\n"",
                            ""        "", table_name, ""_datetime"", "" >= selected_visit_detail$visit_detail_start_datetime,\n"",
                            ""        "", table_name, ""_datetime"", "" <= selected_visit_detail$visit_detail_end_datetime""
                        )
                    
                        code <- paste0(code, ""\n\ndata <-\n"",
                            ""    d$"", table_name, "" %>%\n"",
                            ""    dplyr::filter(\n"",
                            ""        person_id == selected_person, \n"", 
                            ""        "", table_name, ""_concept_id == "", concept_id, ""\n"",
                            code_stays_filter,
                            ""    ) %>% \n"",
                            ""    dplyr::select(concept_id = "", table_name, ""_concept_id, datetime = "", table_name, ""_datetime, value_as_number) %>%\n"",
                            ""    dplyr::mutate(concept_name = \"""", concept_name, ""\"")""
                        )
                    }
                    
                    if (j > 0){
                        if (length(input$stay_data_only_%widget_id%) > 0) if (input$stay_data_only_%widget_id% & !is.na(m$selected_visit_detail)) code_stays_filter <- paste0("",\n"",
                            ""            "", table_name, ""_datetime"", "" >= selected_visit_detail$visit_detail_start_datetime,\n"",
                            ""            "", table_name, ""_datetime"", "" <= selected_visit_detail$visit_detail_end_datetime""
                        )
                        
                        code <- paste0(code, "" %>%\n"",
                            ""    dplyr::bind_rows(\n"",
                            ""        d$"", table_name, "" %>%\n"",
                            ""        dplyr::filter(\n"",
                            ""            person_id == selected_person,\n"", 
                            ""            "", table_name, ""_concept_id == "", concept_id, ""\n"",
                            code_stays_filter,
                            ""        ) %>% \n"",
                            ""        dplyr::select(concept_id = "", table_name, ""_concept_id, datetime = "", table_name, ""_datetime, value_as_number) %>%\n"",
                            ""        dplyr::mutate(concept_name = \"""", concept_name, ""\"")\n"",
                            ""    )""
                        )
                    }
                    j <- 1
                    
                    data_filtered <- d[[table_name]] %>% dplyr::filter(person_id == selected_person, !!rlang::sym(paste0(table_name, ""_concept_id"")) == !!concept_id)
                    
                    if (length(input$stay_data_only_%widget_id%) > 0) if (input$stay_data_only_%widget_id% & !is.na(m$selected_visit_detail)){
                    
                        selected_visit_detail_id <- m$selected_visit_detail
                        selected_visit_detail <- d$visit_detail %>% dplyr::filter(visit_detail_id == selected_visit_detail_id)
                    
                        data_filtered <- data_filtered %>% 
                            dplyr::filter(
                                !!rlang::sym(paste0(table_name, ""_datetime"")) >= selected_visit_detail$visit_detail_start_datetime,
                                !!rlang::sym(paste0(table_name, ""_datetime"")) <= selected_visit_detail$visit_detail_end_datetime
                            )
                    }
                    
                    data_filtered <- data_filtered %>% dplyr::collect()
                    
                    if (nrow(data_filtered) > 0) data <- data %>% 
                        dplyr::bind_rows(
                            data_filtered %>%
                                dplyr::select(concept_id = paste0(table_name, ""_concept_id""), datetime = paste0(table_name, ""_datetime""), value_as_number) %>% 
                                dplyr::mutate(concept_name = concept_name)
                        )
                }
                
                concept_ids <- c(concept_ids, concept_id)
            }
        }
    }
    
    if (nrow(data) == 0){
        shinyjs::hide(""dygraph_%widget_id%"")
        shinyjs::show(""empty_dygraph_%widget_id%"")
    }
        
    req(nrow(data) > 0)
    
    # Pivot data
    pivoted_data <- data %>% tidyr::pivot_wider(names_from = ""concept_name"", values_from = ""value_as_number"", id_cols = ""datetime"", values_fn = mean)
    pivoted_data <- xts::xts(pivoted_data[,-1], order.by = as.POSIXct(pivoted_data$datetime))
    
    # Synchronization between dygraphs
    synchronize_timelines <- FALSE
    if (length(input$synchronize_timelines_%widget_id%) > 0) if (input$synchronize_timelines_%widget_id%) synchronize_timelines <- TRUE
    
    # Create dygraph
    if (synchronize_timelines) result <- pivoted_data %>% dygraphs::dygraph(group = ""tab_%tab_id%"")
    else result <- pivoted_data %>% dygraphs::dygraph()
    result <- result %>% dygraphs::dyOptions(useDataTimezone = TRUE)
    
    concept_ids <- integer()
    
    for (i in 1:10){
        concept_id <- input[[paste0(""variable_"", i, ""_%widget_id%"")]]
        
        if (concept_id %not_in% concept_ids){
            if (concept_id != 0){
                concept_name <- d$dataset_all_concepts %>% dplyr::filter(concept_id_1 == concept_id, is.na(relationship_id)) %>% dplyr::pull(concept_name_1)
                
                draw_points <- FALSE
                if (length(input$draw_points_%widget_id%) > 0) if(input$draw_points_%widget_id%) draw_points <- TRUE
                
                result <- result %>% 
                    dygraphs::dySeries(concept_name, label = input[[paste0(""variable_name_"", i, ""_%widget_id%"")]], color = input[[paste0(""colour_"", i, ""_%widget_id%"")]], drawPoints = draw_points)
            }
            
            concept_ids <- c(concept_ids, concept_id)
        }
    }
    
    # Show patient stays
    if (length(input$show_stays_%widget_id%) > 0) if(input$show_stays_%widget_id%){
        
        visit_details <-
            d$visit_detail %>% 
            dplyr::filter(person_id == selected_person) %>%
            dplyr::collect() %>%
            dplyr::left_join(d$dataset_all_concepts %>% dplyr::select(visit_detail_concept_id = concept_id_1, visit_detail_concept_name = concept_name_1), by = ""visit_detail_concept_id"")
            
        visit_details <-
            visit_details %>%
            dplyr::distinct(visit_detail_start_datetime) %>%
            dplyr::rename(datetime = visit_detail_start_datetime) %>%
            dplyr::left_join(visit_details %>% dplyr::select(unit_in = visit_detail_concept_name, datetime = visit_detail_start_datetime), by = ""datetime"") %>%
            dplyr::left_join(visit_details %>% dplyr::select(unit_out = visit_detail_concept_name, datetime = visit_detail_end_datetime), by = ""datetime"") %>%
            dplyr::mutate(text = dplyr::case_when(
                !is.na(unit_out) ~ paste0(unit_out, "" - "", unit_in),
                TRUE ~ unit_in
            )) %>%
            dplyr::mutate(text = ifelse(is.na(text), """", text))
            
        for (i in 1:nrow(visit_details)){
            row <- visit_details[i, ]
            result <- result %>% dygraphs::dyEvent(row$datetime, row$text)
        }
    }
    
    # Add range selector
    if (length(input$show_range_selector_%widget_id% > 0)) if(input$show_range_selector_%widget_id% > 0) result <- result %>% dygraphs::dyRangeSelector()
    
    # Smooth curves
    if (length(input$smooth_curves_%widget_id%) > 0) if (input$smooth_curves_%widget_id%) result <- result %>% dygraphs::dyRoller(rollPeriod = 5)
    
    # Y range values
    if (length(input$change_y_values_%widget_id%) > 0 & length(input$y_min_%widget_id%) > 0 & length(input$y_max_%widget_id%)){
        if (input$change_y_values_%widget_id%) result <- result %>% dygraphs::dyAxis(""y"", valueRange = c(input$y_min_%widget_id%, input$y_max_%widget_id%))
    }
    
    # Update shinyAce code editor
    if (create_plot_type == ""generate_code""){
        shinyAce::updateAceEditor(session, ""code_%widget_id%"", value = code)
        
        # Go to ""Code"" tab
        shinyjs::runjs(glue::glue(""$(''#{id}-pivot_%widget_id% button[name=\""{i18np$t(''code'')}\""]'').click();""))
    }
    
    # Final object of dygraph figure
    
    shinyjs::show(""dygraph_%widget_id%"")
    shinyjs::hide(""empty_dygraph_%widget_id%"")
    
    if (create_plot_type == ""show_plot"") output$dygraph_%widget_id% <- dygraphs::renderDygraph({
        %req%
        if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$dygraph_%widget_id%""))
        
        result
#         eval(parse(text = code))
    })
})

# Save widget parameters
observeEvent(input$save_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_%widget_id%""))
    
    req(length(input$script_choice_%widget_id%) > 0)
    
    # Delete old options
    sql <- glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = {%widget_id%} AND link_id = {input$script_choice_%widget_id%}"", .con = m$db)
    DBI::dbSendStatement(m$db, sql) -> query
    DBI::dbClearResult(query)
    
    last_row <- get_last_row(m$db, ""widgets_options"")
    
    # Add new options
    new_options <- tibble::tibble(
        id = seq(last_row + 1, last_row + length(inputs)),
        widget_id = %widget_id%, person_id = NA_integer_, link_id = input$script_choice_%widget_id%,
        category = NA_character_, name = NA_character_, value = NA_character_, value_num = NA_real_,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
    
    new_options_values <- tibble::tibble(name = character(), value = character(), value_num = numeric())
    
    for (input_name in inputs){
        if (input_name %in% spin_buttons || grepl(""variable_[0-9]"", input_name)){
            value_num <- NA_real_
            if (length(input[[paste0(input_name, ""_%widget_id%"")]]) > 0) value_num <- input[[paste0(input_name, ""_%widget_id%"")]]
            new_options_values <- new_options_values %>% dplyr::bind_rows(tibble::tibble(name = input_name, value = NA_character_, value_num = value_num))
        } 
        else {
            value <- NA_character_
            if (length(input[[paste0(input_name, ""_%widget_id%"")]]) > 0) value <- as.character(input[[paste0(input_name, ""_%widget_id%"")]])
            new_options_values <- new_options_values %>% dplyr::bind_rows(tibble::tibble(name = input_name, value = value, value_num = NA_real_))
        } 
    }
    
    for (col in c(""name"", ""value"", ""value_num"")) new_options[[col]] <- new_options_values[[col]]
    
    DBI::dbAppendTable(m$db, ""widgets_options"", new_options)
    
    m$widget_options_%widget_id% <- m$widget_options_%widget_id% %>% dplyr::filter(link_id != input$script_choice_%widget_id%) %>% dplyr::bind_rows(new_options)
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

# Run plot / code at script launch
observeEvent(input$run_plot_at_patient_changeover_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_plot_at_patient_changeover_%widget_id%""))
    if (input$run_plot_at_patient_changeover_%widget_id%) shiny.fluent::updateToggle.shinyInput(session, ""run_code_at_patient_changeover_%widget_id%"", value = FALSE)
})
observeEvent(input$run_code_at_patient_changeover_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_code_at_patient_changeover_%widget_id%""))
    if (input$run_code_at_patient_changeover_%widget_id%) shiny.fluent::updateToggle.shinyInput(session, ""run_plot_at_patient_changeover_%widget_id%"", value = FALSE)
})

# Plot width & height
sapply(c(""width"", ""height""), function(name){
    observeEvent(input[[paste0(""plot_"", name, ""_%widget_id%"")]], {
        %req%
        if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$plot_"", name, ""_%widget_id%""))
        
        if (name == ""width"") value <- paste0(input$plot_width_%widget_id%, ""%"")
        else value <- input$plot_height_%widget_id% * 0.01 * 400
        
        shinyjs::runjs(glue::glue(""$(''#{id}-dygraph_%widget_id%'').css(''{name}'', ''{value}'');"")) 
        m$create_plot_type_%widget_id% <- ""show_plot""
        m$create_plot_trigger_%widget_id% <- Sys.time()
    }) %>% throttle(1000) %>% debounce(1000)
})

# ------------
# --- Code ---
# ------------

# Generate code
observeEvent(input$generate_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$generate_code_%widget_id%""))
    m$create_plot_type_%widget_id% <- ""generate_code""
    m$create_plot_trigger_%widget_id% <- Sys.time()
})

# Render plot from ""code"" tab

observeEvent(input$run_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_code_%widget_id%""))
    m$run_code_%widget_id% <- input$code_%widget_id%
    m$run_code_trigger_%widget_id% <- Sys.time()
})

observeEvent(m$run_code_trigger_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$run_code_trigger_%widget_id%""))
    
    # Go to plot tab
    shinyjs::runjs(glue::glue(""$(''#{id}-pivot_%widget_id% button[name=\""{i18np$t(''plot'')}\""]'').click();""))
    
    # Render plot
    output$plot_output_%widget_id% <- renderPlot({
        %req%
        if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$plot_output_%widget_id%""))
        eval(parse(text = m$run_code_%widget_id%))
    })
})

# ---------------
# --- Scripts ---
# ---------------

# Add a new script
observeEvent(input$add_script_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$add_script_%widget_id%""))
    
    # Check if name is not empty
    empty_name <- TRUE
    if (length(input$script_name_%widget_id%) > 0) if (input$script_name_%widget_id% != """") empty_name <- FALSE
    if (empty_name) shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = i18n$t(""provide_valid_name""))
    req(!empty_name)
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = NULL)
    
    # Check if name is not already used
    sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id% AND name = ''script'' AND value = {input$script_name_%widget_id%}"", .con = m$db)
    already_used_name <- DBI::dbGetQuery(m$db, sql) %>% nrow() >= 1
    if (already_used_name) shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = i18n$t(""name_already_used""))
    req(!already_used_name)
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = NULL)
    
    # Add script to database
    
    last_row <- get_last_row(m$db, ""widgets_options"")
    sql <- glue::glue_sql(""SELECT COALESCE(MAX(value_num), 0) FROM widgets_options WHERE widget_id = %widget_id% AND name = ''script''"", .con = m$db)
    last_id <- DBI::dbGetQuery(m$db, sql) %>% dplyr::pull()
    
    new_options <- tibble::tibble(
        id = last_row + 1, widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""script"", value = input$script_name_%widget_id%, value_num = last_id + 1,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""widgets_options"", new_options)
    
    # Reset TextField
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", value = """")
    
    # Notify user
    show_message_bar(output, ""script_added"", ""success"", i18n = i18np, ns = ns)
    
    # Add new script to scripts vector
    m$scripts_%widget_id% <- m$scripts_%widget_id% %>% 
        dplyr::bind_rows(tibble::tibble(id = last_id + 1, name = input$script_name_%widget_id%))
    m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = TRUE)
    
    # Update DT & dropdown
    m$reload_dt_%widget_id% <- Sys.time()
})

# Load a script
observeEvent(input$script_choice_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$script_choice_%widget_id%""))
    
    widget_options <- m$widget_options_%widget_id% %>% dplyr::filter(link_id == input$script_choice_%widget_id%)
    
    code <- """"
    
    for (input_name in inputs){
        widget_option <- widget_options %>% dplyr::filter(name == input_name)
        
        # Update inputs with saved values
        if (nrow(widget_option) > 0){
        
            if (input_name %in% dropdowns){
                if (grepl(""variable_[0-9]"", input_name)) value <- widget_option$value_num else value <- widget_option$value
                shiny.fluent::updateDropdown.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = value)
            }
            if (input_name %in% textfields) shiny.fluent::updateTextField.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value)
            if (input_name %in% spin_buttons) shiny.fluent::updateSpinButton.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value_num)
            if (input_name %in% toggle_inputs) shiny.fluent::updateToggle.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = as.logical(widget_option$value))
            if (input_name %in% colour_inputs) shiny.fluent::updateSwatchColorPicker.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value)
            if (input_name %in% ace_inputs) shinyAce::updateAceEditor(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value)
            
            if (input_name == ""run_code_at_patient_changeover"") run_code_at_patient_changeover <- as.logical(widget_option$value)
            if (input_name == ""run_plot_at_patient_changeover"") run_plot_at_patient_changeover <- as.logical(widget_option$value)
            if (input_name == ""code"") code <- widget_option$value
        }
        if (nrow(widget_option) == 0){
            if (input_name %in% dropdowns) shiny.fluent::updateDropdown.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% textfields) shiny.fluent::updateTextField.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% spin_buttons) shiny.fluent::updateSpinButton.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% toggle_inputs) shiny.fluent::updateToggle.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% colour_inputs) shiny.fluent::updateSwatchColorPicker.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% ace_inputs) shinyAce::updateAceEditor(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
        }
    }
    
    # Save that this script is selected
    sql <- glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND name = ''selected_script''"", .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    last_row <- get_last_row(m$db, ""widgets_options"")
    
    new_options <- tibble::tibble(
        id = last_row + 1, widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""selected_script"", value = NA_character_, value_num = input$script_choice_%widget_id%,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""widgets_options"", new_options)
})

# Var for delete confirm react
m$delete_open_dialog_%widget_id% <- FALSE

# Update scripts DT & dropdown
observeEvent(m$reload_dt_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$reload_dt_%widget_id%""))
    
    # Reload DT
    
    # Prepare data for the datatable
    m$scripts_datatable_temp_%widget_id% <- 
        m$scripts_%widget_id% %>%
        dplyr::rename(id_temp = id) %>%
        dplyr::mutate(action = as.character(actionButton(""delete_%id%"", """", icon = icon(""trash-alt""), 
            onclick = paste0(""Shiny.setInputValue(''"", id, ""-deleted_pressed_%widget_id%'', this.id, {priority: ''event''})"")))) %>%
        dplyr::mutate(action = stringr::str_replace_all(action, ""%id%"", as.character(id_temp))) %>%
        dplyr::rename(id = id_temp)
    
    # If there is not already a proxy, create datatable
    if (length(m$datatable_proxy_%widget_id%) == 0){
        render_datatable(output = output, ns = ns, i18n = i18n, data = m$scripts_datatable_temp_%widget_id%,
            output_name = ""scripts_management_datatable_%widget_id%"", col_names = c(i18n$t(""id""), i18n$t(""name""), i18n$t(""action"")),
            editable_cols = ""name"", sortable_cols = c(""id"", ""name""), centered_cols = c(""id"", ""action""), column_widths = c(""id"" = ""80px"", ""action"" = ""80px""),
            searchable_cols = ""name"", filter = TRUE, selection = ""multiple"")
        
        # Create a proxy for this datatable
        m$datatable_proxy_%widget_id% <- DT::dataTableProxy(""scripts_management_datatable_%widget_id%"", deferUntilFlush = FALSE)
    }
    if (length(m$datatable_proxy_%widget_id%) > 0) DT::replaceData(m$datatable_proxy_%widget_id%, m$scripts_datatable_temp_%widget_id%, resetPaging = FALSE, rownames = FALSE)
    
    # Update dropdown
    value <- NULL
    if (length(input$script_choice_%widget_id%) > 0) value <- input$script_choice_%widget_id%
    if (length(input$script_choice_%widget_id%) == 0 & nrow(m$scripts_%widget_id%) > 0){
        # Load last selected script
        selected_script <- m$widget_options_%widget_id%  %>% dplyr::filter(name == ""selected_script"")
        if (nrow(selected_script) > 0) value <- selected_script %>% dplyr::pull(value_num)
    }
    
    shiny.fluent::updateDropdown.shinyInput(session, ""script_choice_%widget_id%"", 
        options = convert_tibble_to_list(m$scripts_%widget_id%, key_col = ""id"", text_col = ""name""), value = value)
})

# Updates on scripts DT
observeEvent(input$scripts_management_datatable_%widget_id%_cell_edit, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_management_datatable_%widget_id%_cell_edit""))
    
    edit_info <- input$scripts_management_datatable_%widget_id%_cell_edit
    m$scripts_temp_%widget_id% <- DT::editData(m$scripts_temp_%widget_id%, edit_info, rownames = FALSE)
      
    # Store that this row has been modified
    m$scripts_temp_%widget_id%[[edit_info$row, ""modified""]] <- TRUE
})

# Save updates on scripts
observeEvent(input$save_scripts_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_scripts_%widget_id%""))
    
    # Check if there are no duplicates in names
    duplicates <- m$scripts_temp_%widget_id% %>% dplyr::mutate_at(""name"", tolower) %>% dplyr::group_by(name) %>% dplyr::summarize(n = dplyr::n()) %>% dplyr::filter(n > 1) %>% nrow() >= 1
    
    if (duplicates) show_message_bar(output, ""scripts_names_duplicates"", ""severeWarning"", i18n = i18np, ns = ns)
    
    req(!duplicates)
    
    req(nrow(m$scripts_temp_%widget_id%) > 0)
    
    # Delete old options
    sql <- glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND name = ''script''"", .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    # Add new options
    last_row <- get_last_row(m$db, ""widgets_options"")
    
    new_options <- tibble::tibble(
        id = seq(last_row + 1, last_row + nrow(m$scripts_temp_%widget_id%)),
        widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""script"", value = m$scripts_temp_%widget_id%$name, value_num = m$scripts_temp_%widget_id%$id,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""widgets_options"", new_options)
    
    # Update scripts dropdown
    value <- NULL
    if (length(input$script_choice_%widget_id%) > 0) value <- input$script_choice_%widget_id%
    shiny.fluent::updateDropdown.shinyInput(session, ""script_choice_%widget_id%"", 
        options = convert_tibble_to_list(m$scripts_temp_%widget_id%, key_col = ""id"", text_col = ""name""), value = value)
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

# Delete scripts

### Delete with trash icon
observeEvent(input$deleted_pressed_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$deleted_pressed_%widget_id%""))
    
    # Reload datatable (to unselect rows)
    DT::replaceData(m$datatable_proxy_%widget_id%, m$scripts_datatable_temp_%widget_id%, resetPaging = FALSE, rownames = FALSE)
    
    m$delete_scripts_%widget_id% <- as.integer(substr(input$deleted_pressed_%widget_id%, nchar(""delete_"") + 1, 100))
    m$delete_open_dialog_%widget_id% <- TRUE
})

### Delete with ""delete selection"" button
observeEvent(input$delete_scripts_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$delete_scripts_%widget_id%""))
    
    req(length(input$scripts_management_datatable_%widget_id%_rows_selected) > 0)
    m$delete_scripts_%widget_id% <- m$scripts_%widget_id%[input$scripts_management_datatable_%widget_id%_rows_selected, ] %>% dplyr::pull(id)
    m$delete_open_dialog_%widget_id% <- TRUE
})

### reactOutput for deletion confirmation
output$delete_confirm_%widget_id% <- shiny.fluent::renderReact({
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$delete_confirm_%widget_id%""))
    
    shiny.fluent::Dialog(
        hidden = !m$delete_open_dialog_%widget_id%,
        onDismiss = htmlwidgets::JS(paste0(""function() { Shiny.setInputValue(''scripts_hide_dialog_%widget_id%'', Math.random()); }"")),
        dialogContentProps = list(
            type = 0,
            title = i18np$t(""confirm_deletion_title""),
            closeButtonAriaLabel = ""Close"",
            subText = tagList(i18np$t(""confirm_deletion_subtext""), br(), br()
        )
    ),
    modalProps = list(),
    shiny.fluent::DialogFooter(
        shiny.fluent::PrimaryButton.shinyInput(ns(""scripts_delete_confirmed_%widget_id%""), text = i18n$t(""delete"")),
        shiny.fluent::DefaultButton.shinyInput(ns(""scripts_delete_canceled_%widget_id%""), text = i18n$t(""dont_delete""))
        )
    )
})

### Close reactOutput
observeEvent(input$scripts_hide_dialog_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_hide_dialog_%widget_id%""))
    m$delete_open_dialog_%widget_id% <- FALSE
})
observeEvent(input$scripts_delete_canceled_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_delete_canceled_%widget_id%""))
    m$delete_open_dialog_%widget_id% <- FALSE
})

### Deletion confirmed
observeEvent(input$scripts_delete_confirmed_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_delete_confirmed_%widget_id%""))
    
    m$delete_open_dialog_%widget_id% <- FALSE
    
    # Get scripts ids
    ids_to_del <- m$delete_scripts_%widget_id%
    
    # Delete scripts in DB
    sql <- glue::glue_sql(paste0(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND ("",
        ""(name = ''script'' AND value_num IN ({ids_to_del*})) OR "",
        ""(link_id IN ({ids_to_del*})))""), .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    # Update m var
    m$scripts_%widget_id% <- m$scripts_%widget_id% %>% dplyr::filter(id %not_in% ids_to_del)
    m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = TRUE)
    
    # Reload DT
    m$reload_dt_%widget_id% <- Sys.time()
    
    # Notify user
    show_message_bar(output, ""script_deleted"", ""severeWarning"", i18n = i18np, ns = ns)
})",1,2023-12-03 18:10:26,0
3,plugin_translations,1,"base,en,fr
plot,Plot,Figure
code,Code,Code
scripts_management,Scripts management,Gérer les scripts
plot_parameters,Plot parameters,Paramètres de la figure
unauthorized_access_to_console,You are not authorized to access the console,Vous n''avez pas l''autorisation pour accéder à la console
time_series_singular,Time series,Série temporelle
show,Show plot,Afficher la figure
save,Save,Sauvegarder
run_plot_at_patient_changeover,Reload plot at patient changeover,Recharger la figure au changement de patient
run_code_at_patient_changeover,Reload code at patient changeover,Recharger le code au changement de patient
hide_params,Hide parameters,Masquer les paramètres
plot_width,Plot width (%),Largeur de la figure (%)
plot_height,Plot height (%),Hauteur de la figure (%)
variables,Variables,Variables
generate_code,Generate code,Générer le code
script_added,Script added,Script ajouté
confirm_deletion_title,Delete scripts,Supprimer des scripts
confirm_deletion_subtext,Do you want to delete these scripts ?,Confirmer la suppression de ces scripts ?
script_deleted,Script(s) deleted,Script(s) supprimé(s)
dygraphs_and_xts_not_installed,Dygraphs & xts libraries are not installed. Install these libraries and restart the app., Les librairies dygraphs et xts ne sont pas installées. Installez ces librairies puis relancez l''application.
none,None,Aucune
variable_num,Variable number,Variable n°
variable,Variable,Variable
palette,Palette,Palette
display_name,Display name,Nom d''affichage
show_range_selector,Show range selector,Afficher le sélecteur d''intervalle
draw_points,Draw points,Tracer les points
stay_data_only,Current stay data only,Données du séjour sélectionné uniquement
y_min,Min value of Y axis,Valeur minimale de Y
y_max,Max value of Y axis,Valeur maximale de Y
synchronize_timelines,Synchronize timelines,Synchroniser les intervalles
smooth_curves,Smooth curves,Lisser les courbes
roll_period,Roll period,Période d''amortissement
show_stays,Show stays,Afficher les séjours
change_y_values,Change Y values,Changer les valeurs de Y",1,2023-12-03 18:10:26,0
4,plugin_ui,2,"# Get widget options
sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id%"", .con = r$db)
widget_options <- DBI::dbGetQuery(m$db, sql)
plots <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
selected_script <- NULL
selected_script_result <- widget_options %>% dplyr::filter(name == ""selected_script"")
if (nrow(selected_script_result) > 0) if ((selected_script_result %>% dplyr::pull(value_num)) %in% plots$id) selected_script <- selected_script_result %>% dplyr::pull(value_num)

# Get concepts associated with this widget
concepts <- tibble::tibble(concept_id = 0L, concept_name = i18np$t(""none"")) %>% dplyr::bind_rows(selected_concepts %>% dplyr::select(concept_id, concept_name))
x_variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")
y_variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")

# Get palettes from RColorBrewer
palettes <- convert_tibble_to_list(data = tibble::tibble(pal = c(""Set1"", ""Set2"", ""Set3"", ""Reds"", ""Purples"", ""Oranges"", ""Greens"", ""Blues"", ""Greys"")), key_col = ""pal"", text_col = ""pal"")

# List of inputs (to save & get saved params)

dropdowns <- c(""plot_function"", ""plot_theme"", ""bins_type"", ""x_variable"", ""y_variable"", ""colour_pal"", ""group_by"", ""group_by_type"", ""summarize_fct"")
textfields <- c(""x_label"", ""y_label"")
spin_buttons <- c(""num_of_bins"", ""bin_width"", ""group_by_num"")
toggle_inputs <- c(""group_data"", ""run_code_at_script_launch"", ""run_plot_at_script_launch"")
colour_inputs <- ""colour""
ace_inputs <- ""code""
inputs <- c(dropdowns, textfields, spin_buttons, toggle_inputs, colour_inputs, ace_inputs)

default_values <- list()
default_values$plot_function <- ""geom_histogram""
default_values$plot_theme <- ""theme_minimal""
default_values$bins_type <- ""num_of_bins""
default_values$x_variable <- 0L
default_values$y_variable <- 0L
default_values$colour_pal <- ""Set1""
default_values$group_by <- ""datetime""
default_values$group_by_type <- ""hours""
default_values$summarize_fct <- ""mean""
default_values$x_label <- """"
default_values$y_label <- """"
default_values$num_of_bins <- 50L
default_values$bin_width <- 10L
default_values$group_by_num <- 4L
default_values$group_data <- FALSE
default_values$colour <- ""#E41A1C""
default_values$run_code_at_script_launch <- FALSE
default_values$run_plot_at_script_launch <- FALSE
default_values$code <- """"

inputs_values <- list()

# Get saved params for this widget
sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id% AND link_id = {selected_script}"", .con = r$db)
widget_options <- DBI::dbGetQuery(m$db, sql)

for (input_name in inputs){
    widget_option <- widget_options %>% dplyr::filter(name == input_name)
    
    if (nrow(widget_option) > 0){
        if (input_name %in% spin_buttons || input_name %in% c(""x_variable"", ""y_variable"")) inputs_values[[input_name]] <- widget_option$value_num
        else inputs_values[[input_name]] <- widget_option$value
    }
    else inputs_values[[input_name]] <- default_values[[input_name]]
}

# aceEditor div : show editor if user has access to the console
ace_editor_div <- div(br(), shiny.fluent::MessageBar(i18np$t(""unauthorized_access_to_console""), messageBarType = 5), br())
if (length(m$user_accesses) > 0) if (""data_console"" %in% m$user_accesses) ace_editor_div <- div(
    div(
        shinyAce::aceEditor(
            ns(""code_%widget_id%""), """", mode = ""r"", value = inputs_values$code,
                code_hotkeys = list(
                    ""r"", list(
                      run_selection = list(win = ""CTRL-ENTER"", mac = ""CTRL-ENTER|CMD-ENTER""),
                      run_all = list(win = ""CTRL-SHIFT-ENTER"", mac = ""CTRL-SHIFT-ENTER|CMD-SHIFT-ENTER""),
                      save = list(win = ""CTRL-S"", mac = ""CTRL-S|CMD-S"")
                    )
                ),
                autoScrollEditorIntoView = TRUE, minLines = 30, maxLines = 1000
        ), 
    style = ""width: 100%;""),
    shiny.fluent::PrimaryButton.shinyInput(ns(""run_code_%widget_id%""), i18n$t(""run_code"")), br()
)

tagList(
    shiny.fluent::reactOutput(ns(""delete_confirm_%widget_id%"")),
    shiny.fluent::Pivot(
        id = ns(""pivot_%widget_id%""),
        onLinkClick = htmlwidgets::JS(paste0(""item => Shiny.setInputValue(''"", id, ""-current_tab_%widget_id%'', item.props.id)"")),
        shiny.fluent::PivotItem(id = ""plot_div_%widget_id%"", itemKey = ""plot"", headerText = i18np$t(""plot"")),
        shiny.fluent::PivotItem(id = ""code_div_%widget_id%"", itemKey = ""code"", headerText = i18np$t(""code"")),
        shiny.fluent::PivotItem(id = ""scripts_management_div_%widget_id%"", itemKey = ""scripts_management"", headerText = i18np$t(""scripts_management""))
    ),
    div(
        id = ns(""plot_and_code_div_%widget_id%""), br(),
        shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
            div(shiny.fluent::Dropdown.shinyInput(ns(""script_choice_%widget_id%""),
                options = convert_tibble_to_list(plots, key_col = ""id"", text_col = ""name""), value = selected_script), style = ""width:300px""),
            shiny.fluent::DefaultButton.shinyInput(ns(""save_%widget_id%""), i18np$t(""save"")),
            div(
                id = ns(""toggle_run_plot_div_%widget_id%""),
                shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                    shiny.fluent::Toggle.shinyInput(ns(""run_plot_at_script_launch_%widget_id%""), value = FALSE, style = ""margin-top:5px;""),
                    div(class = ""toggle_title"", i18np$t(""run_plot_at_script_launch""), style = ""padding-top:5px;"")
                )
            ),
            shinyjs::hidden(
                div(
                    id = ns(""toggle_run_code_div_%widget_id%""),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        shiny.fluent::Toggle.shinyInput(ns(""run_code_at_script_launch_%widget_id%""), value = FALSE, style = ""margin-top:5px;""),
                        div(class = ""toggle_title"", i18np$t(""run_code_at_script_launch""), style = ""padding-top:5px;"")
                    )
                )
            )
        )
    ),
    div(
        id = ns(""plot_div_%widget_id%""),
        div(
            style = ""display:flex;"",
            div(id = ns(""split_layout_left_%widget_id%""),
                style = ""padding-right:10px; width:50%;"",
                div(
                    id = ns(""plot_div_%widget_id%""), br(),
                    plotOutput(ns(""plot_output_%widget_id%""))
                ), br(),
                shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                    shiny.fluent::Toggle.shinyInput(ns(""hide_params_%widget_id%""), value = FALSE, style = ""margin-top:5px;""),
                    div(class = ""toggle_title"", i18np$t(""hide_params""), style = ""padding-top:5px;""),
                    div(strong(i18np$t(""plot_width"")), style = ""margin-top:6px;""),
                    div(shiny.fluent::Slider.shinyInput(ns(""plot_width_%widget_id%""), value = 100, min = 1, max = 100), style = ""width:300px; margin-left:0px; padding-top:4px;"")
                )
            ),
            div(id = ns(""split_layout_right_%widget_id%""),
                style = ""padding-left:10px; width:50%;"",
                shiny.fluent::Pivot(
                    id = ns(""plot_pivot_%widget_id%""),
                    onLinkClick = htmlwidgets::JS(paste0(""item => Shiny.setInputValue(''"", id, ""-plot_current_tab_%widget_id%'', item.props.id)"")),
                    shiny.fluent::PivotItem(id = ""plot_parameters_div_%widget_id%"", itemKey = ""plot_parameters"", headerText = i18np$t(""plot_parameters"")),
                    shiny.fluent::PivotItem(id = ""variables_div_%widget_id%"", itemKey = ""variables"", headerText = i18np$t(""variables""))
                ),
                div(
                    id = ns(""plot_parameters_div_%widget_id%""), br(),
                    shiny.fluent::Dropdown.shinyInput(ns(""plot_function_%widget_id%""), label = i18np$t(""plot_choice""),
                        options = list(
                            list(key = ""geom_histogram"", text = paste0(i18np$t(""histogram""), "" (geom_histogram)"")),
                            list(key = ""geom_point"", text = paste0(i18np$t(""scatter_plot""), "" (geom_point)""))
                        ),
                        value = inputs_values$plot_function),
                    shiny.fluent::Dropdown.shinyInput(ns(""plot_theme_%widget_id%""), label = i18np$t(""theme""),
                        options = list(
                            list(key = ""theme_grey"", text = ""Grey""),
                            list(key = ""theme_gray"", text = ""Gray""),
                            list(key = ""theme_bw"", text = ""Black & white""),
                            list(key = ""theme_linedraw"", text = ""Linedraw""),
                            list(key = ""theme_light"", text = ""Light""),
                            list(key = ""theme_dark"", text = ""Dark""),
                            list(key = ""theme_minimal"", text = ""Minimal""),
                            list(key = ""theme_classic"", text = ""Classic""),
                            list(key = ""theme_void"", text = ""Void""),
                            list(key = ""theme_test"", text = ""Test"")
                        ),
                        value = inputs_values$plot_theme),
                    shiny.fluent::TextField.shinyInput(ns(""x_label_%widget_id%""), label = i18np$t(""x_label""), value = inputs_values$x_label),
                    shiny.fluent::TextField.shinyInput(ns(""y_label_%widget_id%""), label = i18np$t(""y_label""), value = inputs_values$y_label),
                    div(
                        id = ns(""plot_function_geom_histogram_div_%widget_id%""),
                        shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                            div(
                                shiny.fluent::Dropdown.shinyInput(ns(""bins_type_%widget_id%""), label = i18np$t(""bins""),
                                    options = list(
                                        list(key = ""num_of_bins"", text = i18np$t(""num_of_bins"")),
                                        list(key = ""bin_width"", text = i18np$t(""bin_width""))
                                    ),
                                    value = inputs_values$bins_type),
                                style = ""width:50%""
                            ),
                            div(
                                div(
                                    id = ns(""num_of_bins_div_%widget_id%""),
                                    shiny.fluent::SpinButton.shinyInput(ns(""num_of_bins_%widget_id%""), label = i18np$t(""value""), 
                                        value = inputs_values$num_of_bins, step = 5, min = 0, max = 2000)
                                ),
                                shinyjs::hidden(
                                    div(
                                        id = ns(""bin_width_div_%widget_id%""),
                                        shiny.fluent::SpinButton.shinyInput(ns(""bin_width_%widget_id%""), label = i18np$t(""value""), 
                                        value = inputs_values$bin_width, step = 1, min = 0)
                                    )
                                ),
                                style = ""width:50%; margin-top:28px;""
                            )
                        )
                    )
                ),
                div(
                    id = ns(""variables_div_%widget_id%""), br(),
                    shiny.fluent::Dropdown.shinyInput(ns(""x_variable_%widget_id%""), label = i18np$t(""x_variable""),
                        options = x_variables, value = inputs_values$x_variable),
                    shinyjs::hidden(
                        div(
                            id = ns(""y_variable_div_%widget_id%""),
                            shiny.fluent::Dropdown.shinyInput(ns(""y_variable_%widget_id%""), label = i18np$t(""y_variable""),
                                options = y_variables, value = inputs_values$y_variable)
                        )
                    ),
                    shiny.fluent::Dropdown.shinyInput(ns(""colour_pal_%widget_id%""), options = palettes, 
                        value = inputs_values$colour_pal, label = i18np$t(""palette"")),
                    uiOutput(ns(""colour_ui_%widget_id%"")),
                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                        shiny.fluent::Toggle.shinyInput(ns(""group_data_%widget_id%""), 
                            value = inputs_values$group_data, style = ""margin-top:5px;""),
                        div(class = ""toggle_title"", i18np$t(""group_data""), style = ""padding-top:5px;"")
                    ),
                    div(
                        id = ns(""group_data_div_%widget_id%""),
                        shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                            div(
                                shiny.fluent::Dropdown.shinyInput(ns(""group_by_%widget_id%""), 
                                    options = list(
                                        list(key = ""person_id"", text = i18np$t(""person"")),
                                        list(key = ""datetime"", text = i18np$t(""duration""))
                                    ), 
                                    value = inputs_values$group_by, label = i18np$t(""group_by"")),
                                style = ""width:33%""
                            ),
                            div(
                                div(
                                    id = ns(""group_by_datetime_div_%widget_id%""),
                                    shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                                        div(
                                            shiny.fluent::SpinButton.shinyInput(ns(""group_by_num_%widget_id%""), label = """", 
                                                value = inputs_values$group_by_num, step = 1, min = 0, max = 2000), 
                                            style = ""width:50%; margin-top:29px;""
                                        ),
                                        div(
                                            shiny.fluent::Dropdown.shinyInput(ns(""group_by_type_%widget_id%""), 
                                                options = list(
                                                    list(key = ""minutes"", text = i18np$t(""minutes"")),
                                                    list(key = ""hours"", text = i18np$t(""hours"")),
                                                    list(key = ""days"", text = i18np$t(""days""))
                                                ), 
                                                value = inputs_values$group_by_type, label = i18np$t(""duration"")),
                                            style = ""width:50%""
                                        )
                                    )
                                ),
                                style = ""width:67%""
                            )
                        ),
                        div(
                            shiny.fluent::Dropdown.shinyInput(ns(""summarize_fct_%widget_id%""), 
                                options = list(
                                    list(key = ""min"", text = i18np$t(""min"")),
                                    list(key = ""max"", text = i18np$t(""max"")),
                                    list(key = ""mean"", text = i18np$t(""mean""))
                                ), 
                                value = inputs_values$summarize_fct, label = i18np$t(""summarize_fct"")
                            ),
                            style = ""width:33%""
                        )
                    )
                ), br(), br(),
                shiny.fluent::Stack(horizontal = TRUE, tokens = list(childrenGap = 10),
                    shiny.fluent::PrimaryButton.shinyInput(ns(""show_%widget_id%""), i18np$t(""show"")),
                    shiny.fluent::DefaultButton.shinyInput(ns(""generate_code_%widget_id%""), i18np$t(""generate_code""))
                )
            )
        )
    ),
    shinyjs::hidden(
        div(
            id = ns(""code_div_%widget_id%""),
            ace_editor_div
        )
    ),
    shinyjs::hidden(
        div(
            id = ns(""scripts_management_div_%widget_id%""),
            div(
                id = ns(""scripts_management_tab_%widget_id%""),
                shiny.fluent::Stack(
                    horizontal = TRUE, tokens = list(childrenGap = 10),
                    make_textfield(i18n = i18n, ns = ns, label = ""name"", id = ""script_name_%widget_id%"", width = ""300px""),
                    div(shiny.fluent::PrimaryButton.shinyInput(ns(""add_script_%widget_id%""), i18n$t(""add"")), style = ""margin-top:38px;"")
                ),
                DT::DTOutput(ns(""scripts_management_datatable_%widget_id%"")),
                shiny.fluent::Stack(
                    horizontal = TRUE, tokens = list(childrenGap = 10),
                    shiny.fluent::PrimaryButton.shinyInput(ns(""save_scripts_%widget_id%""), i18n$t(""save"")),
                    shiny.fluent::DefaultButton.shinyInput(ns(""delete_scripts_%widget_id%""), i18n$t(""delete_selection""))
                )
            )
        )
    )
)",1,2023-12-03 18:21:52,0
5,plugin_server,2,"# Get saved params for this widget
sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id%"", .con = r$db)
widget_options <- DBI::dbGetQuery(m$db, sql)

m$widget_options_%widget_id% <- widget_options
m$scripts_%widget_id% <- widget_options %>% dplyr::filter(name == ""script"") %>% dplyr::select(id = value_num, name = value)
m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = FALSE)
m$reload_dt_%widget_id% <- Sys.time()

# List of inputs (to save & get saved params)

dropdowns <- c(""plot_function"", ""plot_theme"", ""bins_type"", ""x_variable"", ""y_variable"", ""colour_pal"", ""group_by"", ""group_by_type"", ""summarize_fct"")
textfields <- c(""x_label"", ""y_label"")
spin_buttons <- c(""num_of_bins"", ""bin_width"", ""group_by_num"")
toggle_inputs <- c(""group_data"", ""run_code_at_script_launch"", ""run_plot_at_script_launch"")
colour_inputs <- ""colour""
ace_inputs <- ""code""
inputs <- c(dropdowns, textfields, spin_buttons, toggle_inputs, colour_inputs, ace_inputs)

default_values <- list()
default_values$plot_function <- ""geom_histogram""
default_values$plot_theme <- ""theme_minimal""
default_values$bins_type <- ""num_of_bins""
default_values$x_variable <- 0L
default_values$y_variable <- 0L
default_values$colour_pal <- ""Set1""
default_values$group_by <- ""datetime""
default_values$group_by_type <- ""hours""
default_values$summarize_fct <- ""mean""
default_values$x_label <- """"
default_values$y_label <- """"
default_values$num_of_bins <- 50L
default_values$bin_width <- 10L
default_values$group_by_num <- 4L
default_values$group_data <- FALSE
default_values$colour <- ""#E41A1C""
default_values$run_code_at_script_launch <- FALSE
default_values$run_plot_at_script_launch <- FALSE
default_values$code <- """"

# In case of widget settings, update dropdowns of variables
concepts <- tibble::tibble(concept_id = 0L, concept_name = i18np$t(""none"")) %>% dplyr::bind_rows(selected_concepts %>% dplyr::select(concept_id, concept_name))
variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")

shinyjs::delay(100, {
    for (i in c(""x"", ""y"")){
        if (length(input[[paste0(i, ""_variable_%widget_id%"")]]) > 0){
            value <- 0L
            if (input[[paste0(i, ""_variable_%widget_id%"")]] %in% selected_concepts$concept_id) value <- input[[paste0(i, ""_variable_%widget_id%"")]]
            shiny.fluent::updateDropdown.shinyInput(session, paste0(i, ""_variable_%widget_id%""), options = variables, value = value)
        }
    }
})

# -------------------------
# --- Show / hide divs ----
# -------------------------

observeEvent(input$current_tab_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$current_tab_%widget_id%""))
    
    sapply(c(""plot_and_code_div_%widget_id%"", ""plot_div_%widget_id%"", ""code_div_%widget_id%"", ""scripts_management_div_%widget_id%""), shinyjs::hide)
    shinyjs::show(input$current_tab_%widget_id%)
    if (input$current_tab_%widget_id% %in% c(""plot_div_%widget_id%"", ""code_div_%widget_id%"")){
        sapply(c(""toggle_run_plot_div_%widget_id%"", ""toggle_run_code_div_%widget_id%""), shinyjs::hide)
        sapply(c(paste0(""toggle_run_"", input$current_tab_%widget_id%), ""plot_and_code_div_%widget_id%""), shinyjs::show)
    }
})

observeEvent(input$plot_current_tab_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$plot_current_tab_%widget_id%""))
    
    sapply(c(""plot_parameters_div_%widget_id%"", ""variables_div_%widget_id%""), shinyjs::hide)
    shinyjs::show(input$plot_current_tab_%widget_id%)
})

observeEvent(input$group_data_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$group_data_%widget_id%""))
    
    if (input$group_data_%widget_id%) shinyjs::show(""group_data_div_%widget_id%"")
    else shinyjs::hide(""group_data_div_%widget_id%"")
})

observeEvent(input$group_by_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$group_by_%widget_id%""))
    
    if (input$group_by_%widget_id% == ""datetime"") shinyjs::show(""group_by_datetime_div_%widget_id%"")
    else shinyjs::hide(""group_by_datetime_div_%widget_id%"")
})

observeEvent(input$plot_function_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$plot_function_%widget_id%""))
    
    sapply(c(""y_variable_div_%widget_id%"", ""plot_function_geom_histogram_div_%widget_id%""), shinyjs::hide)
    
    if (input$plot_function_%widget_id% == ""geom_point"") shinyjs::show(""y_variable_div_%widget_id%"")
    if (input$plot_function_%widget_id% == ""geom_histogram"") shinyjs::show(""plot_function_geom_histogram_div_%widget_id%"")
})

observeEvent(input$plot_function_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$plot_function_%widget_id% (only once)""))
    shinyjs::delay(500, shinyjs::hide(""variables_div_%widget_id%""))
}, once = TRUE)

observeEvent(input$bins_type_%widget_id%, {
     %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$bins_type_%widget_id%""))
    
    sapply(c(""num_of_bins_div_%widget_id%"", ""bin_width_div_%widget_id%""), shinyjs::hide)
    shinyjs::show(paste0(input$bins_type_%widget_id%, ""_div_%widget_id%""))
})

# -------------
# --- Plot ----
# -------------

# Update x & y variables dropdowns
concepts <- tibble::tibble(concept_id = 0L, concept_name = i18np$t(""none"")) %>% dplyr::bind_rows(selected_concepts %>% dplyr::select(concept_id, concept_name))
x_variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")
shiny.fluent::updateDropdown.shinyInput(session, ""x_variable_%widget_id%"", options = x_variables)
y_variables <- convert_tibble_to_list(concepts, key_col = ""concept_id"", text_col = ""concept_name"")
shiny.fluent::updateDropdown.shinyInput(session, ""y_variable_%widget_id%"", options = y_variables)

# Render plot from ""plot"" tab
observeEvent(input$show_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$show_%widget_id%""))
    
    # Blank plot
    output$plot_output_%widget_id% <- renderPlot({
        %req%
        if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$plot_output_%widget_id%""))
        ggplot2::ggplot()
    })
    
    # Then load plot
    m$create_plot_type_%widget_id% <- ""show_plot""
    m$create_plot_trigger_%widget_id% <- Sys.time()
})

# Generate code and update aceEditor or render plot
observeEvent(m$create_plot_trigger_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$create_plot_trigger_%widget_id%""))
    
    create_plot_type <- isolate(m$create_plot_type_%widget_id%)
    
    # At each step of the code, we put the code in the code variable, for the shinyAce code editor (tab ""Code"")
    
    req(length(isolate(input$colour_%widget_id%)) > 0)
    
    data <- list()
    code <- ""# A list containing the data for the plot\ndata <- list()\n""
    variable <- list()
    
    data$x <- tibble::tibble()
    variable$x <- tibble::tibble()
    data$y <- tibble::tibble()
    variable$y <- tibble::tibble()
    
    # Get x & y variables in data
    # For now, we do not include merged concepts
    if (length(input$x_variable_%widget_id%) > 0) variable$x <- d$dataset_all_concepts %>% dplyr::filter(concept_id_1 == input$x_variable_%widget_id%, is.na(relationship_id))
    if (length(input$y_variable_%widget_id%) > 0) variable$y <- d$dataset_all_concepts %>% dplyr::filter(concept_id_1 == input$y_variable_%widget_id%, is.na(relationship_id))
 
    code <- paste0(code, ""\n# Filter data"")
    sapply(c(""x"", ""y""), function(var_name){
        if (nrow(variable[[var_name]]) > 0){
            variable[[var_name]]$domain_id <<- tolower(variable[[var_name]]$domain_id)
            if (variable[[var_name]]$domain_id %in% c(""observation"", ""measurement"")){
            
                table_name <- tolower(variable[[var_name]]$domain_id)
                concept_id <- variable[[var_name]]$concept_id_1
                
                if (""tbl_lazy"" %in% class(d[[table_name]])) data[[var_name]] <<- d[[table_name]] %>% dplyr::filter(rlang::sym(paste0(table_name, ""_concept_id"")) == !!concept_id) %>% dplyr::collect()
                else data[[var_name]] <<- d[[table_name]] %>% dplyr::filter(get(paste0(table_name, ""_concept_id"")) == !!concept_id)
                
                code <<- glue::glue(
                    ""{code}\n"",
                    ""data${var_name} <- d${tolower(variable[[var_name]]$domain_id)} %>% "",
                    ""dplyr::filter({paste0(tolower(variable[[var_name]]$domain_id), ''_concept_id'')} == {variable[[var_name]]$concept_id_1}) %>% "",
                    ""dplyr::collect()""
                )
            }
        }
    })
        
    # If we choose to group data
    if (isolate(input$group_data_%widget_id%)){
        for(var in c(""x"", ""y"")){
            if (nrow(data[[var]]) > 0){
            
                code <- glue::glue(code, ""\n\n# Group {var} data"")
            
                # Group by person_id
                if (isolate(input$group_by_%widget_id% == ""person_id"")){
                    data[[var]] <- data[[var]] %>% dplyr::group_by(person_id)
                    
                    code <- glue::glue(""{code}\ndata${var} <- data${var} %>% dplyr::group_by(person_id)"")
                }
                
                # Group by datetime
                if (isolate(input$group_by_%widget_id%) == ""datetime""){
                    data[[var]] <- data[[var]] %>%
                        dplyr::filter(!is.na(value_as_number)) %>%
                        dplyr::mutate(datetime_rounded = lubridate::floor_date(
                            !!rlang::sym(paste0(tolower(variable$x$domain_id), ""_datetime"")), 
                            unit = paste0(isolate(input$group_by_num_%widget_id%), "" "", isolate(input$group_by_type_%widget_id%)))) %>%
                        dplyr::group_by(datetime_rounded)
                        
                    code <- glue::glue(
                        ""{code}\n"",
                        ""data${var} <-\n"",
                        ""    data${var} %>%\n"",
                        ""    dplyr::filter(!is.na(value_as_number)) %>%\n"",
                        ""    dplyr::mutate(datetime_rounded = lubridate::floor_date("",
                        ""{paste0(tolower(variable$x$domain_id), ''_datetime'')}, "",
                        ""unit = \""{paste0(isolate(input$group_by_num_%widget_id%), '' '', isolate(input$group_by_type_%widget_id%))}\"")) %>%\n"",
                        ""    dplyr::group_by(datetime_rounded)""
                    )

                }
                
                # Summarize with selected summarize function
                data[[var]] <-
                    data[[var]] %>% 
                    dplyr::summarize(value_as_number = match.fun(isolate(input$summarize_fct_%widget_id%))(value_as_number, na.rm = TRUE)) %>%
                    dplyr::ungroup()
                    
                code <- paste0(
                    code, "" %>%\n"",
                    ""    "", glue::glue(""dplyr::summarize(value_as_number = match.fun(\""{isolate(input$summarize_fct_%widget_id%)}\"")(value_as_number, na.rm = TRUE)) %>%\n""),
                    ""    "", glue::glue(""dplyr::ungroup()"")
                )
                
                # Rename datetime col with original name
                if (isolate(input$group_by_%widget_id%) == ""datetime""){
                    data[[var]] <- 
                        data[[var]] %>% 
                        dplyr::rename(!!paste0(tolower(variable$x$domain_id), ""_datetime"") := datetime_rounded)
                    
                    code <- paste0(
                        code, "" %>%\n"",
                        ""    "", glue::glue(""dplyr::rename({paste0(tolower(variable$x$domain_id), ''_datetime'')} := datetime_rounded)"")
                    )
                }
            }
        }
    }

    # HISTOGRAM
    
    if (isolate(input$plot_function_%widget_id%) == ""geom_histogram""){
        req(nrow(data$x) > 0)
        
        # Create ggplot2 figure
        code <- glue::glue(""{code}\n\n# Create ggplot2 plot\n"", ""data$x %>%\n    ggplot2::ggplot(ggplot2::aes(x = value_as_number))"")
        
        # Add params
        if (isolate(input$bins_type_%widget_id%) == ""num_of_bins"") code <- paste0(
            code, "" +\n    "",
            glue::glue(""ggplot2::geom_histogram(bins = {isolate(input$num_of_bins_%widget_id%)}, fill = \""{isolate(input$colour_%widget_id%)}\"", color = \""#FFFFFF\"")"")
        )
            
        else if (isolate(input$bins_type_%widget_id%) == ""bin_width"") code <- paste0(
            code, "" +\n    "",
            glue::glue(""ggplot2::geom_histogram(binwidth = {isolate(input$bin_width_%widget_id%)}, fill = \""{isolate(input$colour_%widget_id%)}\"", color = \""#FFFFFF\"")"")
        )
    }
    
    # SCATTER PLOT
    
    if (isolate(input$plot_function_%widget_id%) == ""geom_point""){
        req(nrow(data$x) > 0, nrow(data$y) > 0)
        
        code <- paste0(code, ""\n\n# Prepare data for ggplot2 plot"")
        
        # If data is grouped by person_id
        if (isolate(input$group_data_%widget_id%) & isolate(input$group_by_%widget_id% == ""person_id"")) code <- paste0(
            code, ""\n"",
            ""fig_data <-\n"",
            ""    data$x %>%\n"",
            ""    dplyr::transmute(person_id, variable = \""x\"", value_as_number) %>%\n"",
            ""    dplyr::bind_rows(\n"",
            ""        data$y %>%\n"",
            ""        dplyr::transmute(person_id, variable = \""y\"", value_as_number)\n"",
            ""    ) %>%\n"",
            ""    dplyr::mutate(n = 1:dplyr::n()) %>%\n"",
            ""    tidyr::pivot_wider(names_from = \""variable\"", values_from = \""value_as_number\"") %>%\n"",
            ""    dplyr::select(-n) %>%\n"",
            ""    dplyr::group_by(person_id) %>%\n"",
            ""    dplyr::summarize(x = dplyr::first(na.omit(x)), y = dplyr::first(na.omit(y))) %>%\n"",
            ""    dplyr::ungroup()""
        )
        
        # If data is not grouped or grouped by datetime
        else code <- glue::glue(
            ""{code}\n"",
            ""fig_data <-\n"",
            ""    data$x %>%\n"",
            ""    dplyr::rename(datetime = {paste0(tolower(variable$x$domain_id), ''_datetime'')}) %>%\n"",
            ""    dplyr::transmute(datetime, variable = \""x\"", value_as_number) %>%\n"",
            ""    dplyr::bind_rows(\n"",
            ""        data$y %>%\n"",
            ""        dplyr::rename(datetime = {paste0(tolower(variable$y$domain_id), ''_datetime'')}) %>%\n"",
            ""        dplyr::transmute(datetime, variable = \""y\"", value_as_number)\n"",
            ""    ) %>%\n"",
            ""    dplyr::mutate(n = 1:dplyr::n()) %>%\n"",
            ""    tidyr::pivot_wider(names_from = \""variable\"", values_from = \""value_as_number\"") %>%\n"",
            ""    dplyr::select(-n) %>%\n"",
            ""    dplyr::group_by(datetime) %>%\n"",
            ""    dplyr::summarize(x = dplyr::first(na.omit(x)), y = dplyr::first(na.omit(y))) %>%\n"",
            ""    dplyr::ungroup()""
        )
        
        # Create ggplot2 figure
        code <- paste0(
            code, ""\n\n# Create ggplot2 plot\n"",
            ""fig_data %>%\n"",
            ""    ggplot2::ggplot(ggplot2::aes(x = x, y = y)) +\n"",
            glue::glue(""    ggplot2::geom_point(colour = \""{isolate(input$colour_%widget_id%)}\"")"")
        )
    }
    
    # Add theme & labs
    code <- paste0(
        code, "" +\n    "",
        glue::glue(""ggplot2::{isolate(input$plot_theme_%widget_id%)}() +""), ""\n    "",
        glue::glue(""ggplot2::labs(x = \""{isolate(input$x_label_%widget_id%)}\"", y = \""{isolate(input$y_label_%widget_id%)}\"")"")
    )
    
    # Update shinyAce code editor
    if (create_plot_type == ""generate_code""){
        shinyAce::updateAceEditor(session, ""code_%widget_id%"", value = code)
        
        # Go to ""Code"" tab
        shinyjs::runjs(glue::glue(""$(''#{id}-pivot_%widget_id% button[name=\""{i18np$t(''code'')}\""]'').click();""))
    }
    
    # Final object of ggplot2 figure
    if (create_plot_type == ""show_plot"") output$plot_output_%widget_id% <- renderPlot({
        %req%
        if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$plot_output_%widget_id%""))
        eval(parse(text = code))
    })
})

# Change SwatchColorPicker
observeEvent(input$colour_pal_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$colour_pal_%widget_id%""))

    pal <- RColorBrewer::brewer.pal(n = 8, name = input$colour_pal_%widget_id%)
    pal_tibble <- tibble::tibble(name = pal)
    colorCells <- list()
    for (i in 1:nrow(pal_tibble)) colorCells <- rlist::list.append(colorCells, list(id = pal_tibble[[i, ""name""]], color = pal_tibble[[i, ""name""]]))
    
    # Get saved colour
    value <- pal[1]
    if (length(input$script_choice_%widget_id%) > 0){
        sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id% AND link_id = {input$script_choice_%widget_id%} AND name = ''colour''"", .con = r$db)
        colour <- DBI::dbGetQuery(m$db, sql)
        if (nrow(colour) > 0) if (colour %>% dplyr::pull(value) %in% pal) value <- colour %>% dplyr::pull(value)   
    }
    
    output$colour_ui_%widget_id% <- renderUI({
        %req%
        if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$colour_ui_%widget_id%""))
        shiny.fluent::SwatchColorPicker.shinyInput(ns(""colour_%widget_id%""), colorCells = colorCells, columnCount = length(colorCells), value = value)
    })
})

# Save widget parameters
observeEvent(input$save_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_%widget_id%""))
    
    req(length(input$script_choice_%widget_id%) > 0)

    # Delete old options
    sql <- glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = {%widget_id%} AND link_id = {input$script_choice_%widget_id%}"", .con = m$db)
    DBI::dbSendStatement(m$db, sql) -> query
    DBI::dbClearResult(query)
    
    last_row <- get_last_row(m$db, ""widgets_options"")
    
    # Add new options
    new_options <- tibble::tibble(
        id = seq(last_row + 1, last_row + length(inputs)),
        widget_id = %widget_id%, person_id = NA_integer_, link_id = input$script_choice_%widget_id%,
        category = NA_character_, name = NA_character_, value = NA_character_, value_num = NA_real_,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
    
    new_options_values <- tibble::tibble(name = character(), value = character(), value_num = numeric())
    
    for (input_name in inputs){
        if (input_name %in% spin_buttons || input_name %in% c(""x_variable"", ""y_variable"")){
            value_num <- NA_real_
            if (length(input[[paste0(input_name, ""_%widget_id%"")]]) > 0) value_num <- input[[paste0(input_name, ""_%widget_id%"")]]
            new_options_values <- new_options_values %>% dplyr::bind_rows(tibble::tibble(name = input_name, value = NA_character_, value_num = value_num))
        } 
        else {
            value <- NA_character_
            if (length(input[[paste0(input_name, ""_%widget_id%"")]]) > 0) value <- as.character(input[[paste0(input_name, ""_%widget_id%"")]])
            new_options_values <- new_options_values %>% dplyr::bind_rows(tibble::tibble(name = input_name, value = value, value_num = NA_real_))
        } 
    }
    
    for (col in c(""name"", ""value"", ""value_num"")) new_options[[col]] <- new_options_values[[col]]
    
    DBI::dbAppendTable(m$db, ""widgets_options"", new_options)
    
    m$widget_options_%widget_id% <- m$widget_options_%widget_id% %>% dplyr::filter(link_id != input$script_choice_%widget_id%) %>% dplyr::bind_rows(new_options)
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

# Hide parameters div
observeEvent(input$hide_params_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$hide_params_%widget_id%""))

    if (input$hide_params_%widget_id%){
        shinyjs::hide(""split_layout_right_%widget_id%"")
        shinyjs::delay(100, shinyjs::runjs(glue::glue(""$(''#{id}-split_layout_left_%widget_id%'').css(''width'', ''100%'');"")))
    }
    else {
        shinyjs::runjs(glue::glue(""$(''#{id}-split_layout_left_%widget_id%'').css(''width'', ''50%'');""))
        shinyjs::delay(100, shinyjs::show(""split_layout_right_%widget_id%""))
    }
})

# Plot width
observeEvent(input$plot_width_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$plot_width_%widget_id%""))
    shinyjs::runjs(glue::glue(""$(''#{id}-plot_div_%widget_id%'').css(''width'', ''{isolate(input$plot_width_%widget_id%)}%'');"")) %>% throttle(1000)
})

# Run plot / code at script launch
observeEvent(input$run_plot_at_script_launch_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_plot_at_script_launch_%widget_id%""))
    if (input$run_plot_at_script_launch_%widget_id%) shiny.fluent::updateToggle.shinyInput(session, ""run_code_at_script_launch_%widget_id%"", value = FALSE)
})
observeEvent(input$run_code_at_script_launch_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_code_at_script_launch_%widget_id%""))
    if (input$run_code_at_script_launch_%widget_id%) shiny.fluent::updateToggle.shinyInput(session, ""run_plot_at_script_launch_%widget_id%"", value = FALSE)
})

# ------------
# --- Code ---
# ------------

# Generate code
observeEvent(input$generate_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$generate_code_%widget_id%""))
    m$create_plot_type_%widget_id% <- ""generate_code""
    m$create_plot_trigger_%widget_id% <- Sys.time()
})

# Render plot from ""code"" tab

observeEvent(input$run_code_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$run_code_%widget_id%""))
    m$run_code_%widget_id% <- input$code_%widget_id%
    m$run_code_trigger_%widget_id% <- Sys.time()
})

observeEvent(m$run_code_trigger_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$run_code_trigger_%widget_id%""))
    
    # Go to plot tab
    shinyjs::runjs(glue::glue(""$(''#{id}-pivot_%widget_id% button[name=\""{i18np$t(''plot'')}\""]'').click();""))
    
    # Render plot
    output$plot_output_%widget_id% <- renderPlot({
        %req%
        if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$plot_output_%widget_id%""))
        eval(parse(text = m$run_code_%widget_id%))
    })
})

# ---------------
# --- Scripts ---
# ---------------

# Add a new script
observeEvent(input$add_script_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$add_script_%widget_id%""))
    
    # Check if name is not empty
    empty_name <- TRUE
    if (length(input$script_name_%widget_id%) > 0) if (input$script_name_%widget_id% != """") empty_name <- FALSE
    if (empty_name) shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = i18n$t(""provide_valid_name""))
    req(!empty_name)
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = NULL)
    
    # Check if name is not already used
    sql <- glue::glue_sql(""SELECT * FROM widgets_options WHERE widget_id = %widget_id% AND name = ''script'' AND value = {input$script_name_%widget_id%}"", .con = m$db)
    already_used_name <- DBI::dbGetQuery(m$db, sql) %>% nrow() >= 1
    if (already_used_name) shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = i18n$t(""name_already_used""))
    req(!already_used_name)
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", errorMessage = NULL)
    
    # Add script to database
    
    last_row <- get_last_row(m$db, ""widgets_options"")
    sql <- glue::glue_sql(""SELECT COALESCE(MAX(value_num), 0) FROM widgets_options WHERE widget_id = %widget_id% AND name = ''script''"", .con = m$db)
    last_id <- DBI::dbGetQuery(m$db, sql) %>% dplyr::pull()
    
    new_options <- tibble::tibble(
        id = last_row + 1, widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""script"", value = input$script_name_%widget_id%, value_num = last_id + 1,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""widgets_options"", new_options)
    
    # Reset TextField
    shiny.fluent::updateTextField.shinyInput(session, ""script_name_%widget_id%"", value = """")
    
    # Notify user
    show_message_bar(output, ""script_added"", ""success"", i18n = i18np, ns = ns)
    
    # Add new script to scripts vector
    m$scripts_%widget_id% <- m$scripts_%widget_id% %>% 
        dplyr::bind_rows(tibble::tibble(id = last_id + 1, name = input$script_name_%widget_id%))
    m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = TRUE)
    
    # Update DT & dropdown
    m$reload_dt_%widget_id% <- Sys.time()
})

# Load a script
observeEvent(input$script_choice_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$script_choice_%widget_id%""))
    
    widget_options <- m$widget_options_%widget_id% %>% dplyr::filter(link_id == input$script_choice_%widget_id%)
    
    run_code_at_script_launch <- FALSE
    run_plot_at_script_launch <- FALSE
    code <- """"
    
    for (input_name in inputs){
        widget_option <- widget_options %>% dplyr::filter(name == input_name)
        
        # Update inputs with saved values
        if (nrow(widget_option) > 0){
            if (input_name %in% dropdowns){
                if (input_name %in% c(""x_variable"", ""y_variable"")) value <- widget_option$value_num else value <- widget_option$value
                shiny.fluent::updateDropdown.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = value)
            }
            if (input_name %in% textfields) shiny.fluent::updateTextField.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value)
            if (input_name %in% spin_buttons) shiny.fluent::updateSpinButton.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value_num)
            if (input_name %in% toggle_inputs) shiny.fluent::updateToggle.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = as.logical(widget_option$value))
            if (input_name %in% colour_inputs) shiny.fluent::updateSwatchColorPicker.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value)
            if (input_name %in% ace_inputs) shinyAce::updateAceEditor(session, paste0(input_name, ""_%widget_id%""), value = widget_option$value)
            
            if (input_name == ""run_code_at_script_launch"") run_code_at_script_launch <- as.logical(widget_option$value)
            if (input_name == ""run_plot_at_script_launch"") run_plot_at_script_launch <- as.logical(widget_option$value)
            if (input_name == ""code"") code <- widget_option$value
        }
        if (nrow(widget_option) == 0){
            if (input_name %in% dropdowns) shiny.fluent::updateDropdown.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% textfields) shiny.fluent::updateTextField.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% spin_buttons) shiny.fluent::updateSpinButton.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% toggle_inputs) shiny.fluent::updateToggle.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% colour_inputs) shiny.fluent::updateSwatchColorPicker.shinyInput(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
            if (input_name %in% ace_inputs) shinyAce::updateAceEditor(session, paste0(input_name, ""_%widget_id%""), value = default_values[[input_name]])
        }
    }
    
    # Render this plot
    if (run_code_at_script_launch){
        m$run_code_%widget_id% <- code
        m$run_code_trigger_%widget_id% <- Sys.time()
    }
    else if (run_plot_at_script_launch) shinyjs::delay(500, shinyjs::click(""show_%widget_id%""))
    
    # Save that this script is selected
    sql <- glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND name = ''selected_script''"", .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    last_row <- get_last_row(m$db, ""widgets_options"")
    
    new_options <- tibble::tibble(
        id = last_row + 1, widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""selected_script"", value = NA_character_, value_num = input$script_choice_%widget_id%,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""widgets_options"", new_options)
})

# Var for delete confirm react
m$delete_open_dialog_%widget_id% <- FALSE

# Update scripts DT & dropdown
observeEvent(m$reload_dt_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer m$reload_dt_%widget_id%""))
    
    # Reload DT
    
    # Prepare data for the datatable
    m$scripts_datatable_temp_%widget_id% <- 
        m$scripts_%widget_id% %>%
        dplyr::rename(id_temp = id) %>%
        dplyr::mutate(action = as.character(actionButton(""delete_%id%"", """", icon = icon(""trash-alt""), 
            onclick = paste0(""Shiny.setInputValue(''"", id, ""-deleted_pressed_%widget_id%'', this.id, {priority: ''event''})"")))) %>%
        dplyr::mutate(action = stringr::str_replace_all(action, ""%id%"", as.character(id_temp))) %>%
        dplyr::rename(id = id_temp)
    
    # If there is not already a proxy, create datatable
    if (length(m$datatable_proxy_%widget_id%) == 0){
        render_datatable(output = output, ns = ns, i18n = i18n, data = m$scripts_datatable_temp_%widget_id%,
            output_name = ""scripts_management_datatable_%widget_id%"", col_names = c(i18n$t(""id""), i18n$t(""name""), i18n$t(""action"")),
            editable_cols = ""name"", sortable_cols = c(""id"", ""name""), centered_cols = c(""id"", ""action""), column_widths = c(""id"" = ""80px"", ""action"" = ""80px""),
            searchable_cols = ""name"", filter = TRUE, selection = ""multiple"")
        
        # Create a proxy for this datatable
        m$datatable_proxy_%widget_id% <- DT::dataTableProxy(""scripts_management_datatable_%widget_id%"", deferUntilFlush = FALSE)
    }
    if (length(m$datatable_proxy_%widget_id%) > 0) DT::replaceData(m$datatable_proxy_%widget_id%, m$scripts_datatable_temp_%widget_id%, resetPaging = FALSE, rownames = FALSE)
    
    # Update dropdown
    value <- NULL
    if (length(input$script_choice_%widget_id%) > 0) value <- input$script_choice_%widget_id%
    if (length(input$script_choice_%widget_id%) == 0 & nrow(m$scripts_%widget_id%) > 0){
        # Load last selected script
        selected_script <- m$widget_options_%widget_id%  %>% dplyr::filter(name == ""selected_script"")
        if (nrow(selected_script) > 0) value <- selected_script %>% dplyr::pull(value_num)
    }
    
    shiny.fluent::updateDropdown.shinyInput(session, ""script_choice_%widget_id%"", 
        options = convert_tibble_to_list(m$scripts_%widget_id%, key_col = ""id"", text_col = ""name""), value = value)
})

# Updates on scripts DT
observeEvent(input$scripts_management_datatable_%widget_id%_cell_edit, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_management_datatable_%widget_id%_cell_edit""))
    
    edit_info <- input$scripts_management_datatable_%widget_id%_cell_edit
    m$scripts_temp_%widget_id% <- DT::editData(m$scripts_temp_%widget_id%, edit_info, rownames = FALSE)
      
    # Store that this row has been modified
    m$scripts_temp_%widget_id%[[edit_info$row, ""modified""]] <- TRUE
})

# Save updates on scripts
observeEvent(input$save_scripts_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$save_scripts_%widget_id%""))
    
    # Check if there are no duplicates in names
    duplicates <- m$scripts_temp_%widget_id% %>% dplyr::mutate_at(""name"", tolower) %>% dplyr::group_by(name) %>% dplyr::summarize(n = dplyr::n()) %>% dplyr::filter(n > 1) %>% nrow() >= 1
    
    if (duplicates) show_message_bar(output, ""scripts_names_duplicates"", ""severeWarning"", i18n = i18np, ns = ns)
    
    req(!duplicates)
    
    req(nrow(m$scripts_temp_%widget_id%) > 0)
    
    # Delete old options
    sql <- glue::glue_sql(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND name = ''script''"", .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    # Add new options
    last_row <- get_last_row(m$db, ""widgets_options"")
    
    new_options <- tibble::tibble(
        id = seq(last_row + 1, last_row + nrow(m$scripts_temp_%widget_id%)),
        widget_id = %widget_id%, person_id = NA_integer_, link_id = NA_integer_,
        category = NA_character_, name = ""script"", value = m$scripts_temp_%widget_id%$name, value_num = m$scripts_temp_%widget_id%$id,
        creator_id = NA_integer_, datetime = as.character(Sys.time()), deleted = FALSE)
        
    DBI::dbAppendTable(m$db, ""widgets_options"", new_options)
    
    # Update scripts dropdown
    value <- NULL
    if (length(input$script_choice_%widget_id%) > 0) value <- input$script_choice_%widget_id%
    shiny.fluent::updateDropdown.shinyInput(session, ""script_choice_%widget_id%"", 
        options = convert_tibble_to_list(m$scripts_temp_%widget_id%, key_col = ""id"", text_col = ""name""), value = value)
    
    # Notify user
    show_message_bar(output, ""modif_saved"", ""success"", i18n = i18n, ns = ns)
})

# Delete scripts

### Delete with trash icon
observeEvent(input$deleted_pressed_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$deleted_pressed_%widget_id%""))
    
    # Reload datatable (to unselect rows)
    DT::replaceData(m$datatable_proxy_%widget_id%, m$scripts_datatable_temp_%widget_id%, resetPaging = FALSE, rownames = FALSE)
    
    m$delete_scripts_%widget_id% <- as.integer(substr(input$deleted_pressed_%widget_id%, nchar(""delete_"") + 1, 100))
    m$delete_open_dialog_%widget_id% <- TRUE
})

### Delete with ""delete selection"" button
observeEvent(input$delete_scripts_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$delete_scripts_%widget_id%""))
    
    req(length(input$scripts_management_datatable_%widget_id%_rows_selected) > 0)
    m$delete_scripts_%widget_id% <- m$scripts_%widget_id%[input$scripts_management_datatable_%widget_id%_rows_selected, ] %>% dplyr::pull(id)
    m$delete_open_dialog_%widget_id% <- TRUE
})

### reactOutput for deletion confirmation
output$delete_confirm_%widget_id% <- shiny.fluent::renderReact({
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - output$delete_confirm_%widget_id%""))
    
    shiny.fluent::Dialog(
        hidden = !m$delete_open_dialog_%widget_id%,
        onDismiss = htmlwidgets::JS(paste0(""function() { Shiny.setInputValue(''scripts_hide_dialog_%widget_id%'', Math.random()); }"")),
        dialogContentProps = list(
            type = 0,
            title = i18np$t(""confirm_deletion_title""),
            closeButtonAriaLabel = ""Close"",
            subText = tagList(i18np$t(""confirm_deletion_subtext""), br(), br()
        )
    ),
    modalProps = list(),
    shiny.fluent::DialogFooter(
        shiny.fluent::PrimaryButton.shinyInput(ns(""scripts_delete_confirmed_%widget_id%""), text = i18n$t(""delete"")),
        shiny.fluent::DefaultButton.shinyInput(ns(""scripts_delete_canceled_%widget_id%""), text = i18n$t(""dont_delete""))
        )
    )
})

### Close reactOutput
observeEvent(input$scripts_hide_dialog_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_hide_dialog_%widget_id%""))
    m$delete_open_dialog_%widget_id% <- FALSE
})
observeEvent(input$scripts_delete_canceled_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_delete_canceled_%widget_id%""))
    m$delete_open_dialog_%widget_id% <- FALSE
})

### Deletion confirmed
observeEvent(input$scripts_delete_confirmed_%widget_id%, {
    %req%
    if (debug) cat(paste0(""\n"", Sys.time(), "" - mod_"", id, "" - widget_id = %widget_id% - observer input$scripts_delete_confirmed_%widget_id%""))
    
    m$delete_open_dialog_%widget_id% <- FALSE
    
    # Get scripts ids
    ids_to_del <- m$delete_scripts_%widget_id%
    
    # Delete scripts in DB
    sql <- glue::glue_sql(paste0(""DELETE FROM widgets_options WHERE widget_id = %widget_id% AND ("",
        ""(name = ''script'' AND value_num IN ({ids_to_del*})) OR "",
        ""(link_id IN ({ids_to_del*})))""), .con = m$db)
    query <- DBI::dbSendStatement(m$db, sql)
    DBI::dbClearResult(query)
    
    # Update m var
    m$scripts_%widget_id% <- m$scripts_%widget_id% %>% dplyr::filter(id %not_in% ids_to_del)
    m$scripts_temp_%widget_id% <- m$scripts_%widget_id% %>% dplyr::mutate(modified = TRUE)
    
    # Reload DT
    m$reload_dt_%widget_id% <- Sys.time()
    
    # Notify user
    show_message_bar(output, ""script_deleted"", ""warning"", i18n = i18np, ns = ns)
})",1,2023-12-03 18:21:52,0
6,plugin_translations,2,"base,en,fr
plot,Plot,Figure
code,Code,Code
scripts_management,Scripts management,Gérer les scripts
plot_parameters,Plot parameters,Paramètres de la figure
variables,Variables,Variables
plot_choice,Plot choice,Choix de la figure
x_variable,X variable,Axe des X
y_variable,Y variable,Axe des Y
show,Show plot,Afficher la figure
save,Save,Sauvegarder
hide_params,Hide parameters,Masquer les paramètres
x_label,X-axis label,Texte de l''axe des X
y_label,Y-axis label,Texte de l''axe des Y
theme,Theme,Thème
stat,Stat,Stat
bins,Bins,Barres
bin_width,Bin width,Largeur des barres
num_of_bins,Number of bins,Nombre de barres
value,Value,Valeur
palette,Palette,Palette
histogram,Histogram,Histogramme
scatter_plot,Scatter plot,Diagramme de dispersion
none,None,Aucune
group_data,Group data,Grouper les données
group_by,Group by,Grouper par
person,Patient,Patient
duration,Duration,Durée
minutes,Minutes,Minutes
hours,Hours,Heures
days,Days,Jours
summarize_fct,Summarize function,Fonction d''agrégat
min,Min,Minimum
max,Max,Maximum
mean,Mean,Moyenne
unauthorized_access_to_console,You are not authorized to access the console,Vous n''avez pas l''autorisation pour accéder à la console
generate_code,Generate code,Générer le code
script_added,Script added,Script ajouté
confirm_deletion_title,Delete scripts,Supprimer des scripts
confirm_deletion_subtext,Do you want to delete these scripts ?,Confirmer la suppression de ces scripts ?
script_deleted,Script(s) deleted,Script(s) supprimé(s)
plot_width,Plot width (%),Largeur de la figure (%)
run_plot_at_script_launch,Show plot at script launch,Afficher la figure au lancement du script
run_code_at_script_launch,Run code at script launch,Exécuter le code au lancement du script",1,2023-12-03 18:21:52,0
